<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classnw_1_1graph_1_1_atomic_bit_vector" kind="class" language="C++" prot="public">
    <compoundname>nw::graph::AtomicBitVector</compoundname>
    <includes refid="_atomic_bit_vector_8hpp" local="no">AtomicBitVector.hpp</includes>
    <innerclass refid="classnw_1_1graph_1_1_atomic_bit_vector_1_1non__zero__iterator" prot="public">nw::graph::AtomicBitVector::non_zero_iterator</innerclass>
    <innerclass refid="classnw_1_1graph_1_1_atomic_bit_vector_1_1non__zero__range" prot="public">nw::graph::AtomicBitVector::non_zero_range</innerclass>
    <templateparamlist>
      <param>
        <type>class Word</type>
        <defval>std::uint64_t</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classnw_1_1graph_1_1_atomic_bit_vector_1ad0b2b29d95ce7a34ca5dadad0b9fe7b4" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int nw::graph::AtomicBitVector&lt; Word &gt;::BITS</definition>
        <argsstring></argsstring>
        <name>BITS</name>
        <qualifiedname>nw::graph::AtomicBitVector::BITS</qualifiedname>
        <initializer>= sizeof(Word) * 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="42" column="24" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnw_1_1graph_1_1_atomic_bit_vector_1a993436ecf8146c7f46ae745d5d8ac185" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::AtomicBitVector&lt; Word &gt;::bits_</definition>
        <argsstring></argsstring>
        <name>bits_</name>
        <qualifiedname>nw::graph::AtomicBitVector::bits_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="44" column="15" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnw_1_1graph_1_1_atomic_bit_vector_1ac6fa94acc1570c751b5416398849a36a" prot="private" static="no" mutable="no">
        <type>Word *</type>
        <definition>Word* nw::graph::AtomicBitVector&lt; Word &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>nw::graph::AtomicBitVector::data_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="45" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1ac00d79ade20bf2e720aa4b1ac5f66b99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nw::graph::AtomicBitVector&lt; Word &gt;::AtomicBitVector</definition>
        <argsstring>(std::size_t bits, bool init=true)</argsstring>
        <name>AtomicBitVector</name>
        <qualifiedname>nw::graph::AtomicBitVector::AtomicBitVector</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a bitmap.</para>
<para>The bitmap bits can be allocated in an uninitialized state, which can lead to simpler code in some algorithms that would like to avoid initialization on some code paths.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bits to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, we&apos;ll initialize the bitmap data to 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="56" column="3" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1a6b078731ae92a19ec7389b4b08839aa0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nw::graph::AtomicBitVector&lt; Word &gt;::~AtomicBitVector</definition>
        <argsstring>()</argsstring>
        <name>~AtomicBitVector</name>
        <qualifiedname>nw::graph::AtomicBitVector::~AtomicBitVector</qualifiedname>
        <briefdescription>
<para>Delete the bitmap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="61" column="3" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1afdfbf00b7d121f7d462c161f71e2f69d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nw::graph::AtomicBitVector&lt; Word &gt;::AtomicBitVector</definition>
        <argsstring>(AtomicBitVector &amp;&amp;rhs)</argsstring>
        <name>AtomicBitVector</name>
        <qualifiedname>nw::graph::AtomicBitVector::AtomicBitVector</qualifiedname>
        <param>
          <type><ref refid="classnw_1_1graph_1_1_atomic_bit_vector" kindref="compound">AtomicBitVector</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The move constructor needs to be explicit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="64" column="3" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1af178276b4a0b8c3581853caaa3a357be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnw_1_1graph_1_1_atomic_bit_vector" kindref="compound">AtomicBitVector</ref> &amp;</type>
        <definition>AtomicBitVector &amp; nw::graph::AtomicBitVector&lt; Word &gt;::operator=</definition>
        <argsstring>(AtomicBitVector &amp;&amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>nw::graph::AtomicBitVector::operator=</qualifiedname>
        <param>
          <type><ref refid="classnw_1_1graph_1_1_atomic_bit_vector" kindref="compound">AtomicBitVector</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The move assignment operator needs to be explicit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="67" column="19" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="67" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1ae6f2f9f688910e6ec842382398b67163" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nw::graph::AtomicBitVector&lt; Word &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>nw::graph::AtomicBitVector::clear</qualifiedname>
        <briefdescription>
<para>Clear the bitmap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="74" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1a23bc0b796e66d42abbab4aa60dad5a2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::memory_order</type>
            <declname>order</declname>
            <defname>order</defname>
            <defval>std::memory_order_relaxed</defval>
          </param>
        </templateparamlist>
        <type>Word</type>
        <definition>Word nw::graph::AtomicBitVector&lt; Word &gt;::get</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>get</name>
        <qualifiedname>nw::graph::AtomicBitVector::get</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a bit from the vector.</para>
<para>This reads a single bit from the vector, but for performance reasons it returns the bit un-shifted in a word. This word can be used in a boolean expression and the compiler will deal with efficiently testing it for 0.</para>
<para>By default it uses the memory_order_relaxed. This is not safe if there are ever concurrent set operations to the same underlying word, which can be hard to predict, and thus should mainly be used in sequential code. The <computeroutput>atomic_get</computeroutput> operation will propery synchronize with concurrent <computeroutput>atomic_set</computeroutput> operations.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory model for the load operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The masked value of the word containing the bit. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="94" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1a59e4df43dca8844ca3c6969f294ce24d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::memory_order</type>
            <declname>order</declname>
            <defname>order</defname>
            <defval>std::memory_order_relaxed</defval>
          </param>
        </templateparamlist>
        <type>Word</type>
        <definition>Word nw::graph::AtomicBitVector&lt; Word &gt;::set</definition>
        <argsstring>(std::size_t i)</argsstring>
        <name>set</name>
        <qualifiedname>nw::graph::AtomicBitVector::set</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a bit in the vector.</para>
<para>This sets a single bit in the vector, and returns the previous value of that bit as a masked word. This returned workd can be used in a boolean expression and the compiler will deal with efficiently testing it for 0.</para>
<para>By default it uses the memory_order_relaxed. This is not safe if there are ever concurrent set or get operations to the same underlying word, which can be hard to predict, and thus should be used only in sequential code. The <computeroutput>atomic_set</computeroutput> operation will properly synchronize with concurrent <computeroutput>atomic_get</computeroutput> and <computeroutput>atomic_set</computeroutput> operations.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory model for the load operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The masked value of the word containing the bit prior to the set operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="118" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1adaf44e7fbc7185570e495d8d34d28248" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Word</type>
        <definition>Word nw::graph::AtomicBitVector&lt; Word &gt;::atomic_get</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>atomic_get</name>
        <qualifiedname>nw::graph::AtomicBitVector::atomic_get</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a bit from the vector.</para>
<para>This forwards to the get operation with a stronger memory model and is safe for use in concurrent regions of code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The masked value of the word containing the bit. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="131" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1acfc0f928fbf09c9a33ec3bf472e19e72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Word</type>
        <definition>Word nw::graph::AtomicBitVector&lt; Word &gt;::atomic_set</definition>
        <argsstring>(std::size_t i)</argsstring>
        <name>atomic_set</name>
        <qualifiedname>nw::graph::AtomicBitVector::atomic_set</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a bit in the vector.</para>
<para>This forward to the set operation with a stronger memory model and is safe to use in concurrent regions of code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The masked value of the word containing the bit prior to the set operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="142" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1a34261679626a81c24c6e57f95f1bfd47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnw_1_1graph_1_1_atomic_bit_vector_1_1non__zero__iterator" kindref="compound">non_zero_iterator</ref></type>
        <definition>non_zero_iterator nw::graph::AtomicBitVector&lt; Word &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>nw::graph::AtomicBitVector::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="207" column="21" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="207" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1a9c1c2f1300d994042e223e8ad1d5e410" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnw_1_1graph_1_1_atomic_bit_vector_1_1non__zero__iterator" kindref="compound">non_zero_iterator</ref></type>
        <definition>non_zero_iterator nw::graph::AtomicBitVector&lt; Word &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>nw::graph::AtomicBitVector::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="208" column="21" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1aa759a128c05719222407338ff8d146bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnw_1_1graph_1_1_atomic_bit_vector_1_1non__zero__range" kindref="compound">non_zero_range</ref></type>
        <definition>non_zero_range nw::graph::AtomicBitVector&lt; Word &gt;::non_zeros</definition>
        <argsstring>(std::size_t cutoff)</argsstring>
        <name>non_zeros</name>
        <qualifiedname>nw::graph::AtomicBitVector::non_zeros</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>cutoff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="238" column="18" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="238" bodyend="238"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1aa5278615c454d75fda980713df8e4a36" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::tuple&lt; std::size_t, Word &gt;</type>
        <definition>static constexpr std::tuple&lt; std::size_t, Word &gt; nw::graph::AtomicBitVector&lt; Word &gt;::split</definition>
        <argsstring>(std::size_t i)</argsstring>
        <name>split</name>
        <qualifiedname>nw::graph::AtomicBitVector::split</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="241" column="31" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="241" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classnw_1_1graph_1_1_atomic_bit_vector_1a8d3cc1c956efdb9fc6563c47b319faf5" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::size_t</type>
        <definition>static constexpr std::size_t nw::graph::AtomicBitVector&lt; Word &gt;::words</definition>
        <argsstring>(std::size_t n)</argsstring>
        <name>words</name>
        <qualifiedname>nw::graph::AtomicBitVector::words</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="248" column="32" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="248" bodyend="248"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Really basic concurrent bit vector for use as a bitmap.</para>
<para>This bitmap supports a simple get/set API, where set operations are always implemented using acquire/release, while get operations can either be acquire or relaxed. Though simple to provide, resetting, clearing, and resizing are not supported as those operations are not currently needed in BGL17.</para>
<para>Ideally this data structure or something equivalent would be provided by the standard library in the future. </para>
    </detaileddescription>
    <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" line="41" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/AtomicBitVector.hpp" bodystart="41" bodyend="249"/>
    <listofallmembers>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1adaf44e7fbc7185570e495d8d34d28248" prot="public" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>atomic_get</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1acfc0f928fbf09c9a33ec3bf472e19e72" prot="public" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>atomic_set</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1ac00d79ade20bf2e720aa4b1ac5f66b99" prot="public" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>AtomicBitVector</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1afdfbf00b7d121f7d462c161f71e2f69d" prot="public" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>AtomicBitVector</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1a34261679626a81c24c6e57f95f1bfd47" prot="public" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>begin</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1ad0b2b29d95ce7a34ca5dadad0b9fe7b4" prot="private" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>BITS</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1a993436ecf8146c7f46ae745d5d8ac185" prot="private" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>bits_</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1ae6f2f9f688910e6ec842382398b67163" prot="public" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>clear</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1ac6fa94acc1570c751b5416398849a36a" prot="private" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>data_</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1a9c1c2f1300d994042e223e8ad1d5e410" prot="public" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>end</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1a23bc0b796e66d42abbab4aa60dad5a2d" prot="public" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>get</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1aa759a128c05719222407338ff8d146bc" prot="public" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>non_zeros</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1af178276b4a0b8c3581853caaa3a357be" prot="public" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>operator=</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1a59e4df43dca8844ca3c6969f294ce24d" prot="public" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>set</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1aa5278615c454d75fda980713df8e4a36" prot="private" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>split</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1a8d3cc1c956efdb9fc6563c47b319faf5" prot="private" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>words</name></member>
      <member refid="classnw_1_1graph_1_1_atomic_bit_vector_1a6b078731ae92a19ec7389b4b08839aa0" prot="public" virt="non-virtual"><scope>nw::graph::AtomicBitVector</scope><name>~AtomicBitVector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
