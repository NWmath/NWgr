<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="adjacency_8hpp" kind="file" language="C++">
    <compoundname>adjacency.hpp</compoundname>
    <includes refid="compressed_8hpp" local="yes">nwgraph/containers/compressed.hpp</includes>
    <includes refid="edge__list_8hpp" local="yes">nwgraph/edge_list.hpp</includes>
    <includes refid="graph__base_8hpp" local="yes">nwgraph/graph_base.hpp</includes>
    <includes refid="graph__concepts_8hpp" local="yes">nwgraph/graph_concepts.hpp</includes>
    <includes refid="defaults_8hpp" local="yes">nwgraph/util/defaults.hpp</includes>
    <includes refid="build_8hpp" local="yes">nwgraph/build.hpp</includes>
    <includes local="no">concepts</includes>
    <includedby refid="csc_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/csc.hpp</includedby>
    <includedby refid="csr_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/csr.hpp</includedby>
    <includedby refid="mmio_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>nwgraph/adaptors/splittable_range_adapter.hpp</label>
        <link refid="splittable__range__adapter_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp</label>
        <link refid="adjacency_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>nwgraph/build.hpp</label>
        <link refid="build_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nwgraph/containers/compressed.hpp</label>
        <link refid="compressed_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>nwgraph/containers/soa.hpp</label>
        <link refid="soa_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>nwgraph/containers/zip.hpp</label>
        <link refid="zip_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>nwgraph/edge_list.hpp</label>
        <link refid="edge__list_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>nwgraph/graph_base.hpp</label>
        <link refid="graph__base_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>nwgraph/graph_concepts.hpp</label>
        <link refid="graph__concepts_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>nwgraph/graph_traits.hpp</label>
        <link refid="graph__traits_8hpp_source"/>
      </node>
      <node id="19">
        <label>nwgraph/util/arrow_proxy.hpp</label>
        <link refid="arrow__proxy_8hpp_source"/>
      </node>
      <node id="32">
        <label>nwgraph/util/defaults.hpp</label>
        <link refid="defaults_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>nwgraph/util/demangle.hpp</label>
        <link refid="demangle_8hpp_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>nwgraph/util/print_types.hpp</label>
        <link refid="print__types_8hpp_source"/>
      </node>
      <node id="34">
        <label>nwgraph/util/proxysort.hpp</label>
        <link refid="proxysort_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>nwgraph/util/tag_invoke.hpp</label>
        <link refid="tag__invoke_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>util/timer.hpp</label>
        <link refid="timer_8hpp_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>nwgraph/util/traits.hpp</label>
        <link refid="traits_8hpp_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>nwgraph/util/tuple_hack.hpp</label>
        <link refid="tuple__hack_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>nwgraph/util/util.hpp</label>
        <link refid="util_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>algorithm</label>
      </node>
      <node id="31">
        <label>array</label>
      </node>
      <node id="23">
        <label>atomic</label>
      </node>
      <node id="8">
        <label>cassert</label>
      </node>
      <node id="45">
        <label>chrono</label>
      </node>
      <node id="35">
        <label>concepts</label>
      </node>
      <node id="4">
        <label>cstddef</label>
      </node>
      <node id="33">
        <label>cstdint</label>
      </node>
      <node id="36">
        <label>cxxabi.h</label>
      </node>
      <node id="28">
        <label>execution</label>
      </node>
      <node id="9">
        <label>fstream</label>
      </node>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="11">
        <label>initializer_list</label>
      </node>
      <node id="12">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>istream</label>
      </node>
      <node id="14">
        <label>iterator</label>
      </node>
      <node id="46">
        <label>limits</label>
      </node>
      <node id="48">
        <label>map</label>
      </node>
      <node id="24">
        <label>numeric</label>
      </node>
      <node id="5">
        <label>oneapi/tbb.h</label>
      </node>
      <node id="15">
        <label>ostream</label>
      </node>
      <node id="6">
        <label>ranges</label>
      </node>
      <node id="38">
        <label>string</label>
      </node>
      <node id="27">
        <label>tbb/blocked_range.h</label>
      </node>
      <node id="43">
        <label>tbb/parallel_sort.h</label>
      </node>
      <node id="16">
        <label>tuple</label>
      </node>
      <node id="25">
        <label>type_traits</label>
      </node>
      <node id="17">
        <label>utility</label>
      </node>
      <node id="18">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp</label>
        <link refid="adjacency_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/csc.hpp</label>
        <link refid="csc_8hpp_source"/>
      </node>
      <node id="3">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/csr.hpp</label>
        <link refid="csr_8hpp_source"/>
      </node>
      <node id="4">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp</label>
        <link refid="mmio_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classnw_1_1graph_1_1index__adjacency" prot="public">nw::graph::index_adjacency</innerclass>
    <innerclass refid="classnw_1_1graph_1_1index__biadjacency" prot="public">nw::graph::index_biadjacency</innerclass>
    <innernamespace refid="namespacenw">nw</innernamespace>
    <innernamespace refid="namespacenw_1_1graph">nw::graph</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NW<sp/>Graph<sp/>(aka<sp/>GraphPack)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(c)<sp/>Pacific<sp/>Northwest<sp/>National<sp/>Laboratory<sp/>2018-2021<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(c)<sp/>University<sp/>of<sp/>Washington<sp/>2018-2021<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>terms<sp/>of<sp/>include<sp/>LICENSE<sp/>file<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Authors:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Andrew<sp/>Lumsdaine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Xu<sp/>Tony<sp/>Liu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NW_GRAPH_ADJACENCY_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NW_GRAPH_ADJACENCY_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/containers/compressed.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/edge_list.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/graph_base.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/graph_concepts.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/util/defaults.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/build.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;concepts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/graph_concepts.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nw<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">graph<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::unsigned_integral<sp/>index_type,<sp/>std::unsigned_integral<sp/>vertex_id_type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">index_compressed<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>unipartite_graph_base,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>indexed_struct_of_arrays&lt;index_type,<sp/>vertex_id_type,<sp/>Attributes...&gt;<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>base<sp/>=<sp/>indexed_struct_of_arrays&lt;index_type,<sp/>vertex_id_type,<sp/>Attributes...&gt;;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>index_t<sp/>=<sp/>index_type;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vertex_id_type<sp/>=<sp/>vertex_id_type;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>index_compressed(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N)<sp/>:<sp/>unipartite_graph_base(N),<sp/>base(N)<sp/>{}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>close_for_push_back()<sp/>{<sp/>base::close_for_push_back();<sp/>};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_edges()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::to_be_indexed_.size();<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>compressed<sp/>=<sp/>index_compressed&lt;default_index_t,<sp/>default_vertex_id_type,<sp/>Attributes...&gt;;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/>std::unsigned_integral<sp/>index_type,<sp/>std::unsigned_integral<sp/>vertex_id,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="54" refid="classnw_1_1graph_1_1index__adjacency" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">indexed_struct_of_arrays</ref>&lt;index_type,<sp/>vertex_id,<sp/>Attributes...&gt;<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref><sp/>=<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">indexed_struct_of_arrays</ref>&lt;index_type,<sp/>vertex_id,<sp/>Attributes...&gt;;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>index_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>index_type;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vertex_id_type<sp/><sp/><sp/><sp/>=<sp/>vertex_id;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>num_vertices_type<sp/>=<sp/>std::array&lt;vertex_id_type,<sp/>1&gt;;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>num_edges_type<sp/><sp/><sp/><sp/>=<sp/>index_t;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>index_t<sp/>isn&apos;t<sp/>considered<sp/>an<sp/>attribute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>attributes_t<sp/>=<sp/>std::tuple&lt;Attributes...&gt;;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::size_t<sp/>getNAttr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Attributes);<sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>M<sp/>=<sp/>0)<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::is_same&lt;unipartite_graph_base,<sp/>unipartite_graph_base&gt;::value)<sp/>:<sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>(N),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(N,<sp/>M)<sp/>{}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>(std::array&lt;size_t,<sp/>1&gt;<sp/>N,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>M<sp/>=<sp/>0)<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::is_same&lt;unipartite_graph_base,<sp/>unipartite_graph_base&gt;::value)<sp/>:<sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>(N),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(N[0],<sp/>M)<sp/>{}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>std::execution::parallel_unsequenced_policy&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>(<ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">index_edge_list&lt;vertex_id_type, unipartite_graph_base, directedness::directed, Attributes...&gt;</ref>&amp;<sp/>A,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sort_adjacency<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecutionPolicy&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>(A.num_vertices()[0]),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(A.num_vertices()[0]<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>fill&lt;idx&gt;(A,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>sort_adjacency,<sp/>policy);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>std::execution::parallel_unsequenced_policy&gt;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>(<ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">index_edge_list&lt;vertex_id_type, unipartite_graph_base, directedness::undirected, Attributes...&gt;</ref>&amp;<sp/>A,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sort_adjacency<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecutionPolicy&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>(A.num_vertices()[0]),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(A.num_vertices()[0]<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>fill&lt;idx&gt;(A,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>sort_adjacency,<sp/>policy);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>std::execution::parallel_unsequenced_policy&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">index_edge_list</ref>&lt;vertex_id_type,<sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directedness::directed,<sp/>Attributes...&gt;&amp;<sp/>A,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sort_adjacency<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>(N),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(N)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>fill&lt;idx&gt;(A,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>sort_adjacency,<sp/>policy);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>std::execution::parallel_unsequenced_policy&gt;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">index_edge_list</ref>&lt;vertex_id_type,<sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directedness::undirected,<sp/>Attributes...&gt;&amp;<sp/>A,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sort_adjacency<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>(N),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(N)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>fill&lt;idx&gt;(A,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>sort_adjacency,<sp/>policy);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>customized<sp/>move<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>(std::vector&lt;vertex_id&gt;&amp;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;vertex_id&gt;&amp;&amp;<sp/>first_to_be,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Attributes&gt;&amp;&amp;...<sp/>rest_to_be)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>(indices.size()<sp/>-<sp/>1),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(std::move(indices),<sp/>std::move(first_to_be),<sp/>std::move(rest_to_be)...)<sp/>{}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>(std::vector&lt;vertex_id&gt;&amp;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;std::vector&lt;vertex_id&gt;,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Attributes&gt;...&gt;&amp;&amp;<sp/>to_be_indexed)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>(indices.size()<sp/>-<sp/>1),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(std::move(indices),<sp/>std::move(to_be_indexed))<sp/>{}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>customized<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;vertex_id&gt;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;vertex_id&gt;&amp;<sp/>first_to_be,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Attributes&gt;&amp;...<sp/>rest_to_be)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>(indices.size()<sp/>-<sp/>1),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(indices,<sp/>first_to_be,<sp/>rest_to_be...)<sp/>{}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;vertex_id&gt;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;std::vector&lt;vertex_id&gt;,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Attributes&gt;...&gt;&amp;<sp/>to_be_indexed)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>(indices.size()<sp/>-<sp/>1),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(indices,<sp/>to_be_indexed)<sp/>{}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>num_vertices_type<sp/>num_vertices()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{base::size()};<sp/>};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>num_edges_type<sp/><sp/><sp/><sp/>num_edges()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::to_be_indexed_.size();<sp/>};</highlight></codeline>
<codeline lineno="125"><highlight class="normal">};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">adjacency</ref><sp/>=<sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>&lt;idx,<sp/>default_index_t,<sp/>default_vertex_id_type,<sp/>Attributes...&gt;;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_adjacency(edge_list_t&amp;<sp/>el)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">adjacency&lt;idx&gt;</ref>(el);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_c<sp/>edge_list_t,<sp/>std::</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral<sp/>u_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>std::execution::parallel_unsequenced_policy&gt;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_adjacency(edge_list_t&amp;<sp/>el,<sp/>u_integral<sp/>n,<sp/>directedness<sp/>edge_directedness<sp/>=<sp/>directedness::directed,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>adjacency&lt;idx&gt;<sp/>adj(n);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>fill&lt;idx&gt;(el,<sp/>adj,<sp/>edge_directedness,<sp/>policy);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>adj;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/>std::unsigned_integral<sp/>index_type,<sp/>std::unsigned_integral<sp/>vertex_id,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="144" refid="classnw_1_1graph_1_1index__biadjacency" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classnw_1_1graph_1_1bipartite__graph__base" kindref="compound">bipartite_graph_base</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">indexed_struct_of_arrays</ref>&lt;index_type,<sp/>vertex_id,<sp/>Attributes...&gt;<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref><sp/>=<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">indexed_struct_of_arrays</ref>&lt;index_type,<sp/>vertex_id,<sp/>Attributes...&gt;;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>index_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>index_type;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vertex_id_type<sp/><sp/><sp/><sp/>=<sp/>vertex_id;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>num_vertices_type<sp/>=<sp/>std::array&lt;vertex_id_type,<sp/>1&gt;;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>num_edges_type<sp/><sp/><sp/><sp/>=<sp/>index_t;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>index_t<sp/>isn&apos;t<sp/>considered<sp/>an<sp/>attribute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>attributes_t<sp/>=<sp/>std::tuple&lt;Attributes...&gt;;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::size_t<sp/>getNAttr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Attributes);<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N0<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N1<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>M<sp/>=<sp/>0)<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::is_same&lt;bipartite_graph_base,<sp/>bipartite_graph_base&gt;::value)<sp/>:<sp/><ref refid="classnw_1_1graph_1_1bipartite__graph__base" kindref="compound">bipartite_graph_base</ref>(N0,<sp/>N1),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(N0,<sp/>M)<sp/>{}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>(std::array&lt;size_t,<sp/>2&gt;<sp/>N,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>M<sp/>=<sp/>0)<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::is_same&lt;bipartite_graph_base,<sp/>bipartite_graph_base&gt;::value)<sp/>:<sp/><ref refid="classnw_1_1graph_1_1bipartite__graph__base" kindref="compound">bipartite_graph_base</ref>(N[idx],<sp/>N[(idx<sp/>+<sp/>1)<sp/>%<sp/>2]),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(N[idx],<sp/>M)<sp/>{}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>std::execution::parallel_unsequenced_policy&gt;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>(<ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">index_edge_list</ref>&lt;vertex_id_type,<sp/><ref refid="classnw_1_1graph_1_1bipartite__graph__base" kindref="compound">bipartite_graph_base</ref>,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directedness::directed,<sp/>Attributes...&gt;&amp;<sp/>A,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sort_biadjacency<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1bipartite__graph__base" kindref="compound">bipartite_graph_base</ref>(A.num_vertices()[idx],</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.num_vertices()[(idx<sp/>+<sp/>1)<sp/>%<sp/>2]),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(A.num_vertices()[idx]<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_biadjacency&lt;idx&gt;(A,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>sort_biadjacency,<sp/>policy);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>std::execution::parallel_unsequenced_policy&gt;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>(<ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">index_edge_list</ref>&lt;vertex_id_type,<sp/><ref refid="classnw_1_1graph_1_1bipartite__graph__base" kindref="compound">bipartite_graph_base</ref>,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directedness::undirected,<sp/>Attributes...&gt;&amp;<sp/>A,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sort_biadjacency<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1bipartite__graph__base" kindref="compound">bipartite_graph_base</ref>(A.num_vertices()[idx],</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.num_vertices()[(idx<sp/>+<sp/>1)<sp/>%<sp/>2]),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(A.num_vertices()[idx]<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_biadjacency&lt;idx&gt;(A,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>sort_biadjacency,<sp/>policy);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>customized<sp/>move<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N1,<sp/>std::vector&lt;vertex_id&gt;&amp;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;vertex_id&gt;&amp;&amp;<sp/>first_to_be,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Attributes&gt;&amp;&amp;...<sp/>rest_to_be)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1bipartite__graph__base" kindref="compound">bipartite_graph_base</ref>(indices.size()<sp/>-<sp/>1,<sp/>N1),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(std::move(indices),<sp/>std::move(first_to_be),<sp/>std::move(rest_to_be)...)<sp/>{}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N1,<sp/>std::vector&lt;vertex_id&gt;&amp;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;std::vector&lt;vertex_id&gt;,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Attributes&gt;...&gt;&amp;&amp;<sp/>to_be_indexed)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1bipartite__graph__base" kindref="compound">bipartite_graph_base</ref>(indices.size()<sp/>-<sp/>1,<sp/>N1),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(std::move(indices),<sp/>std::move(to_be_indexed))<sp/>{}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>customized<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;vertex_id&gt;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;vertex_id&gt;&amp;<sp/>first_to_be,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Attributes&gt;&amp;...<sp/>rest_to_be)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1bipartite__graph__base" kindref="compound">bipartite_graph_base</ref>(indices.size()<sp/>-<sp/>1,<sp/>N1),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(indices,<sp/>first_to_be,<sp/>rest_to_be...)<sp/>{}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;vertex_id&gt;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;std::vector&lt;vertex_id&gt;,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Attributes&gt;...&gt;&amp;<sp/>to_be_indexed)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classnw_1_1graph_1_1bipartite__graph__base" kindref="compound">bipartite_graph_base</ref>(indices.size()<sp/>-<sp/>1,<sp/>N1),<sp/><ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">base</ref>(indices,<sp/>to_be_indexed)<sp/>{}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_vertices()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vertex_cardinality;<sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>num_edges_type<sp/><sp/><sp/><sp/>num_edges()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::to_be_indexed_.size();<sp/>};</highlight></codeline>
<codeline lineno="202"><highlight class="normal">};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">biadjacency</ref><sp/>=<sp/><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>&lt;idx,<sp/>default_index_t,<sp/>default_vertex_id_type,<sp/>Attributes...&gt;;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t&gt;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_biadjacency(edge_list_t&amp;<sp/>el)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">biadjacency&lt;idx&gt;</ref>(el);</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_c<sp/>edge_list_t,<sp/>std::</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral<sp/>u_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>std::execution::parallel_unsequenced_policy&gt;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_biadjacency(edge_list_t&amp;<sp/>el,<sp/>u_integral<sp/>n0,<sp/>u_integral<sp/>n1,<sp/>directedness<sp/>edge_directedness<sp/>=<sp/>directedness::directed,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>biadjacency&lt;idx&gt;<sp/>adj(n0,<sp/>n1);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>fill_biadjacency&lt;idx&gt;(el,<sp/>adj,<sp/>policy);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>adj;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>&lt;int<sp/>idx,<sp/>std::unsigned_integral<sp/>index_type,<sp/>std::unsigned_integral<sp/>vertex_id_type,<sp/>typename...<sp/>Attributes&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//auto<sp/>num_vertices(const<sp/>index_adjacency&lt;idx,<sp/>index_type,<sp/>vertex_id_type,<sp/>Attributes...&gt;&amp;<sp/>g)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>g.num_vertices();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//index_adjacency<sp/>num_vertices<sp/>CPO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/>std::unsigned_integral<sp/>index_type,<sp/>std::unsigned_integral<sp/>vertex_id_type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_invoke(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>num_vertices_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_adjacency&lt;idx,<sp/>index_type,<sp/>vertex_id_type,<sp/>Attributes...&gt;&amp;<sp/>g)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g.num_vertices()[0];</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//index_adjacency<sp/>degree<sp/>CPO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/>std::unsigned_integral<sp/>index_type,<sp/>std::unsigned_integral<sp/>vertex_id_type,<sp/>std::unsigned_integral<sp/>lookup_type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_invoke(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>degree_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_adjacency&lt;idx,<sp/>index_type,<sp/>vertex_id_type,<sp/>Attributes...&gt;&amp;<sp/>g,<sp/>lookup_type<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g[i].size();</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//index_adjacency<sp/>degree<sp/>CPO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/>std::unsigned_integral<sp/>index_type,<sp/>std::unsigned_integral<sp/>vertex_id_type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_invoke(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>degree_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_adjacency&lt;idx,<sp/>index_type,<sp/>vertex_id_type,<sp/>Attributes...&gt;&amp;<sp/>g,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>index_adjacency&lt;idx,<sp/>index_type,<sp/>vertex_id_type,<sp/>Attributes...&gt;::sub_view&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.size();</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//index_biadjacency<sp/>num_vertices<sp/>CPO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/>std::unsigned_integral<sp/>index_type,<sp/>std::unsigned_integral<sp/>vertex_id_type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_invoke(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>num_vertices_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_biadjacency&lt;idx,<sp/>index_type,<sp/>vertex_id_type,<sp/>Attributes...&gt;&amp;<sp/>g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jdx<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g.num_vertices()[jdx];</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//index_biadjacency<sp/>degree<sp/>CPO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/>std::unsigned_integral<sp/>index_type,<sp/>std::unsigned_integral<sp/>vertex_id_type,<sp/>std::unsigned_integral<sp/>lookup_type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_invoke(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>degree_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_biadjacency&lt;idx,<sp/>index_type,<sp/>vertex_id_type,<sp/>Attributes...&gt;&amp;<sp/>g,<sp/>lookup_type<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g[i].size();</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//index_biadjacency<sp/>degree<sp/>CPO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/>std::unsigned_integral<sp/>index_type,<sp/>std::unsigned_integral<sp/>vertex_id_type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_invoke(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>degree_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_biadjacency&lt;idx,<sp/>index_type,<sp/>vertex_id_type,<sp/>Attributes...&gt;&amp;<sp/>g,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>index_biadjacency&lt;idx,<sp/>index_type,<sp/>vertex_id_type,<sp/>Attributes...&gt;::sub_view&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.size();</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//degree<sp/>CPO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_invoke(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>degree_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>splittable_range_adapter&lt;Iterator&gt;&amp;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n.size();</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NW_GRAPH_ADJACENCY_HPP</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp"/>
  </compounddef>
</doxygen>
