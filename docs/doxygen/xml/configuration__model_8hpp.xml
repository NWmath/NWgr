<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="configuration__model_8hpp" kind="file" language="C++">
    <compoundname>configuration_model.hpp</compoundname>
    <includes refid="edge__list_8hpp" local="no">edge_list.hpp</includes>
    <includes local="no">execution</includes>
    <includes local="no">vector</includes>
    <includes local="no">random</includes>
    <includes local="no">math.h</includes>
    <incdepgraph>
      <node id="3">
        <label>nwgraph/containers/soa.hpp</label>
        <link refid="soa_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>edge_list.hpp</label>
        <link refid="edge__list_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/generators/configuration_model.hpp</label>
        <link refid="configuration__model_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>nwgraph/graph_base.hpp</label>
        <link refid="graph__base_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>nwgraph/graph_concepts.hpp</label>
        <link refid="graph__concepts_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>nwgraph/graph_traits.hpp</label>
        <link refid="graph__traits_8hpp_source"/>
      </node>
      <node id="15">
        <label>nwgraph/util/arrow_proxy.hpp</label>
        <link refid="arrow__proxy_8hpp_source"/>
      </node>
      <node id="35">
        <label>nwgraph/util/defaults.hpp</label>
        <link refid="defaults_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>nwgraph/util/demangle.hpp</label>
        <link refid="demangle_8hpp_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>nwgraph/util/print_types.hpp</label>
        <link refid="print__types_8hpp_source"/>
      </node>
      <node id="33">
        <label>nwgraph/util/tag_invoke.hpp</label>
        <link refid="tag__invoke_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>util/timer.hpp</label>
        <link refid="timer_8hpp_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>nwgraph/util/traits.hpp</label>
        <link refid="traits_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>nwgraph/util/tuple_hack.hpp</label>
        <link refid="tuple__hack_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>nwgraph/util/util.hpp</label>
        <link refid="util_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>algorithm</label>
      </node>
      <node id="28">
        <label>array</label>
      </node>
      <node id="19">
        <label>atomic</label>
      </node>
      <node id="4">
        <label>cassert</label>
      </node>
      <node id="41">
        <label>chrono</label>
      </node>
      <node id="30">
        <label>concepts</label>
      </node>
      <node id="20">
        <label>cstddef</label>
      </node>
      <node id="36">
        <label>cstdint</label>
      </node>
      <node id="38">
        <label>cxxabi.h</label>
      </node>
      <node id="25">
        <label>execution</label>
      </node>
      <node id="5">
        <label>fstream</label>
      </node>
      <node id="6">
        <label>functional</label>
      </node>
      <node id="7">
        <label>initializer_list</label>
      </node>
      <node id="8">
        <label>iostream</label>
      </node>
      <node id="9">
        <label>istream</label>
      </node>
      <node id="10">
        <label>iterator</label>
      </node>
      <node id="42">
        <label>limits</label>
      </node>
      <node id="44">
        <label>math.h</label>
      </node>
      <node id="21">
        <label>numeric</label>
      </node>
      <node id="11">
        <label>ostream</label>
      </node>
      <node id="43">
        <label>random</label>
      </node>
      <node id="31">
        <label>ranges</label>
      </node>
      <node id="39">
        <label>string</label>
      </node>
      <node id="24">
        <label>tbb/blocked_range.h</label>
      </node>
      <node id="34">
        <label>tbb/parallel_sort.h</label>
      </node>
      <node id="12">
        <label>tuple</label>
      </node>
      <node id="22">
        <label>type_traits</label>
      </node>
      <node id="13">
        <label>utility</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacenw">nw</innernamespace>
    <innernamespace refid="namespacenw_1_1hypergraph">nw::hypergraph</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NWHypergraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(c)<sp/>Pacific<sp/>Northwest<sp/>National<sp/>Laboratory<sp/>2021-2021</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>Creative<sp/>Commons<sp/>Attribution-NonCommercial-ShareAlike<sp/>4.0<sp/>International<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://creativecommons.org/licenses/by-nc-sa/4.0/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>Xu<sp/>Tony<sp/>Liu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;edge_list.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;execution&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nw<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hypergraph<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="comment">*<sp/>dist_min<sp/>-<sp/>Minimum<sp/>value<sp/>of<sp/>distribution.<sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment">*<sp/>dist_max<sp/>-<sp/>Maximum<sp/>value<sp/>of<sp/>distribution.</highlight></codeline>
<codeline lineno="24"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">std::size_t<sp/>power_gen<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist_min,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist_max)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Inverse<sp/>square.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>exponent<sp/>=<sp/>-2;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_pow<sp/>=<sp/>pow<sp/>(dist_min,<sp/>exponent<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_pow<sp/>=<sp/>pow<sp/>(dist_max,<sp/>exponent<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::size_t)<sp/>pow((max_pow<sp/>-<sp/>min_pow)<sp/>*<sp/>drand48<sp/>()</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>min_pow,<sp/>1<sp/>/<sp/>(exponent<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>standard_exponential_unlikely(bitgen_t<sp/>*bitgen_state,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>idx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Switch<sp/>to<sp/>1.0<sp/>-<sp/>U<sp/>to<sp/>avoid<sp/>log(0.0),<sp/>see<sp/>GH<sp/>13361<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ziggurat_exp_r<sp/>-<sp/>log(1.0<sp/>-<sp/>next_double(bitgen_state));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fe_double[idx<sp/>-<sp/>1]<sp/>-<sp/>fe_double[idx])<sp/>*<sp/>next_double(bitgen_state)<sp/>+</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fe_double[idx]<sp/>&lt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp(-x))<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>random_standard_exponential(bitgen_state);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>random_standard_exponential(bitgen_t<sp/>*bitgen_state)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>uint64_t<sp/>ri;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>uint8_t<sp/>idx;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>ri<sp/>=<sp/>next_uint64(bitgen_state);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>ri<sp/>&gt;&gt;=<sp/>3;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>idx<sp/>=<sp/>ri<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>ri<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>ri<sp/>*<sp/>we_double[idx];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ri<sp/>&lt;<sp/>ke_double[idx])<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/></highlight><highlight class="comment">/*<sp/>98.9%<sp/>of<sp/>the<sp/>time<sp/>we<sp/>return<sp/>here<sp/>1st<sp/>try<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>standard_exponential_unlikely(bitgen_state,<sp/>idx,<sp/>x);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>random_power(bitgen_t<sp/>*bitgen_state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pow(1<sp/>-<sp/>exp(-random_standard_exponential(bitgen_state)),<sp/>1.<sp/>/<sp/>a);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">std::vector&lt;std::size_t&gt;<sp/>power_law_gen(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>std::size_t<sp/>samples)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="69"><highlight class="comment">*<sp/>Return<sp/>a<sp/>random<sp/>undirected<sp/>bipartite<sp/>graph<sp/>(in<sp/>edge_list)<sp/>from<sp/>two<sp/>given<sp/>degree<sp/>sequences.</highlight></codeline>
<codeline lineno="70"><highlight class="comment">*<sp/>The<sp/>bipartite<sp/>graph<sp/>is<sp/>composed<sp/>of<sp/>two<sp/>partitions.<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="comment">*<sp/>By<sp/>default,<sp/>contiguous_id_space<sp/>is<sp/>false,<sp/>set<sp/>A<sp/>has<sp/>nodes<sp/>0<sp/>to</highlight></codeline>
<codeline lineno="72"><highlight class="comment">*<sp/>(deg_seqa.size()<sp/>-<sp/>1)<sp/>and<sp/>set<sp/>B<sp/>has<sp/>nodes<sp/>0<sp/>to<sp/>(deg_seqb.size()<sp/>-<sp/>1).</highlight></codeline>
<codeline lineno="73"><highlight class="comment">*<sp/>When<sp/>contiguous_id_space<sp/>is<sp/>true,<sp/>set<sp/>A<sp/>has<sp/>nodes<sp/>0<sp/>to<sp/>(deg_seqa.size()<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="74"><highlight class="comment">*<sp/>and<sp/>set<sp/>B<sp/>has<sp/>nodes<sp/>deg_seqa.size()<sp/>to<sp/>(deg_seqa.size()<sp/>+<sp/>deg_seqb.size()<sp/>-<sp/>1).</highlight></codeline>
<codeline lineno="75"><highlight class="comment">*<sp/>Nodes<sp/>from<sp/>set<sp/>A<sp/>are<sp/>connected<sp/>to<sp/>nodes<sp/>in<sp/>set<sp/>B<sp/>by<sp/>choosing</highlight></codeline>
<codeline lineno="76"><highlight class="comment">*<sp/>randomly<sp/>from<sp/>the<sp/>possible<sp/>free<sp/>stubs,<sp/>one<sp/>in<sp/>A<sp/>and<sp/>one<sp/>in<sp/>B.</highlight></codeline>
<codeline lineno="77"><highlight class="comment">*<sp/>Note<sp/>directed<sp/>graph<sp/>is<sp/>not<sp/>supported<sp/>in<sp/>configuration<sp/>model.</highlight></codeline>
<codeline lineno="78"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">nw::graph::edge_list&lt;nw::graph::undirected&gt;</ref><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal">configuration_model(std::vector&lt;T&gt;&amp;<sp/>deg_seqa,<sp/>std::vector&lt;T&gt;&amp;<sp/>deg_seqb,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>contiguous_id_space<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//validate<sp/>degree<sp/>sequences<sp/>such<sp/>that<sp/>their<sp/>summation<sp/>are<sp/>equivalent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">nw::graph::edge_list&lt;nw::graph::undirected&gt;</ref><sp/>el;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>suma<sp/>=<sp/>std::reduce(std::execution::par_unseq,<sp/>deg_seqa.cbegin(),<sp/>deg_seqa.cend());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>sumb<sp/>=<sp/>std::reduce(std::execution::par_unseq,<sp/>deg_seqb.cbegin(),<sp/>deg_seqb.cend());</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(suma<sp/>!=<sp/>sumb)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>degree<sp/>sequences,<sp/>sum(deg_seqa)!=sum(deg_seqb)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>el;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>populate_stubs<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>degree_sequence)<sp/>-&gt;<sp/>std::vector&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>stubs(suma);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>cursor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>v<sp/>=<sp/>0,<sp/>e<sp/>=<sp/>degree_sequence.size();<sp/>v<sp/>&lt;<sp/>e;<sp/>++v)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>degree_v<sp/>=<sp/>degree_sequence[v];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>stubs.begin()<sp/>+<sp/>cursor;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cursor<sp/>+=<sp/>degree_v;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>begin<sp/>+<sp/>cursor;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(std::execution::par_unseq,<sp/>begin,<sp/>end,<sp/>v);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stubs;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>astubs<sp/>=<sp/>populate_stubs(deg_seqa);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bstubs<sp/>=<sp/>populate_stubs(deg_seqb);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>std::mt19937<sp/>g(rd());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shuffle(astubs.begin(),<sp/>astubs.end(),<sp/>g);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shuffle(bstubs.begin(),<sp/>bstubs.end(),<sp/>g);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(astubs.begin(),<sp/>astubs.end(),<sp/>std::ostream_iterator&lt;int&gt;(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>el.open_for_push_back();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0,<sp/>e<sp/>=<sp/>astubs.size();<sp/>i<sp/>&lt;<sp/>e;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>el.push_back(astubs[i],<sp/>bstubs[i]);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>el.close_for_push_back();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>el;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>hypergraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>nw</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/lums/NWmath/NWgr/include/nwgraph/generators/configuration_model.hpp"/>
  </compounddef>
</doxygen>
