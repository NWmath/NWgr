<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="build_8hpp" kind="file" language="C++">
    <compoundname>build.hpp</compoundname>
    <includes refid="print__types_8hpp" local="yes">util/print_types.hpp</includes>
    <includes refid="proxysort_8hpp" local="yes">nwgraph/util/proxysort.hpp</includes>
    <includes refid="graph__base_8hpp" local="yes">nwgraph/graph_base.hpp</includes>
    <includes refid="graph__traits_8hpp" local="yes">nwgraph/graph_traits.hpp</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">atomic</includes>
    <includes local="no">cassert</includes>
    <includes local="no">execution</includes>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="no">map</includes>
    <includes refid="graph__concepts_8hpp" local="yes">graph_concepts.hpp</includes>
    <includes refid="zip_8hpp" local="yes">nwgraph/containers/zip.hpp</includes>
    <includedby refid="adjacency_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp</includedby>
    <includedby refid="vofos_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/vofos.hpp</includedby>
    <includedby refid="volos_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/volos.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp</label>
        <link refid="build_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>nwgraph/containers/zip.hpp</label>
        <link refid="zip_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>nwgraph/graph_base.hpp</label>
        <link refid="graph__base_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>graph_concepts.hpp</label>
        <link refid="graph__concepts_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>nwgraph/graph_traits.hpp</label>
        <link refid="graph__traits_8hpp_source"/>
      </node>
      <node id="32">
        <label>nwgraph/util/arrow_proxy.hpp</label>
        <link refid="arrow__proxy_8hpp_source"/>
      </node>
      <node id="2">
        <label>util/print_types.hpp</label>
        <link refid="print__types_8hpp_source"/>
      </node>
      <node id="3">
        <label>nwgraph/util/proxysort.hpp</label>
        <link refid="proxysort_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>nwgraph/util/tag_invoke.hpp</label>
        <link refid="tag__invoke_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>nwgraph/util/traits.hpp</label>
        <link refid="traits_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>nwgraph/util/tuple_hack.hpp</label>
        <link refid="tuple__hack_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>nwgraph/util/util.hpp</label>
        <link refid="util_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="13">
        <label>array</label>
      </node>
      <node id="15">
        <label>atomic</label>
      </node>
      <node id="5">
        <label>cassert</label>
      </node>
      <node id="23">
        <label>concepts</label>
      </node>
      <node id="6">
        <label>cstddef</label>
      </node>
      <node id="7">
        <label>cstdint</label>
      </node>
      <node id="11">
        <label>execution</label>
      </node>
      <node id="28">
        <label>fstream</label>
      </node>
      <node id="8">
        <label>functional</label>
      </node>
      <node id="29">
        <label>initializer_list</label>
      </node>
      <node id="16">
        <label>iostream</label>
      </node>
      <node id="30">
        <label>istream</label>
      </node>
      <node id="24">
        <label>iterator</label>
      </node>
      <node id="21">
        <label>map</label>
      </node>
      <node id="9">
        <label>numeric</label>
      </node>
      <node id="31">
        <label>ostream</label>
      </node>
      <node id="25">
        <label>ranges</label>
      </node>
      <node id="17">
        <label>string</label>
      </node>
      <node id="35">
        <label>tbb/blocked_range.h</label>
      </node>
      <node id="18">
        <label>tuple</label>
      </node>
      <node id="19">
        <label>type_traits</label>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp</label>
        <link refid="adjacency_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp</label>
        <link refid="build_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/csc.hpp</label>
        <link refid="csc_8hpp_source"/>
      </node>
      <node id="4">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/csr.hpp</label>
        <link refid="csr_8hpp_source"/>
      </node>
      <node id="5">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp</label>
        <link refid="mmio_8hpp_source"/>
      </node>
      <node id="6">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/vofos.hpp</label>
        <link refid="vofos_8hpp_source"/>
      </node>
      <node id="7">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/volos.hpp</label>
        <link refid="volos_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacenw">nw</innernamespace>
    <innernamespace refid="namespacenw_1_1graph">nw::graph</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NW<sp/>Graph<sp/>(aka<sp/>GraphPack)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(c)<sp/>Pacific<sp/>Northwest<sp/>National<sp/>Laboratory<sp/>2018-2021<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(c)<sp/>University<sp/>of<sp/>Washington<sp/>2018-2021<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>terms<sp/>of<sp/>include<sp/>LICENSE<sp/>file<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Authors:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Andrew<sp/>Lumsdaine<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Luke<sp/>D&apos;Alessandro<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NW_GRAPH_BUILD_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NW_GRAPH_BUILD_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;util/print_types.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/util/proxysort.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/graph_base.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/graph_traits.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;execution&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;graph_concepts.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/containers/zip.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nw<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">graph<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>default_execution_policy<sp/>=<sp/>std::execution::parallel_unsequenced_policy;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sort_by(edge_list_t&amp;<sp/>el,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>std::sort(std::execution::seq,<sp/>el.begin(),<sp/>el.end(),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>b)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/>return<sp/>(std::get&lt;idx&gt;(a)<sp/>&lt;<sp/>std::get&lt;idx&gt;(b));<sp/>});</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stable_sort_by(edge_list_t&amp;<sp/>el,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>std::stable_sort(policy,<sp/>el.begin(),<sp/>el.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>b)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/>return<sp/>(std::get&lt;idx&gt;(a)<sp/>&lt;<sp/>std::get&lt;idx&gt;(b));<sp/>});</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lexical_sort_by(edge_list_t&amp;<sp/>el,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_same_v&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(el.begin()),<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>edge_list_t::iterator&gt;);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jdx<sp/>=<sp/>(idx<sp/>+<sp/>1)<sp/>%<sp/>2;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idx<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(policy,<sp/>el.begin(),<sp/>el.end());</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(policy,<sp/>el.begin(),<sp/>el.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>b)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::tie(std::get&lt;1&gt;(a),<sp/>std::get&lt;0&gt;(a))<sp/>&lt;<sp/>std::tie(std::get&lt;1&gt;(b),<sp/>std::get&lt;0&gt;(b));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lexical_stable_sort_by(edge_list_t&amp;<sp/>el,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jdx<sp/>=<sp/>(idx<sp/>+<sp/>1)<sp/>%<sp/>2;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>std::stable_sort(policy,<sp/>el.begin(),<sp/>el.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>b)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>std::tie(std::get&lt;idx&gt;(a),<sp/>std::get&lt;jdx&gt;(a))<sp/>&lt;<sp/>std::tie(std::get&lt;idx&gt;(b),<sp/>std::get&lt;jdx&gt;(b));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;adjacency_list_graph<sp/>adjacency_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>push_back_fill_helper(adjacency_t&amp;<sp/>cs,<sp/>std::tuple&lt;Ts...&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>theTuple)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>std::apply([&amp;](Ts<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;...<sp/>args)<sp/>{<sp/>cs.push_back(args...);<sp/>},<sp/>theTuple);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_c<sp/>edge_list_t,<sp/>adjacency_list_graph<sp/>adjacency_t&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_back_fill(edge_list_t&amp;<sp/>el,<sp/>adjacency_t&amp;<sp/>cs)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>cs.open_for_push_back();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>std::for_each(el.begin(),<sp/>el.end(),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>elt)<sp/>{<sp/>push_back_fill_helper(cs,<sp/>elt);<sp/>});</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>cs.close_for_push_back();</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_graph<sp/>EdgeList,<sp/>adjacency_list_graph<sp/>Adjacency&gt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_back_fill(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EdgeList&amp;<sp/>edge_list,<sp/>Adjacency&amp;<sp/>adj,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>directed,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>jdx<sp/>=<sp/>(idx<sp/>+<sp/>1)<sp/>%<sp/>2;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>e<sp/>:<sp/>edge_list)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::apply(</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">...<sp/>properties)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj[std::get&lt;0&gt;(e)].emplace_back(std::get&lt;1&gt;(e),<sp/>properties...);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>props(e));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!directed)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::apply(</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">...<sp/>properties)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj[std::get&lt;1&gt;(e)].emplace_back(std::get&lt;0&gt;(e),<sp/>properties...);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>props(e));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::apply(</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">...<sp/>properties)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj[std::get&lt;1&gt;(e)].emplace_back(std::get&lt;0&gt;(e),<sp/>properties...);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>props(e));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!directed)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::apply(</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">...<sp/>properties)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj[std::get&lt;0&gt;(e)].emplace_back(std::get&lt;1&gt;(e),<sp/>properties...);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>props(e));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_graph<sp/>edge_list_t,<sp/>adjacency_list_graph<sp/>adj_list_t&gt;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fill_adj_list(edge_list_t&amp;<sp/>el,<sp/>adj_list_t&amp;<sp/>al)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_edges<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>al.open_for_push_back();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>std::for_each(el.begin(),<sp/>el.end(),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>elt)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>push_back_fill_helper(al,<sp/>elt);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>++num_edges;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>constexpr<sp/>(edge_list_t::edge_directedness<sp/>==<sp/>directedness::undirected)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(std::get&lt;0&gt;(elt),<sp/>std::get&lt;1&gt;(elt));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>push_back_fill_helper(al,<sp/>elt);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++num_edges;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>al.close_for_push_back();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_edges;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Vector1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Vector2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Perm&gt;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>permute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector1&amp;<sp/>vec1,<sp/>Vector2&amp;<sp/>vec2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Perm&amp;<sp/>perm)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>tbb::parallel_for(tbb::blocked_range(0ul,<sp/>perm.size()),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>i<sp/>=<sp/>r.begin(),<sp/>e<sp/>=<sp/>r.end();<sp/>i<sp/>!=<sp/>e;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec2[i]<sp/>=<sp/>vec1[perm[i]];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_graph<sp/>edge_list_t,<sp/>adjacency_list_graph<sp/>adjacency_t,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Perm,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>permute_helper(edge_list_t&amp;<sp/>el,<sp/>adjacency_t&amp;<sp/>cs,<sp/>std::index_sequence&lt;Is...&gt;<sp/>is,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Perm&amp;<sp/>perm)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>(...,<sp/>(permute(std::get&lt;Is<sp/>+<sp/>2&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(el)),<sp/>std::get&lt;Is<sp/>+<sp/>1&gt;(cs.to_be_indexed_),<sp/>perm)));</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_graph<sp/>edge_list_t,<sp/>adjacency_list_graph<sp/>adjacency_t,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Perm,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>permute_helper_all(edge_list_t&amp;<sp/>el,<sp/>adjacency_t&amp;<sp/>cs,<sp/>std::index_sequence&lt;Is...&gt;<sp/>is,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Perm&amp;<sp/>perm)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>(...,<sp/>(permute(std::get&lt;Is<sp/>+<sp/>1&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(el)),<sp/>std::get&lt;Is&gt;(cs.to_be_indexed_),<sp/>perm)));</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_graph<sp/>edge_list_t,<sp/>adjacency_list_graph<sp/>adjacency_t,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Perm,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>permute_helper(edge_list_t&amp;<sp/>el,<sp/>adjacency_t&amp;<sp/>cs,<sp/>std::index_sequence&lt;Is...&gt;<sp/>is,<sp/>T&amp;<sp/>Tmp,<sp/>Perm&amp;<sp/>perm)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>(...,<sp/>(permute(std::get&lt;Is<sp/>+<sp/>2&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Tmp)),std::get&lt;Is<sp/>+<sp/>1&gt;(cs.to_be_indexed_),<sp/>perm)));</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_graph<sp/>edge_list_t,<sp/>adjacency_list_graph<sp/>adjacency_t,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExecutionPolicy<sp/>=<sp/>default_execution_policy,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_helper(edge_list_t&amp;<sp/>el,<sp/>adjacency_t&amp;<sp/>cs,<sp/>std::index_sequence&lt;Is...&gt;<sp/>is,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>(...,<sp/>(std::copy(policy,<sp/>std::get&lt;Is<sp/>+<sp/>2&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(el)).begin(),</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;Is<sp/>+<sp/>2&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(el)).end(),<sp/>std::get&lt;Is<sp/>+<sp/>1&gt;(cs.to_be_indexed_).begin())));</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_graph<sp/>edge_list_t,<sp/>adjacency_list_graph<sp/>adjacency_t,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExecutionPolicy<sp/>=<sp/>default_execution_policy,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy_helper(edge_list_t&amp;<sp/>el,<sp/>adjacency_t&amp;<sp/>cs,<sp/>std::index_sequence&lt;Is...&gt;<sp/>is,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>(...,<sp/>(std::copy(policy,<sp/>std::get&lt;Is<sp/>+<sp/>2&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(el)).begin(),</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;Is<sp/>+<sp/>2&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(el)).end(),<sp/>std::get&lt;Is<sp/>+<sp/>1&gt;(cs.to_be_indexed_).begin()+offset)));</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_graph<sp/>edge_list_t,<sp/>adjacency_list_graph<sp/>adjacency_t,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExecutionPolicy<sp/>=<sp/>default_execution_policy,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_helper_tmp(edge_list_t&amp;<sp/>el,<sp/>adjacency_t&amp;<sp/>cs,<sp/>std::index_sequence&lt;Is...&gt;<sp/>is,<sp/>T&amp;<sp/>Tmp,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>(...,<sp/>(std::copy(policy,<sp/>std::get&lt;Is<sp/>+<sp/>2&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Tmp)).begin(),</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;Is<sp/>+<sp/>2&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Tmp)).end(),<sp/>std::get&lt;Is<sp/>+<sp/>1&gt;(cs.to_be_indexed_).begin())));</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t,<sp/>adjacency_list_graph<sp/>adjacency_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Int,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_directed(edge_list_t&amp;<sp/>el,<sp/>Int<sp/>N,<sp/>adjacency_t&amp;<sp/>cs,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>degree<sp/>=<sp/>degrees&lt;idx&gt;(el);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>cs.indices_.resize(N<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>cs.indices_[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>std::inclusive_scan(policy,<sp/>degree.begin(),<sp/>degree.end(),<sp/>cs.indices_.begin()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>cs.to_be_indexed_.resize(el.size());</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>sort_by&lt;idx&gt;(el);<sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>do<sp/>this<sp/>in<sp/>a<sp/>way<sp/>that<sp/>will<sp/>let<sp/>us<sp/>have<sp/>const<sp/>el</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not,<sp/>we<sp/>should<sp/>steal<sp/>(move)<sp/>the<sp/>vectors<sp/>rather<sp/>than<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>kdx<sp/>(the<sp/>other<sp/>index)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kdx<sp/>=<sp/>(idx<sp/>+<sp/>1)<sp/>%<sp/>2;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>std::copy(policy,<sp/>std::get&lt;kdx&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(el)).begin(),</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;kdx&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(el)).end(),<sp/>std::get&lt;0&gt;(cs.to_be_indexed_).begin());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::tuple_size&lt;typename<sp/>edge_list_t::attributes_t&gt;::value<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_helper(el,<sp/>cs,<sp/>std::make_integer_sequence&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/>std::tuple_size&lt;typename<sp/>edge_list_t::attributes_t&gt;::value&gt;(),<sp/>policy);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>perm<sp/>=<sp/>proxysort(std::get&lt;idx&gt;(el));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>permute(cs.to_be_indexed_,<sp/>perm,<sp/>policy);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Best:<sp/>parallel<sp/>insertion<sp/>sort<sp/>--<sp/>need<sp/>concurrent<sp/>container<sp/>safe<sp/>for<sp/>push_at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Better<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kdx<sp/>=<sp/>(idx<sp/>+<sp/>1)<sp/>%<sp/>2;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>std::copy(policy,<sp/>std::get&lt;kdx&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(el)).begin(),</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;kdx&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(el)).end(),<sp/>std::get&lt;0&gt;(cs.to_be_indexed_).begin());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::tuple_size&lt;typename<sp/>edge_list_t::attributes_t&gt;::value<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_helper(el,<sp/>cs,<sp/>std::make_integer_sequence&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/>std::tuple_size&lt;typename<sp/>edge_list_t::attributes_t&gt;::value&gt;(),<sp/>policy);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>faster?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>std::vector&lt;nw::graph::vertex_id_t&lt;adjacency_t&gt;&gt;<sp/>tmp(std::get&lt;idx&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(el)));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>dumps<sp/>core<sp/>for<sp/>some<sp/>reason</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::vector&lt;nw::graph::vertex_id_t&lt;adjacency_t&gt;&gt;<sp/>tmp(std::get&lt;idx&gt;(dynamic_cast&lt;typename<sp/>edge_list_t::base&amp;&gt;(el)).size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::copy(policy,<sp/>std::get&lt;idx&gt;(dynamic_cast&lt;typename<sp/>edge_list_t::base&amp;&gt;(el)).begin(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;kdx&gt;(dynamic_cast&lt;typename<sp/>edge_list_t::base&amp;&gt;(el)).end(),<sp/>tmp.begin());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>make_zipped(tmp,<sp/>cs.to_be_indexed_);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>std::sort(policy,<sp/>a.begin(),<sp/>a.end(),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;a,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;b)<sp/>{<sp/>return<sp/>std::get&lt;0&gt;(a)<sp/>&lt;<sp/>std::get&lt;0&gt;(b);<sp/>});</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Int,<sp/>adjacency_list_graph<sp/>adjacency_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_undirected(edge_list_t&amp;<sp/>el,<sp/>Int<sp/>N,<sp/>adjacency_t&amp;<sp/>cs,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>edge<sp/>is<sp/>undirected,<sp/>it<sp/>means<sp/>the<sp/>edge<sp/>list<sp/>must<sp/>be<sp/>a<sp/>unipartite<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>assert(is_unipartite&lt;typename<sp/>edge_list_t::unipartite_graph_base&gt;::value);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vertex_id_type<sp/>=<sp/>vertex_id_t&lt;edge_list_t&gt;;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>std::vector&lt;vertex_id_type&gt;<sp/>Tmp(2*el.size());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kdx<sp/>=<sp/>(idx<sp/>+<sp/>1)<sp/>%<sp/>2;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>std::copy(policy,<sp/>std::get&lt;idx&gt;(el).begin(),<sp/>std::get&lt;idx&gt;(el).end(),<sp/>Tmp.begin());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>std::copy(policy,<sp/>std::get&lt;kdx&gt;(el).begin(),<sp/>std::get&lt;kdx&gt;(el).end(),<sp/>Tmp.begin()+el.size());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;vertex_id_type&gt;<sp/>degrees(N);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>cs.indices_.resize(N<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>cs.indices_[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each(</highlight><highlight class="comment">/*<sp/>policy,<sp/>*/</highlight><highlight class="normal"><sp/><sp/>Tmp.begin(),<sp/>Tmp.end(),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>i)<sp/>{<sp/>++degrees[i];<sp/>});</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>std::inclusive_scan(policy,<sp/>degrees.begin(),<sp/>degrees.end(),<sp/>cs.indices_.begin()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>cs.to_be_indexed_.resize(Tmp.size());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>std::copy(policy,<sp/>std::get&lt;kdx&gt;(el).begin(),<sp/>std::get&lt;kdx&gt;(el).end(),<sp/>std::get&lt;0&gt;(cs.to_be_indexed_).begin());</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>std::copy(policy,<sp/>std::get&lt;idx&gt;(el).begin(),<sp/>std::get&lt;idx&gt;(el).end(),<sp/>std::get&lt;0&gt;(cs.to_be_indexed_).begin()+el.size());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::tuple_size&lt;typename<sp/>edge_list_t::attributes_t&gt;::value<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>copy_helper(el,<sp/>cs,<sp/>std::make_integer_sequence&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/>std::tuple_size&lt;typename<sp/>edge_list_t::attributes_t&gt;::value&gt;(),<sp/>0,<sp/>policy);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::tuple_size&lt;typename<sp/>edge_list_t::attributes_t&gt;::value<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>copy_helper(el,<sp/>cs,<sp/>std::make_integer_sequence&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/>std::tuple_size&lt;typename<sp/>edge_list_t::attributes_t&gt;::value&gt;(),<sp/>el.size(),<sp/>policy);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>make_zipped(Tmp,<sp/>cs.to_be_indexed_);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>std::sort(policy,<sp/>a.begin(),<sp/>a.end(),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;a,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;b)<sp/>{<sp/>return<sp/>std::get&lt;0&gt;(a)<sp/>&lt;<sp/>std::get&lt;0&gt;(b);<sp/>});</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>edge_list_t::directed_type<sp/>Tmp(N);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>directedness<sp/>doesn&apos;t<sp/>matter<sp/>for<sp/>the<sp/>Tmp,<sp/>so<sp/>just<sp/>use<sp/>same<sp/>type<sp/>as<sp/>el</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EXCEPT<sp/>--<sp/>degrees<sp/>does<sp/>something<sp/>different<sp/>if<sp/>undirected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>Tmp.resize(2<sp/>*<sp/>el.size());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>std::copy(policy,<sp/>el.begin(),<sp/>el.end(),<sp/>Tmp.begin());</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>std::transform(policy,<sp/>el.begin(),<sp/>el.end(),<sp/>Tmp.begin()<sp/>+<sp/>el.size(),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>elt)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>flt<sp/>=<sp/>elt;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(std::get&lt;0&gt;(flt),<sp/>std::get&lt;1&gt;(flt));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>flt;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>sort_by&lt;idx&gt;(Tmp);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stable_sort<sp/>may<sp/>allocate<sp/>extra<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>degree<sp/>=<sp/>degrees&lt;idx&gt;(Tmp);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>have<sp/>a<sp/>fast<sp/>version<sp/>if<sp/>we<sp/>know<sp/>it<sp/>is<sp/>sorted<sp/>--<sp/>using<sp/>equal_range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>cs.indices_.resize(N<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>std::inclusive_scan(policy,<sp/>degree.begin(),<sp/>degree.end(),<sp/>cs.indices_.begin()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>cs.to_be_indexed_.resize(Tmp.size());</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kdx<sp/>=<sp/>(idx<sp/>+<sp/>1)<sp/>%<sp/>2;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>std::copy(policy,<sp/>std::get&lt;kdx&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Tmp)).begin(),</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;kdx&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">typename<sp/>edge_list_t::base&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Tmp)).end(),<sp/>std::get&lt;0&gt;(cs.to_be_indexed_).begin());</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::tuple_size&lt;typename<sp/>edge_list_t::attributes_t&gt;::value<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_helper_tmp(el,<sp/>cs,<sp/>std::make_integer_sequence&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/>std::tuple_size&lt;typename<sp/>edge_list_t::attributes_t&gt;::value&gt;(),<sp/>Tmp,<sp/>policy);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t,<sp/>adjacency_list_graph<sp/>adjacency_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fill(edge_list_t&amp;<sp/>el,<sp/>adjacency_t&amp;<sp/>cs,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sort_adjacency<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(edge_list_t::edge_directedness<sp/>==<sp/>nw::graph::directedness::directed)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_directed&lt;idx&gt;(el,<sp/>num_vertices(el),<sp/>cs,<sp/>policy);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>undirected<sp/>--<sp/>this<sp/>cannot<sp/>be<sp/>a<sp/>bipartite<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_undirected&lt;idx&gt;(el,<sp/>num_vertices(el),<sp/>cs,<sp/>policy);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sort_adjacency)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>adjacency<sp/>sorted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>cs.sort_to_be_indexed();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs.to_be_indexed_.size();</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t,<sp/>adjacency_list_graph<sp/>adjacency_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fill(edge_list_t&amp;<sp/>el,<sp/>adjacency_t&amp;<sp/>cs,<sp/>directedness<sp/>dir,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sort_adjacency<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir<sp/>==<sp/>nw::graph::directedness::directed)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_directed&lt;idx&gt;(el,<sp/>num_vertices(el),<sp/>cs,<sp/>policy);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>undirected<sp/>--<sp/>this<sp/>cannot<sp/>be<sp/>a<sp/>bipartite<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_undirected&lt;idx&gt;(el,<sp/>num_vertices(el),<sp/>cs,<sp/>policy);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sort_adjacency)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>adjacency<sp/>sorted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>cs.sort_to_be_indexed();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs.to_be_indexed_.size();</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>bi_edge_list_t,<sp/>adjacency_list_graph<sp/>biadjacency_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fill_biadjacency(bi_edge_list_t&amp;<sp/>el,<sp/>biadjacency_t&amp;<sp/>cs,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sort_adjacency<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(bi_edge_list_t::edge_directedness<sp/>==<sp/>nw::graph::directedness::directed)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_directed&lt;idx&gt;(el,<sp/>num_vertices(el,<sp/>idx),<sp/>cs,<sp/>policy);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>undirected<sp/>--<sp/>this<sp/>cannot<sp/>be<sp/>a<sp/>bipartite<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_undirected&lt;idx&gt;(el,<sp/>num_vertices(el,<sp/>idx),<sp/>cs,<sp/>policy);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sort_adjacency)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>adjacency<sp/>sorted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>cs.sort_to_be_indexed();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs.to_be_indexed_.size();</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t&gt;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap_to_triangular(edge_list_t&amp;<sp/>el,<sp/>succession<sp/>cessor)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cessor<sp/>==<sp/>succession::predecessor)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>swap_to_triangular&lt;idx,<sp/>edge_list_t,<sp/>succession::predecessor&gt;(el);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cessor<sp/>==<sp/>succession::successor)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>swap_to_triangular&lt;idx,<sp/>edge_list_t,<sp/>succession::successor&gt;(el);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>succession:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t&gt;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap_to_triangular(edge_list_t&amp;<sp/>el,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>cessor<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;predecessor&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cessor<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;predecessor&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>swap_to_triangular&lt;idx,<sp/>edge_list_t,<sp/>succession::predecessor&gt;(el);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cessor<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;successor&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>swap_to_triangular&lt;idx,<sp/>edge_list_t,<sp/>succession::successor&gt;(el);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>succession:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>cessor<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t,<sp/>succession<sp/>cessor<sp/>=<sp/>succession::predecessor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap_to_triangular(edge_list_t&amp;<sp/>el,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>((idx<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cessor<sp/>==<sp/>succession::predecessor)<sp/>||<sp/>(idx<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>cessor<sp/>==<sp/>succession::successor))<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each(policy,<sp/>el.begin(),<sp/>el.end(),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(std::get&lt;0&gt;(f)<sp/>&lt;<sp/>std::get&lt;1&gt;(f))<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(std::get&lt;0&gt;(f),<sp/>std::get&lt;1&gt;(f));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>((idx<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cessor<sp/>==<sp/>succession::successor)<sp/>||<sp/>(idx<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>cessor<sp/>==<sp/>succession::predecessor))<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each(policy,<sp/>el.begin(),<sp/>el.end(),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(std::get&lt;1&gt;(f)<sp/>&lt;<sp/>std::get&lt;0&gt;(f))<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(std::get&lt;1&gt;(f),<sp/>std::get&lt;0&gt;(f));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>entries<sp/>unique<sp/>--<sp/>in<sp/>place<sp/>--<sp/>remove<sp/>adjacent<sp/>redundancies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Requires<sp/>entries<sp/>to<sp/>be<sp/>sorted<sp/>in<sp/>both<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>uniq(edge_list_t&amp;<sp/>el,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>past_the_end<sp/>=<sp/>std::unique(policy,<sp/>el.begin(),<sp/>el.end(),</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>y)<sp/>{<sp/>return<sp/>std::get&lt;0&gt;(x)<sp/>==<sp/>std::get&lt;0&gt;(y)<sp/>&amp;&amp;<sp/>std::get&lt;1&gt;(x)<sp/>==<sp/>std::get&lt;1&gt;(y);<sp/>});</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>el.erase(past_the_end,<sp/>el.end());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>el.resize(past_the_end<sp/>-<sp/>el.begin());</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_graph<sp/>edge_list_t&gt;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remove_self_loops(edge_list_t&amp;<sp/>el)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>past_the_end<sp/>=</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::remove_if(</highlight><highlight class="comment">/*std::execution::par_unseq,*/</highlight><highlight class="normal"><sp/>el.begin(),<sp/>el.end(),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>x)<sp/>{<sp/>return<sp/>std::get&lt;0&gt;(x)<sp/>==<sp/>std::get&lt;1&gt;(x);<sp/>});</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>el.erase(past_the_end,<sp/>el.end());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>el.resize(past_the_end<sp/>-<sp/>el.begin());</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;degree_enumerable_graph<sp/>Graph,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>degrees(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph&amp;<sp/>graph,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>std::vector&lt;vertex_id_t&lt;Graph&gt;&gt;<sp/>degree_v(num_vertices(graph));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>tbb::parallel_for(tbb::blocked_range(0ul,<sp/>degree_v.size()),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>i<sp/>=<sp/>r.begin(),<sp/>e<sp/>=<sp/>r.end();<sp/>i<sp/>!=<sp/>e;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>degree_v[i]<sp/>=<sp/>degree(graph[i]);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>degree_v;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x<sp/>=<sp/>0,<sp/>edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(is_unipartite&lt;typename<sp/>edge_list_t::unipartite_graph_base&gt;::value)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>degrees(edge_list_t&amp;<sp/>el,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!degree_enumerable_graph&lt;edge_list_t&gt;)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(is_unipartite&lt;typename<sp/>edge_list_t::unipartite_graph_base&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>unipartite<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>d_size<sp/>=<sp/>num_vertices(el);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>bipartite<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>d_size<sp/>=<sp/>num_vertices(el,<sp/>d_idx);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vertex_id_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>edge_list_t::vertex_id_type;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>std::vector&lt;vertex_id_type&gt;<sp/>degree(d_size);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(edge_list_t::edge_directedness<sp/>==<sp/>directedness::directed)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::atomic&lt;vertex_id_type&gt;&gt;<sp/>tmp(degree.size());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each(policy,<sp/>el.begin(),<sp/>el.end(),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>x)<sp/>{<sp/>++tmp[std::get&lt;d_idx&gt;(x)];<sp/>});</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(policy,<sp/>tmp.begin(),<sp/>tmp.end(),<sp/>degree.begin());</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(edge_list_t::edge_directedness<sp/>==<sp/>directedness::undirected)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::atomic&lt;vertex_id_type&gt;&gt;<sp/>tmp(degree.size());</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each(policy,<sp/>el.begin(),<sp/>el.end(),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++tmp[std::get&lt;0&gt;(x)];</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++tmp[std::get&lt;1&gt;(x)];</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(policy,<sp/>tmp.begin(),<sp/>tmp.end(),<sp/>degree.begin());</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>degree;</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//for<sp/>bipartite<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>==<sp/>is_unipartite&lt;typename<sp/>edge_list_t::bipartite_graph_base&gt;::value)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>degrees(edge_list_t&amp;<sp/>el,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!degree_enumerable_graph&lt;edge_list_t&gt;)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d_size<sp/>=<sp/>num_vertices(el,<sp/>d_idx);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vertex_id_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>edge_list_t::vertex_id_type;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>std::vector&lt;vertex_id_type&gt;<sp/>degree(d_size);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(edge_list_t::edge_directedness<sp/>==<sp/>directedness::directed)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::atomic&lt;vertex_id_type&gt;&gt;<sp/>tmp(degree.size());</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each(policy,<sp/>el.begin(),<sp/>el.end(),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>x)<sp/>{<sp/>++tmp[std::get&lt;d_idx&gt;(x)];<sp/>});</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(policy,<sp/>tmp.begin(),<sp/>tmp.end(),<sp/>degree.begin());</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>degree;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x<sp/>=<sp/>0,<sp/>edge_list_graph<sp/>edge_list_t&gt;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>perm_by_degree(edge_list_t&amp;<sp/>el,<sp/>std::string<sp/>direction<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ascending&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>degree<sp/>=<sp/>degrees&lt;idx&gt;(el);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>perm_by_degree&lt;idx&gt;(el,<sp/>degree,<sp/>direction);</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x<sp/>=<sp/>0,<sp/>edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Vector,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>perm_by_degree(edge_list_t&amp;<sp/>el,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>degree,<sp/>std::string<sp/>direction<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ascending&quot;</highlight><highlight class="normal">,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>std::vector&lt;typename<sp/>edge_list_t::vertex_id_type&gt;<sp/>perm(degree.size());</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>tbb::parallel_for(tbb::blocked_range(0ul,<sp/>perm.size()),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>i<sp/>=<sp/>r.begin(),<sp/>e<sp/>=<sp/>r.end();<sp/>i<sp/>!=<sp/>e;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perm[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>degree.begin();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direction<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;descending&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(policy,<sp/>perm.begin(),<sp/>perm.end(),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b)<sp/>{<sp/>return<sp/>d[a]<sp/>&gt;<sp/>d[b];<sp/>});</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direction<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ascending&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(policy,<sp/>perm.begin(),<sp/>perm.end(),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b)<sp/>{<sp/>return<sp/>d[a]<sp/>&lt;<sp/>d[b];<sp/>});</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>direction:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>direction<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>perm;</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Vector,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>==<sp/>is_unipartite&lt;typename<sp/>edge_list_t::unipartite_graph_base&gt;::value)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>relabel(edge_list_t&amp;<sp/>el,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>perm,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>std::vector&lt;typename<sp/>edge_list_t::vertex_id_type&gt;<sp/>iperm(perm.size());</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>tbb::parallel_for(tbb::blocked_range(0ul,<sp/>iperm.size()),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>i<sp/>=<sp/>r.begin(),<sp/>e<sp/>=<sp/>r.end();<sp/>i<sp/>!=<sp/>e;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iperm[perm[i]]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>std::for_each(policy,<sp/>el.begin(),<sp/>el.end(),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>std::get&lt;0&gt;(x)<sp/>=<sp/>iperm[std::get&lt;0&gt;(x)];</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>std::get&lt;1&gt;(x)<sp/>=<sp/>iperm[std::get&lt;1&gt;(x)];</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iperm;</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Vector,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>default_execution_policy&gt;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>==<sp/>is_unipartite&lt;typename<sp/>edge_list_t::bipartite_graph_base&gt;::value)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>relabel(edge_list_t&amp;<sp/>el,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>perm,<sp/>ExecutionPolicy&amp;&amp;<sp/>policy<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>std::vector&lt;typename<sp/>edge_list_t::vertex_id_type&gt;<sp/>iperm(perm.size());</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>tbb::parallel_for(tbb::blocked_range(0ul,<sp/>iperm.size()),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>i<sp/>=<sp/>r.begin(),<sp/>e<sp/>=<sp/>r.end();<sp/>i<sp/>!=<sp/>e;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iperm[perm[i]]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>std::for_each(policy,<sp/>el.begin(),<sp/>el.end(),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>std::get&lt;idx&gt;(x)<sp/>=<sp/>iperm[std::get&lt;idx&gt;(x)];</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iperm;</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Vector<sp/>=<sp/>std::vector&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(is_unipartite&lt;typename<sp/>edge_list_t::unipartite_graph_base&gt;::value)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>relabel_by_degree(edge_list_t&amp;<sp/>el,<sp/>std::string<sp/>direction<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ascending&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>degree<sp/>=<sp/>std::vector&lt;int&gt;(0))<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>std::vector&lt;typename<sp/>edge_list_t::vertex_id_type&gt;<sp/>perm<sp/>=</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>degree.size()<sp/>==<sp/>0<sp/>?<sp/>perm_by_degree&lt;0&gt;(el,<sp/>direction)<sp/>:<sp/>perm_by_degree&lt;0&gt;(el,<sp/>degree,<sp/>direction);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>relabel(el,<sp/>perm);</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x,<sp/>edge_list_graph<sp/>edge_list_t,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Vector<sp/>=<sp/>std::vector&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(is_unipartite&lt;typename<sp/>edge_list_t::unipartite_graph_base&gt;::value)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>relabel_by_degree(edge_list_t&amp;<sp/>el,<sp/>std::string<sp/>direction<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ascending&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>degree<sp/>=<sp/>std::vector&lt;int&gt;(0))<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>std::vector&lt;typename<sp/>edge_list_t::vertex_id_type&gt;<sp/>perm<sp/>=</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>degree.size()<sp/>==<sp/>0<sp/>?<sp/>perm_by_degree&lt;idx&gt;(el,<sp/>direction)<sp/>:<sp/>perm_by_degree&lt;idx&gt;(el,<sp/>degree,<sp/>direction);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>==<sp/>is_unipartite&lt;typename<sp/>edge_list_t::unipartite_graph_base&gt;::value)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Compress<sp/>idx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unipartite<sp/>graph<sp/>relabels<sp/>both<sp/>endpoints<sp/>of<sp/>the<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>relabel(el,<sp/>perm);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>perm;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bipartite<sp/>graph<sp/>relabels<sp/>one<sp/>endponit<sp/>of<sp/>the<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>relabel&lt;idx&gt;(el,<sp/>perm);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::ranges::random_access_range<sp/>R&gt;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_index_map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R&amp;<sp/>range)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>std::ranges::range_value_t&lt;R&gt;;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>std::map&lt;value_type,<sp/>size_t&gt;<sp/>the_map;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size(range);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>the_map[range[i]]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>the_map;</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/>std::ranges::random_access_range<sp/>E,<sp/></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Edge<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::tuple_cat(std::tuple&lt;size_t,<sp/>size_t&gt;())),</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EdgeList<sp/>=<sp/>std::vector&lt;Edge&gt;&gt;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_plain_edges(M&amp;<sp/>map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>EdgeList<sp/>index_edges;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Edge&amp;&amp;<sp/>e<sp/>:<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>std::apply([&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>u,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">...<sp/>props_)<sp/>{<sp/>index_edges.push_back(std::make_tuple(map[u],<sp/>map[v]));<sp/>},<sp/>e);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_edges;</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/>std::ranges::random_access_range<sp/>E,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Edge<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::tuple_cat(std::tuple&lt;size_t,<sp/>size_t&gt;(),<sp/>props(E()[0]))),</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EdgeList<sp/>=<sp/>std::vector&lt;Edge&gt;&gt;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_property_edges(M&amp;<sp/>map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>EdgeList<sp/>index_edges;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>e<sp/>:<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>std::apply([&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>u,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">...<sp/>props_)<sp/>{<sp/>index_edges.push_back(std::make_tuple(map[u],<sp/>map[v],<sp/>props_...));<sp/>},<sp/>e);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_edges;</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>std::vector&lt;std::tuple&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;&gt;,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>M,<sp/>std::ranges::random_access_range<sp/>E&gt;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_index_edges(M&amp;<sp/>map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index_edges<sp/>=<sp/>I();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size(edges);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>left<sp/><sp/>=<sp/>std::get&lt;0&gt;(edges[i]);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>std::get&lt;1&gt;(edges[i]);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>index_edges.push_back(std::make_tuple(map[left],<sp/>map[right],<sp/>i));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_edges;</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::ranges::random_access_range<sp/>V,<sp/>std::ranges::random_access_range<sp/>E,<sp/>adjacency_list_graph<sp/>Graph<sp/>=<sp/>std::vector&lt;std::vector&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_plain_graph(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>edges,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>directed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertex_map<sp/><sp/>=<sp/>make_index_map(vertices);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index_edges<sp/>=<sp/>make_plain_edges(vertex_map,<sp/>edges);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>Graph<sp/>G(size(vertices));</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>push_back_fill(index_edges,<sp/>G,<sp/>directed,<sp/>idx);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>G;</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::ranges::random_access_range<sp/>V,<sp/>std::ranges::random_access_range<sp/>E,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adjacency_list_graph<sp/>Graph<sp/>=<sp/>std::vector&lt;std::vector&lt;std::tuple&lt;size_t,<sp/>size_t&gt;&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_index_graph(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>edges,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>directed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertex_map<sp/><sp/>=<sp/>make_index_map(vertices);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index_edges<sp/>=<sp/>make_index_edges(vertex_map,<sp/>edges);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>Graph<sp/>G(size(vertices));</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>push_back_fill(index_edges,<sp/>G,<sp/>directed,<sp/>idx);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>G;</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::ranges::random_access_range<sp/>V,<sp/>std::ranges::forward_range<sp/>E,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adjacency_list_graph<sp/>Graph<sp/>=<sp/>std::vector&lt;std::vector&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::tuple_cat(std::make_tuple(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{}),<sp/>props(*(begin(E{})))))&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_property_graph(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>edges,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>directed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertex_map<sp/><sp/><sp/><sp/><sp/>=<sp/>make_index_map(vertices);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>property_edges<sp/>=<sp/>make_property_edges(vertex_map,<sp/>edges);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>Graph<sp/>G(size(vertices));</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>push_back_fill(property_edges,<sp/>G,<sp/>directed,<sp/>idx);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>G;</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>std::vector&lt;std::tuple&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;&gt;,<sp/>std::ranges::random_access_range<sp/>V,<sp/>std::ranges::random_access_range<sp/>E&gt;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data_to_graph_edge_list(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>left_vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>right_vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>left_map<sp/><sp/>=<sp/>make_index_map(left_vertices);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right_map<sp/>=<sp/>make_index_map(right_vertices);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>std::vector&lt;std::tuple&lt;size_t,<sp/>size_t&gt;&gt;<sp/>index_edges;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size(edges);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>left<sp/><sp/>=<sp/>std::get&lt;0&gt;(edges[i]);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>std::get&lt;1&gt;(edges[i]);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>index_edges.push_back({left_map[left],<sp/>right_map[right]});</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_edges;</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::ranges::random_access_range<sp/>V1,<sp/>std::ranges::random_access_range<sp/>V2,<sp/>std::ranges::random_access_range<sp/>E,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adjacency_list_graph<sp/>Graph<sp/>=<sp/>std::vector&lt;std::vector&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::tuple_cat(std::make_tuple(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{}),<sp/>props(*(begin(E{})))))&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_plain_bipartite_graph(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V1&amp;<sp/>left_vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V2&amp;<sp/>right_vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>edges,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index_edges<sp/>=<sp/>data_to_graph_edge_list(left_vertices,<sp/>right_vertices,<sp/>edges);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>graph_size<sp/><sp/>=<sp/>idx<sp/>==<sp/>0<sp/>?<sp/>size(left_vertices)<sp/>:<sp/>size(right_vertices);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>Graph<sp/>G(size(left_vertices));</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>push_back_fill(index_edges,<sp/>G,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>idx);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>G;</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::ranges::random_access_range<sp/>V1,<sp/>std::ranges::random_access_range<sp/>V2,<sp/>std::ranges::random_access_range<sp/>E,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Graph<sp/>=<sp/>std::vector&lt;std::vector&lt;size_t&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_plain_bipartite_graphs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V1&amp;<sp/>left_vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V2&amp;<sp/>right_vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index_edges<sp/>=<sp/>data_to_graph_edge_list&lt;&gt;(left_vertices,<sp/>right_vertices,<sp/>edges);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>Graph<sp/>G(size(left_vertices));</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>Graph<sp/>H(size(right_vertices));</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>push_back_fill(index_edges,<sp/>G,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>push_back_fill(index_edges,<sp/>H,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_tuple(G,<sp/>H);</highlight></codeline>
<codeline lineno="818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x<sp/>=<sp/>0,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Graph<sp/>=<sp/>std::vector&lt;std::vector&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;&gt;,<sp/>std::ranges::random_access_range<sp/>V,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ranges::random_access_range<sp/>E&gt;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_bipartite_graph(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>left_vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>right_vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index_edges<sp/>=<sp/>data_to_graph_edge_list(left_vertices,<sp/>right_vertices,<sp/>edges);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>graph_size<sp/><sp/>=<sp/>idx<sp/>==<sp/>0<sp/>?<sp/>size(left_vertices)<sp/>:<sp/>size(right_vertices);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>Graph<sp/>G(size(left_vertices));</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>push_back_fill(index_edges,<sp/>G,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>idx);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>G;</highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::ranges::random_access_range<sp/>V,<sp/>std::ranges::random_access_range<sp/>E,</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adjacency_list_graph<sp/>Graph<sp/>=<sp/>std::vector&lt;std::vector&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::tuple_cat(std::make_tuple(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{}),<sp/>props(*(begin(E{})))))&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_bipartite_graphs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>left_vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>right_vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index_edges<sp/>=<sp/>data_to_graph_edge_list&lt;&gt;(left_vertices,<sp/>right_vertices,<sp/>edges);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>Graph<sp/>G(size(left_vertices));</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>Graph<sp/>H(size(right_vertices));</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>push_back_fill(index_edges,<sp/>G,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>push_back_fill(index_edges,<sp/>H,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_tuple(G,<sp/>H);</highlight></codeline>
<codeline lineno="846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Graph1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Graph2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IndexGraph<sp/>=<sp/>std::vector&lt;std::vector&lt;std::tuple&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>join(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph1&amp;<sp/>G,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph2&amp;<sp/>H)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>std::vector&lt;std::tuple&lt;size_t,<sp/>size_t,<sp/>size_t&gt;&gt;<sp/>s_overlap;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>H.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>k<sp/>:<sp/>H[i])<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>j<sp/>:<sp/>G[target(H,<sp/>k)])<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target(G,<sp/>j)<sp/>!=<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_overlap.push_back({i,<sp/>target(G,<sp/>j),<sp/>target(H,<sp/>k)});</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>IndexGraph<sp/>L(size(H));</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>push_back_fill(s_overlap,<sp/>L,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NW_GRAPH_BUILD_HPP</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp"/>
  </compounddef>
</doxygen>
