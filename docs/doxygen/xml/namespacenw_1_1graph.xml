<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespacenw_1_1graph" kind="namespace" language="C++">
    <compoundname>nw::graph</compoundname>
    <innerclass refid="classnw_1_1graph_1_1__priority__queue" prot="public">nw::graph::_priority_queue</innerclass>
    <innerclass refid="classnw_1_1graph_1_1array__of__structs" prot="public">nw::graph::array_of_structs</innerclass>
    <innerclass refid="structnw_1_1graph_1_1arrow__proxy" prot="public">nw::graph::arrow_proxy</innerclass>
    <innerclass refid="classnw_1_1graph_1_1atomic__counting__output__iterator" prot="public">nw::graph::atomic_counting_output_iterator</innerclass>
    <innerclass refid="classnw_1_1graph_1_1_atomic_bit_vector" prot="public">nw::graph::AtomicBitVector</innerclass>
    <innerclass refid="structnw_1_1graph_1_1atomwrapper" prot="public">nw::graph::atomwrapper</innerclass>
    <innerclass refid="classnw_1_1graph_1_1back__edge__range" prot="public">nw::graph::back_edge_range</innerclass>
    <innerclass refid="classnw_1_1graph_1_1bfs__edge__range" prot="public">nw::graph::bfs_edge_range</innerclass>
    <innerclass refid="classnw_1_1graph_1_1bfs__edge__range2" prot="public">nw::graph::bfs_edge_range2</innerclass>
    <innerclass refid="classnw_1_1graph_1_1bfs__edge__range3" prot="public">nw::graph::bfs_edge_range3</innerclass>
    <innerclass refid="classnw_1_1graph_1_1bipartite__graph__base" prot="public">nw::graph::bipartite_graph_base</innerclass>
    <innerclass refid="classnw_1_1graph_1_1bottomup__bfs__range" prot="public">nw::graph::bottomup_bfs_range</innerclass>
    <innerclass refid="structnw_1_1graph_1_1counter" prot="public">nw::graph::counter</innerclass>
    <innerclass refid="classnw_1_1graph_1_1counting__iterator" prot="public">nw::graph::counting_iterator</innerclass>
    <innerclass refid="classnw_1_1graph_1_1counting__output__iterator" prot="public">nw::graph::counting_output_iterator</innerclass>
    <innerclass refid="classnw_1_1graph_1_1cyclic__neighbor__range" prot="public">nw::graph::cyclic_neighbor_range</innerclass>
    <innerclass refid="classnw_1_1graph_1_1cyclic__range__adapter" prot="public">nw::graph::cyclic_range_adapter</innerclass>
    <innerclass refid="classnw_1_1graph_1_1dag__range" prot="public">nw::graph::dag_range</innerclass>
    <innerclass refid="classnw_1_1graph_1_1dfs__edge__range" prot="public">nw::graph::dfs_edge_range</innerclass>
    <innerclass refid="classnw_1_1graph_1_1dfs__range" prot="public">nw::graph::dfs_range</innerclass>
    <innerclass refid="classnw_1_1graph_1_1disjoint__set" prot="public">nw::graph::disjoint_set</innerclass>
    <innerclass refid="classnw_1_1graph_1_1edge__range" prot="public">nw::graph::edge_range</innerclass>
    <innerclass refid="structnw_1_1graph_1_1graph__traits" prot="public">nw::graph::graph_traits</innerclass>
    <innerclass refid="structnw_1_1graph_1_1graph__traits_3_01_g_01_4" prot="public">nw::graph::graph_traits&lt; G &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1graph__traits_3_01index__adj__flist_3_01idx_00_01vertex__id_00_01_attributes_8_8_8_01_4_01_4" prot="public">nw::graph::graph_traits&lt; index_adj_flist&lt; idx, vertex_id, Attributes... &gt; &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1graph__traits_3_01index__adj__list_3_01idx_00_01vertex__id_00_01_attributes_8_8_8_01_4_01_4" prot="public">nw::graph::graph_traits&lt; index_adj_list&lt; idx, vertex_id, Attributes... &gt; &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1graph__traits_3_01index__edge__list_3_01vertex__id_00_01graph__base__t_00_07ffa76fa9cee2cdc406106a37f489530" prot="public">nw::graph::graph_traits&lt; index_edge_list&lt; vertex_id, graph_base_t, direct, Attributes... &gt; &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1graph__traits_3_01_outer_3_01_inner_3_01_index_01_4_01_4_01_4" prot="public">nw::graph::graph_traits&lt; Outer&lt; Inner&lt; Index &gt; &gt; &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1graph__traits_3_01_outer_3_01_inner_3_01std_1_1tuple_3_01_index_00_01_attributes_8_8_8_01_4_01_4_01_4_01_4" prot="public">nw::graph::graph_traits&lt; Outer&lt; Inner&lt; std::tuple&lt; Index, Attributes... &gt; &gt; &gt; &gt;</innerclass>
    <innerclass refid="classnw_1_1graph_1_1index__adj__flist" prot="public">nw::graph::index_adj_flist</innerclass>
    <innerclass refid="classnw_1_1graph_1_1index__adj__list" prot="public">nw::graph::index_adj_list</innerclass>
    <innerclass refid="classnw_1_1graph_1_1index__adjacency" prot="public">nw::graph::index_adjacency</innerclass>
    <innerclass refid="classnw_1_1graph_1_1index__biadjacency" prot="public">nw::graph::index_biadjacency</innerclass>
    <innerclass refid="classnw_1_1graph_1_1index__edge__list" prot="public">nw::graph::index_edge_list</innerclass>
    <innerclass refid="classnw_1_1graph_1_1index__vov" prot="public">nw::graph::index_vov</innerclass>
    <innerclass refid="classnw_1_1graph_1_1indexed__struct__of__arrays" prot="public">nw::graph::indexed_struct_of_arrays</innerclass>
    <innerclass refid="structnw_1_1graph_1_1is__iterator" prot="public">nw::graph::is_iterator</innerclass>
    <innerclass refid="structnw_1_1graph_1_1is__iterator_3_01const_01_t_01_5_00_01void_01_4" prot="public">nw::graph::is_iterator&lt; const T *, void &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1is__iterator_3_01_t_01_5_00_01void_01_4" prot="public">nw::graph::is_iterator&lt; T *, void &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1is__iterator_3_01_t_00_01std_1_1enable__if__t_3_9std_1_1is__same__v_3_01typa6004aedd72e0e7b2c5c6c109cd71004" prot="public">nw::graph::is_iterator&lt; T, std::enable_if_t&lt;!std::is_same_v&lt; typename std::iterator_traits&lt; T &gt;::value_type, void &gt; &gt; &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1is__swappable" prot="public">nw::graph::is_swappable</innerclass>
    <innerclass refid="structnw_1_1graph_1_1is__swappable_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">nw::graph::is_swappable&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1is__swappable_3_01_t_01_4" prot="public">nw::graph::is_swappable&lt; T &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1is__unipartite" prot="public">nw::graph::is_unipartite</innerclass>
    <innerclass refid="structnw_1_1graph_1_1is__unipartite_3_01unipartite__graph__base_01_4" prot="public">nw::graph::is_unipartite&lt; unipartite_graph_base &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1max" prot="public">nw::graph::max</innerclass>
    <innerclass refid="structnw_1_1graph_1_1min" prot="public">nw::graph::min</innerclass>
    <innerclass refid="classnw_1_1graph_1_1neighbor__range" prot="public">nw::graph::neighbor_range</innerclass>
    <innerclass refid="structnw_1_1graph_1_1null__vertex__s" prot="public">nw::graph::null_vertex_s</innerclass>
    <innerclass refid="structnw_1_1graph_1_1other__direction" prot="public">nw::graph::other_direction</innerclass>
    <innerclass refid="classnw_1_1graph_1_1other__direction_3_01directedness_1_1directed_01_4" prot="public">nw::graph::other_direction&lt; directedness::directed &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1other__direction_3_01directedness_1_1undirected_01_4" prot="public">nw::graph::other_direction&lt; directedness::undirected &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1other__succession" prot="public">nw::graph::other_succession</innerclass>
    <innerclass refid="structnw_1_1graph_1_1other__succession_3_01succession_1_1predecessor_01_4" prot="public">nw::graph::other_succession&lt; succession::predecessor &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1other__succession_3_01succession_1_1successor_01_4" prot="public">nw::graph::other_succession&lt; succession::successor &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1pair__hash" prot="public">nw::graph::pair_hash</innerclass>
    <innerclass refid="classnw_1_1graph_1_1par__counting__output__iterator" prot="public">nw::graph::par_counting_output_iterator</innerclass>
    <innerclass refid="classnw_1_1graph_1_1permutation__iterator" prot="public">nw::graph::permutation_iterator</innerclass>
    <innerclass refid="classnw_1_1graph_1_1plain__degree__range" prot="public">nw::graph::plain_degree_range</innerclass>
    <innerclass refid="classnw_1_1graph_1_1plain__range" prot="public">nw::graph::plain_range</innerclass>
    <innerclass refid="classnw_1_1graph_1_1provenance" prot="public">nw::graph::provenance</innerclass>
    <innerclass refid="classnw_1_1graph_1_1random__range" prot="public">nw::graph::random_range</innerclass>
    <innerclass refid="structnw_1_1graph_1_1remove__atomic" prot="public">nw::graph::remove_atomic</innerclass>
    <innerclass refid="structnw_1_1graph_1_1remove__atomic_3_01std_1_1atomic_3_01_t_01_4_01_4" prot="public">nw::graph::remove_atomic&lt; std::atomic&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1remove__atomic_3_01std_1_1atomic__ref_3_01_t_01_4_01_4" prot="public">nw::graph::remove_atomic&lt; std::atomic_ref&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classnw_1_1graph_1_1reverse__path" prot="public">nw::graph::reverse_path</innerclass>
    <innerclass refid="classnw_1_1graph_1_1_spinlock" prot="public">nw::graph::Spinlock</innerclass>
    <innerclass refid="classnw_1_1graph_1_1splittable__range__adapter" prot="public">nw::graph::splittable_range_adapter</innerclass>
    <innerclass refid="structnw_1_1graph_1_1struct__of__arrays" prot="public">nw::graph::struct_of_arrays</innerclass>
    <innerclass refid="classnw_1_1graph_1_1tbbworklist__range" prot="public">nw::graph::tbbworklist_range</innerclass>
    <innerclass refid="classnw_1_1graph_1_1tbbworklist__range2" prot="public">nw::graph::tbbworklist_range2</innerclass>
    <innerclass refid="classnw_1_1graph_1_1topdown__bfs__range" prot="public">nw::graph::topdown_bfs_range</innerclass>
    <innerclass refid="classnw_1_1graph_1_1unipartite__graph__base" prot="public">nw::graph::unipartite_graph_base</innerclass>
    <innerclass refid="classnw_1_1graph_1_1vector__of__flist__of__structs" prot="public">nw::graph::vector_of_flist_of_structs</innerclass>
    <innerclass refid="classnw_1_1graph_1_1vector__of__list__of__structs" prot="public">nw::graph::vector_of_list_of_structs</innerclass>
    <innerclass refid="classnw_1_1graph_1_1vector__of__vector__of__structs" prot="public">nw::graph::vector_of_vector_of_structs</innerclass>
    <innerclass refid="classnw_1_1graph_1_1vertex__range" prot="public">nw::graph::vertex_range</innerclass>
    <innerclass refid="classnw_1_1graph_1_1worklist__range" prot="public">nw::graph::worklist_range</innerclass>
    <innerclass refid="structnw_1_1graph_1_1zipped" prot="public">nw::graph::zipped</innerclass>
    <innernamespace refid="namespacenw_1_1graph_1_1filtered__bfs">nw::graph::filtered_bfs</innernamespace>
    <innernamespace refid="namespacenw_1_1graph_1_1page__rank">nw::graph::page_rank</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="bfs__edge__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1d" prot="public" static="no" strong="no">
        <type></type>
        <name>three_colors</name>
        <qualifiedname>nw::graph::three_colors</qualifiedname>
        <enumvalue id="bfs__edge__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da8c13b6f2016c9130949cc5dad2d97ad6" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="bfs__edge__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da6ce37f8d7007a2bebc6bb17aa382bf9e" prot="public">
          <name>white</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="bfs__edge__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da5f71b8ad682edd04560a42f8f6e51b33" prot="public">
          <name>grey</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="bfs__edge__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da8c13b6f2016c9130949cc5dad2d97ad6" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="bfs__edge__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da6ce37f8d7007a2bebc6bb17aa382bf9e" prot="public">
          <name>white</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="bfs__edge__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da5f71b8ad682edd04560a42f8f6e51b33" prot="public">
          <name>grey</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="bfs__edge__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da8c13b6f2016c9130949cc5dad2d97ad6" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="bfs__edge__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da6ce37f8d7007a2bebc6bb17aa382bf9e" prot="public">
          <name>white</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="bfs__edge__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da5f71b8ad682edd04560a42f8f6e51b33" prot="public">
          <name>grey</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/bfs_edge_range.hpp" line="29" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/bfs_edge_range.hpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="enum" id="bfs__range_8hpp_1a36a213314f0c21d5fa114649ab38efa0" prot="public" static="no" strong="no">
        <type></type>
        <name>status</name>
        <qualifiedname>nw::graph::status</qualifiedname>
        <enumvalue id="bfs__range_8hpp_1a36a213314f0c21d5fa114649ab38efa0afc11dd00952d3628704f8fa011cee345" prot="public">
          <name>ready</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="bfs__range_8hpp_1a36a213314f0c21d5fa114649ab38efa0acd5e2bdfdd29cea6e2e03d2af240c111" prot="public">
          <name>waiting</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="bfs__range_8hpp_1a36a213314f0c21d5fa114649ab38efa0a09449a02296a2ea25289caee9bbaec42" prot="public">
          <name>processed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/bfs_range.hpp" line="27" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/bfs_range.hpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="enum" id="dag__range_8hpp_1aafa2fd8a55777e690a0cd6eb3156eb25" prot="public" static="no" strong="no">
        <type></type>
        <name>ready_to_process</name>
        <qualifiedname>nw::graph::ready_to_process</qualifiedname>
        <enumvalue id="dag__range_8hpp_1aafa2fd8a55777e690a0cd6eb3156eb25a96b584b5aa3819b28c347366fe35db81" prot="public">
          <name>yes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__range_8hpp_1aafa2fd8a55777e690a0cd6eb3156eb25a2598c50eac8c672371cd3837491a281a" prot="public">
          <name>no</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/dag_range.hpp" line="24" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/dag_range.hpp" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="enum" id="dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1d" prot="public" static="no" strong="no">
        <type></type>
        <name>three_colors</name>
        <qualifiedname>nw::graph::three_colors</qualifiedname>
        <enumvalue id="dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da8c13b6f2016c9130949cc5dad2d97ad6" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da6ce37f8d7007a2bebc6bb17aa382bf9e" prot="public">
          <name>white</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da5f71b8ad682edd04560a42f8f6e51b33" prot="public">
          <name>grey</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da8c13b6f2016c9130949cc5dad2d97ad6" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da6ce37f8d7007a2bebc6bb17aa382bf9e" prot="public">
          <name>white</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da5f71b8ad682edd04560a42f8f6e51b33" prot="public">
          <name>grey</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da8c13b6f2016c9130949cc5dad2d97ad6" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da6ce37f8d7007a2bebc6bb17aa382bf9e" prot="public">
          <name>white</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da5f71b8ad682edd04560a42f8f6e51b33" prot="public">
          <name>grey</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/dfs_range.hpp" line="26" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/dfs_range.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="new__dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1d" prot="public" static="no" strong="no">
        <type></type>
        <name>three_colors</name>
        <qualifiedname>nw::graph::three_colors</qualifiedname>
        <enumvalue id="new__dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da8c13b6f2016c9130949cc5dad2d97ad6" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="new__dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da6ce37f8d7007a2bebc6bb17aa382bf9e" prot="public">
          <name>white</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="new__dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da5f71b8ad682edd04560a42f8f6e51b33" prot="public">
          <name>grey</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="new__dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da8c13b6f2016c9130949cc5dad2d97ad6" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="new__dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da6ce37f8d7007a2bebc6bb17aa382bf9e" prot="public">
          <name>white</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="new__dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da5f71b8ad682edd04560a42f8f6e51b33" prot="public">
          <name>grey</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="new__dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da8c13b6f2016c9130949cc5dad2d97ad6" prot="public">
          <name>black</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="new__dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da6ce37f8d7007a2bebc6bb17aa382bf9e" prot="public">
          <name>white</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="new__dfs__range_8hpp_1a1bf11385241ca57016ff59f70db0bb1da5f71b8ad682edd04560a42f8f6e51b33" prot="public">
          <name>grey</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/new_dfs_range.hpp" line="25" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/new_dfs_range.hpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="enum" id="boykov__kolmogorov_8hpp_1a24b71fbce3e7347201413c06d7e79ccc" prot="public" static="no" strong="yes">
        <type>bool</type>
        <name>tree_mem</name>
        <qualifiedname>nw::graph::tree_mem</qualifiedname>
        <enumvalue id="boykov__kolmogorov_8hpp_1a24b71fbce3e7347201413c06d7e79ccca36cd38f49b9afa08222c0dc9ebfe35eb" prot="public">
          <name>source</name>
          <initializer>= false</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="boykov__kolmogorov_8hpp_1a24b71fbce3e7347201413c06d7e79cccab4dad0fe5fbef2c0e24d9db1cc69e5a2" prot="public">
          <name>term</name>
          <initializer>= true</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/boykov_kolmogorov.hpp" line="30" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/boykov_kolmogorov.hpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="enum" id="max__flow_8hpp_1a6778b947b3278f0f2a67740e6cef539c" prot="public" static="no" strong="yes">
        <type></type>
        <name>default_dict</name>
        <qualifiedname>nw::graph::default_dict</qualifiedname>
        <enumvalue id="max__flow_8hpp_1a6778b947b3278f0f2a67740e6cef539cad2779c8d188df1b31c550a7cd30b2725" prot="public">
          <name>capacity_idx</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="max__flow_8hpp_1a6778b947b3278f0f2a67740e6cef539ca6f1efc3a7e184c76212ff917fc70e63f" prot="public">
          <name>flow_idx</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/max_flow.hpp" line="28" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/max_flow.hpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="enum" id="graph__base_8hpp_1ab117e54a0af661e9a2104cdc20833231" prot="public" static="no" strong="yes">
        <type></type>
        <name>succession</name>
        <qualifiedname>nw::graph::succession</qualifiedname>
        <enumvalue id="graph__base_8hpp_1ab117e54a0af661e9a2104cdc20833231ac0d486dd645e1a633aea166f9ad06c95" prot="public">
          <name>successor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="graph__base_8hpp_1ab117e54a0af661e9a2104cdc20833231a5244ea09e9728d0f109d0e65abbfa487" prot="public">
          <name>predecessor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_base.hpp" line="21" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_base.hpp" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="enum" id="graph__base_8hpp_1a671883528471e011f192898dcf7e3ded" prot="public" static="no" strong="yes">
        <type></type>
        <name>directedness</name>
        <qualifiedname>nw::graph::directedness</qualifiedname>
        <enumvalue id="graph__base_8hpp_1a671883528471e011f192898dcf7e3dedabc26cd8237a1f32814d687d6745880db" prot="public">
          <name>undirected</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="graph__base_8hpp_1a671883528471e011f192898dcf7e3deda42e55a2462c0d3774dba7cba6835ff52" prot="public">
          <name>directed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_base.hpp" line="22" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_base.hpp" bodystart="22" bodyend="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="adjacency_8hpp_1a4508c10bf50f41e9fd05f66894c1165e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>&lt; idx, default_index_t, default_vertex_id_type, Attributes... &gt;</type>
        <definition>using nw::graph::adjacency = typedef index_adjacency&lt;idx, default_index_t, default_vertex_id_type, Attributes...&gt;</definition>
        <argsstring></argsstring>
        <name>adjacency</name>
        <qualifiedname>nw::graph::adjacency</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="128" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="adjacency_8hpp_1ae4f92b50517a0b055fbb95c1358a1f05" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>&lt; idx, default_index_t, default_vertex_id_type, Attributes... &gt;</type>
        <definition>using nw::graph::biadjacency = typedef index_biadjacency&lt;idx, default_index_t, default_vertex_id_type, Attributes...&gt;</definition>
        <argsstring></argsstring>
        <name>biadjacency</name>
        <qualifiedname>nw::graph::biadjacency</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="205" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="k__core_8hpp_1a9fb00568675aabe420230df7bc355069" prot="public" static="no">
        <type>std::pair&lt; size_t, size_t &gt;</type>
        <definition>using nw::graph::Neighbors = typedef std::pair&lt;size_t, size_t&gt;</definition>
        <argsstring></argsstring>
        <name>Neighbors</name>
        <qualifiedname>nw::graph::Neighbors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/k_core.hpp" line="37" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/k_core.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="k__core_8hpp_1a0627371560ed66e724578f1958dece51" prot="public" static="no">
        <type>std::unordered_map&lt; Neighbors, bool, <ref refid="structnw_1_1graph_1_1pair__hash" kindref="compound">pair_hash</ref> &gt;</type>
        <definition>using nw::graph::Unordered_map = typedef std::unordered_map&lt;Neighbors, bool, pair_hash&gt;</definition>
        <argsstring></argsstring>
        <name>Unordered_map</name>
        <qualifiedname>nw::graph::Unordered_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/k_core.hpp" line="38" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/k_core.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="build_8hpp_1a1ae6ff6f31a9a2212ea5236a1c5ec196" prot="public" static="no">
        <type>std::execution::parallel_unsequenced_policy</type>
        <definition>using nw::graph::default_execution_policy = typedef std::execution::parallel_unsequenced_policy</definition>
        <argsstring></argsstring>
        <name>default_execution_policy</name>
        <qualifiedname>nw::graph::default_execution_policy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="45" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="coo_8hpp_1ab402428a967a7d72a4fea915eff770f9" prot="public" static="no">
        <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">edge_list</ref>&lt; directedness::directed &gt;</type>
        <definition>using nw::graph::coo_graph = typedef edge_list&lt;directedness::directed&gt;</definition>
        <argsstring></argsstring>
        <name>coo_graph</name>
        <qualifiedname>nw::graph::coo_graph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/coo.hpp" line="20" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/coo.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="coo_8hpp_1a956becc70710fdc6f7df32aabe353111" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">edge_list</ref>&lt; directedness::directed, T &gt;</type>
        <definition>using nw::graph::coo_matrix = typedef edge_list&lt;directedness::directed, T&gt;</definition>
        <argsstring></argsstring>
        <name>coo_matrix</name>
        <qualifiedname>nw::graph::coo_matrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/coo.hpp" line="23" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/coo.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="csc_8hpp_1a2dddcc88754477cbc3ee014e579d3e47" prot="public" static="no">
        <type><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">adjacency</ref>&lt; 1 &gt;</type>
        <definition>using nw::graph::csc_graph = typedef adjacency&lt;1&gt;</definition>
        <argsstring></argsstring>
        <name>csc_graph</name>
        <qualifiedname>nw::graph::csc_graph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/csc.hpp" line="20" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/csc.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="csc_8hpp_1acd78edf8909973ff73907c7ed94f041b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">adjacency</ref>&lt; 1, T &gt;</type>
        <definition>using nw::graph::csc_matrix = typedef adjacency&lt;1, T&gt;</definition>
        <argsstring></argsstring>
        <name>csc_matrix</name>
        <qualifiedname>nw::graph::csc_matrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/csc.hpp" line="23" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/csc.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="csr_8hpp_1a58e1567c9e515ad9ad8ce15ea9151c19" prot="public" static="no">
        <type><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">adjacency</ref>&lt; 0 &gt;</type>
        <definition>using nw::graph::csr_graph = typedef adjacency&lt;0&gt;</definition>
        <argsstring></argsstring>
        <name>csr_graph</name>
        <qualifiedname>nw::graph::csr_graph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/csr.hpp" line="20" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/csr.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="csr_8hpp_1aa22ef7b4b41b6affd06b9960bc22410b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">adjacency</ref>&lt; 0, T &gt;</type>
        <definition>using nw::graph::csr_matrix = typedef adjacency&lt;0, T&gt;</definition>
        <argsstring></argsstring>
        <name>csr_matrix</name>
        <qualifiedname>nw::graph::csr_matrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/csr.hpp" line="23" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/csr.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="edge__list_8hpp_1ad8567a913059ce72983671e887093f58" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>directedness</type>
            <declname>edge_directedness</declname>
            <defname>edge_directedness</defname>
            <defval>directedness::undirected</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">index_edge_list</ref>&lt; default_vertex_id_type, <ref refid="classnw_1_1graph_1_1unipartite__graph__base" kindref="compound">unipartite_graph_base</ref>, edge_directedness, Attributes... &gt;</type>
        <definition>using nw::graph::edge_list = typedef index_edge_list&lt;default_vertex_id_type, unipartite_graph_base, edge_directedness, Attributes...&gt;</definition>
        <argsstring></argsstring>
        <name>edge_list</name>
        <qualifiedname>nw::graph::edge_list</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" line="225" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="edge__list_8hpp_1acb99fa2b22c0dc238eae9ae290d026f9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>directedness</type>
            <declname>edge_directedness</declname>
            <defname>edge_directedness</defname>
            <defval>directedness::directed</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">index_edge_list</ref>&lt; default_vertex_id_type, <ref refid="classnw_1_1graph_1_1bipartite__graph__base" kindref="compound">bipartite_graph_base</ref>, edge_directedness, Attributes... &gt;</type>
        <definition>using nw::graph::bi_edge_list = typedef index_edge_list&lt;default_vertex_id_type, bipartite_graph_base, edge_directedness, Attributes...&gt;</definition>
        <argsstring></argsstring>
        <name>bi_edge_list</name>
        <qualifiedname>nw::graph::bi_edge_list</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" line="228" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="graph__concepts_8hpp_1a82fba6d5e63a665eb001794542df9142" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>std::ranges::range_value_t&lt; G &gt;</type>
        <definition>using nw::graph::inner_range_t = typedef std::ranges::range_value_t&lt;G&gt;</definition>
        <argsstring></argsstring>
        <name>inner_range_t</name>
        <qualifiedname>nw::graph::inner_range_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="42" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="graph__concepts_8hpp_1a22841535e0eeb0afd67ac37de39d2207" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::ranges::begin(std::declval&lt; T &amp; &gt;()))</type>
        <definition>using nw::graph::iterator_t = typedef decltype(std::ranges::begin(std::declval&lt;T&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>iterator_t</name>
        <qualifiedname>nw::graph::iterator_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="45" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="graph__concepts_8hpp_1a9643d7168d066d5ef64f922cb4f71645" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::ranges::cbegin(std::declval&lt; T &amp; &gt;()))</type>
        <definition>using nw::graph::const_iterator_t = typedef decltype(std::ranges::cbegin(std::declval&lt;T&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>const_iterator_t</name>
        <qualifiedname>nw::graph::const_iterator_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="48" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="graph__concepts_8hpp_1a34d86d1f46fb80fa71d243ae82423ed3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>iterator_t&lt; inner_range_t&lt; G &gt; &gt;</type>
        <definition>using nw::graph::inner_iterator_t = typedef iterator_t&lt;inner_range_t&lt;G&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>inner_iterator_t</name>
        <qualifiedname>nw::graph::inner_iterator_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="51" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="graph__concepts_8hpp_1a631084a919981e6fab7f3f9aa87ddafa" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>const_iterator_t&lt; inner_range_t&lt; G &gt; &gt;</type>
        <definition>using nw::graph::inner_const_iterator_t = typedef const_iterator_t&lt;inner_range_t&lt;G&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>inner_const_iterator_t</name>
        <qualifiedname>nw::graph::inner_const_iterator_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="54" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="graph__concepts_8hpp_1ad2869b2f8b629c22701be6bca243361c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>std::ranges::range_value_t&lt; inner_range_t&lt; G &gt; &gt;</type>
        <definition>using nw::graph::inner_value_t = typedef std::ranges::range_value_t&lt;inner_range_t&lt;G&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>inner_value_t</name>
        <qualifiedname>nw::graph::inner_value_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="63" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="graph__concepts_8hpp_1a07f2f71b4b6909ab20ef5d87540870a7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>decltype(nth_cdr&lt; 1 &gt;(inner_value_t&lt; G &gt;{}))</type>
        <definition>using nw::graph::attributes_t = typedef decltype(nth_cdr&lt;1&gt;(inner_value_t&lt;G&gt;{}))</definition>
        <argsstring></argsstring>
        <name>attributes_t</name>
        <qualifiedname>nw::graph::attributes_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="77" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="graph__traits_8hpp_1a1ef12b1270e442b62aa03d3ce92cd4f5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt; G &gt;::vertex_id_type</type>
        <definition>using nw::graph::vertex_id_t = typedef typename graph_traits&lt;G&gt;::vertex_id_type</definition>
        <argsstring></argsstring>
        <name>vertex_id_t</name>
        <qualifiedname>nw::graph::vertex_id_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_traits.hpp" line="35" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_traits.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="defaults_8hpp_1a2769b786e30a1599704a0d758cdd72b2" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using nw::graph::default_vertex_id_type = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>default_vertex_id_type</name>
        <qualifiedname>nw::graph::default_vertex_id_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/defaults.hpp" line="21" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/defaults.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="defaults_8hpp_1ab793c0487f8326ffccbbd32d86330469" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using nw::graph::default_index_t = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>default_index_t</name>
        <qualifiedname>nw::graph::default_index_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/defaults.hpp" line="22" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/defaults.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="disjoint__set_8hpp_1a8608c11e78d3bffcc3c2021e1f978b3e" prot="public" static="no">
        <type>default_vertex_id_type</type>
        <definition>typedef size_t nw::graph::vertex_id_type</definition>
        <argsstring></argsstring>
        <name>vertex_id_type</name>
        <qualifiedname>nw::graph::vertex_id_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/disjoint_set.hpp" line="35" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/disjoint_set.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="traits_8hpp_1a1ca0e91ca64e9d47cf72d2ca6e06aa57" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structnw_1_1graph_1_1remove__atomic" kindref="compound">remove_atomic</ref>&lt; T &gt;::type</type>
        <definition>using nw::graph::remove_atomic_t = typedef typename remove_atomic&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_atomic_t</name>
        <qualifiedname>nw::graph::remove_atomic_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/traits.hpp" line="45" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/traits.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="util_8hpp_1a4c817bff76fdada4bb42c7a2c25e6aae" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>decltype(select&lt; Is... &gt;(std::declval&lt; Tuple &gt;()))</type>
        <definition>using nw::graph::select_t = typedef decltype(select&lt;Is...&gt;(std::declval&lt;Tuple&gt;()))</definition>
        <argsstring></argsstring>
        <name>select_t</name>
        <qualifiedname>nw::graph::select_t</qualifiedname>
        <briefdescription>
<para>Meta-function to get the type of a tuple after selection (see <computeroutput>select</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="120" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="vofos_8hpp_1aada45cde9cd421f1d745a5545df1c95f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__adj__flist" kindref="compound">index_adj_flist</ref>&lt; idx, default_vertex_id_type, Attributes... &gt;</type>
        <definition>using nw::graph::adj_flist = typedef index_adj_flist&lt;idx, default_vertex_id_type, Attributes...&gt;</definition>
        <argsstring></argsstring>
        <name>adj_flist</name>
        <qualifiedname>nw::graph::adj_flist</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/vofos.hpp" line="88" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/vofos.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="volos_8hpp_1af036f5a9beefea95d938b45e7f5b4cdd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__adj__list" kindref="compound">index_adj_list</ref>&lt; idx, default_vertex_id_type, Attributes... &gt;</type>
        <definition>using nw::graph::adj_list = typedef index_adj_list&lt;idx, default_vertex_id_type, Attributes...&gt;</definition>
        <argsstring></argsstring>
        <name>adj_list</name>
        <qualifiedname>nw::graph::adj_list</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/volos.hpp" line="88" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/volos.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="vovos_8hpp_1af12ce53461696a9ffc87941cf90d1182" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__vov" kindref="compound">index_vov</ref>&lt; idx, default_vertex_id_type, Attributes... &gt;</type>
        <definition>using nw::graph::vov = typedef index_vov&lt;idx, default_vertex_id_type, Attributes...&gt;</definition>
        <argsstring></argsstring>
        <name>vov</name>
        <qualifiedname>nw::graph::vov</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/vovos.hpp" line="83" column="1" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/vovos.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="boykov__kolmogorov_8hpp_1a6cbd457eb96a295006ece2f69d6a41ef" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t nw::graph::INFINITE_D</definition>
        <argsstring></argsstring>
        <name>INFINITE_D</name>
        <qualifiedname>nw::graph::INFINITE_D</qualifiedname>
        <initializer>= 100000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/boykov_kolmogorov.hpp" line="28" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/boykov_kolmogorov.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="max__flow_8hpp_1ab881649a795b99483956b7fec995bf27" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int nw::graph::DEFAULT_MAX</definition>
        <argsstring></argsstring>
        <name>DEFAULT_MAX</name>
        <qualifiedname>nw::graph::DEFAULT_MAX</qualifiedname>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/max_flow.hpp" line="27" column="12" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/max_flow.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="compressed_8hpp_1ace47ecc7fa5f37becedd0f9ab7cf0919" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nw::graph::g_debug_compressed</definition>
        <argsstring></argsstring>
        <name>g_debug_compressed</name>
        <qualifiedname>nw::graph::g_debug_compressed</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/containers/compressed.hpp" line="50" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/containers/compressed.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="compressed_8hpp_1a7298f847d9b7704340dabc41d08c4463" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nw::graph::g_time_compressed</definition>
        <argsstring></argsstring>
        <name>g_time_compressed</name>
        <qualifiedname>nw::graph::g_time_compressed</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/containers/compressed.hpp" line="51" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/containers/compressed.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="edge__list_8hpp_1a9ac91a005f4723893bb1cdb69091b9db" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool nw::graph::g_debug_edge_list</definition>
        <argsstring></argsstring>
        <name>g_debug_edge_list</name>
        <qualifiedname>nw::graph::g_debug_edge_list</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" line="48" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="edge__list_8hpp_1a2e191732fcce2c5111a8a716dff9b576" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool nw::graph::g_time_edge_list</definition>
        <argsstring></argsstring>
        <name>g_time_edge_list</name>
        <qualifiedname>nw::graph::g_time_edge_list</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" line="49" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="traits_8hpp_1ad080c1231e32a75bd646d69cbdb98b10" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool nw::graph::is_atomic_v&lt; std::atomic_ref&lt; T &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_atomic_v</name>
        <qualifiedname>nw::graph::is_atomic_v</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/traits.hpp" line="25" column="23" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/traits.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="traits_8hpp_1a17fc5edc05c4df0ffeef2b20742e8904" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool nw::graph::is_tbb_range_v&lt; tbb::blocked_range&lt; T &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_tbb_range_v</name>
        <qualifiedname>nw::graph::is_tbb_range_v</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/traits.hpp" line="48" column="23" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/traits.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="traits_8hpp_1a1897e8b97b20394ebf0de646e6be093d" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool nw::graph::is_tuple_v&lt; std::tuple&lt; Ts... &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_tuple_v</name>
        <qualifiedname>nw::graph::is_tuple_v</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/traits.hpp" line="53" column="23" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/traits.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="traits_8hpp_1a93b92eb718a2af4026eb0887a1ccf3b5" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool nw::graph::is_iterator_v</definition>
        <argsstring></argsstring>
        <name>is_iterator_v</name>
        <qualifiedname>nw::graph::is_iterator_v</qualifiedname>
        <initializer>= <ref refid="structnw_1_1graph_1_1is__iterator" kindref="compound">is_iterator</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/traits.hpp" line="67" column="23" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/traits.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="util__par_8hpp_1a46c00e7e6304c88b46671b6489be6a74" prot="public" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex nw::graph::mtx</definition>
        <argsstring></argsstring>
        <name>mtx</name>
        <qualifiedname>nw::graph::mtx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util_par.hpp" line="24" column="12" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util_par.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cyclic__neighbor__range_8hpp_1aeb71e81e4bd9ae1ec50bc2e4973acee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Range</type>
          </param>
          <param>
            <type>class Cutoff</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nw::graph::cyclic_neighbor_range</definition>
        <argsstring>(Range range, Cutoff) -&gt; cyclic_neighbor_range&lt; decltype(range.begin())&gt;</argsstring>
        <name>cyclic_neighbor_range</name>
        <qualifiedname>nw::graph::cyclic_neighbor_range</qualifiedname>
        <param>
          <type>Range</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Cutoff</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/cyclic_neighbor_range.hpp" line="110" column="1" declfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/cyclic_neighbor_range.hpp" declline="110" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="cyclic__range__adapter_8hpp_1a14f91cbc9a077bce27ebbc5aa7c33b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Range</type>
          </param>
          <param>
            <type>class Cutoff</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nw::graph::cyclic_range_adapter</definition>
        <argsstring>(Range &amp;&amp;range, Cutoff) -&gt; cyclic_range_adapter&lt; decltype(range.begin())&gt;</argsstring>
        <name>cyclic_range_adapter</name>
        <qualifiedname>nw::graph::cyclic_range_adapter</qualifiedname>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Cutoff</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/cyclic_range_adapter.hpp" line="98" column="1" declfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/cyclic_range_adapter.hpp" declline="98" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="cyclic__range__adapter_8hpp_1a79de6ef0bf4faeb4e89bc667e815b5de" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Range</type>
          </param>
          <param>
            <type>class Cutoff</type>
          </param>
        </templateparamlist>
        <type>constexpr decltype(auto)</type>
        <definition>constexpr decltype(auto) nw::graph::cyclic</definition>
        <argsstring>(Range &amp;&amp;range, Cutoff cutoff)</argsstring>
        <name>cyclic</name>
        <qualifiedname>nw::graph::cyclic</qualifiedname>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Cutoff</type>
          <declname>cutoff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/cyclic_range_adapter.hpp" line="101" column="20" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/cyclic_range_adapter.hpp" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="edge__range_8hpp_1a572ebf3e8b6ef0fa1a0e87ce0f65c65d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
          <param>
            <type>class Graph</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1edge__range" kindref="compound">edge_range</ref>&lt; Graph, Is... &gt;</type>
        <definition>static edge_range&lt; Graph, Is... &gt; nw::graph::make_edge_range</definition>
        <argsstring>(Graph &amp;g, std::size_t offset)</argsstring>
        <name>make_edge_range</name>
        <qualifiedname>nw::graph::make_edge_range</qualifiedname>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/edge_range.hpp" line="173" column="26" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/edge_range.hpp" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="edge__range_8hpp_1a546e53fab292eaec4bf35b089fb67eb3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
          <param>
            <type>class Graph</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1edge__range" kindref="compound">edge_range</ref>&lt; Graph, Is... &gt;</type>
        <definition>static edge_range&lt; Graph, Is... &gt; nw::graph::make_edge_range</definition>
        <argsstring>(Graph &amp;g)</argsstring>
        <name>make_edge_range</name>
        <qualifiedname>nw::graph::make_edge_range</qualifiedname>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/edge_range.hpp" line="178" column="26" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/edge_range.hpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="edge__range_8hpp_1a6ffcc7916489ac205fee0f1997bb5f4a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
          <param>
            <type>class Graph</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1edge__range" kindref="compound">edge_range</ref>&lt; Graph, Is... &gt;</type>
        <definition>static edge_range&lt; Graph, Is... &gt; nw::graph::make_edge_range</definition>
        <argsstring>(Graph &amp;&amp;g)</argsstring>
        <name>make_edge_range</name>
        <qualifiedname>nw::graph::make_edge_range</qualifiedname>
        <param>
          <type>Graph &amp;&amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/edge_range.hpp" line="183" column="26" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/edge_range.hpp" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="neighbor__range_8hpp_1adb27ca5809227810d837632bcc653f67" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1neighbor__range" kindref="compound">neighbor_range</ref>&lt; Graph, Is... &gt;</type>
        <definition>static neighbor_range&lt; Graph, Is... &gt; nw::graph::make_neighbor_range</definition>
        <argsstring>(Graph &amp;g, std::size_t offset)</argsstring>
        <name>make_neighbor_range</name>
        <qualifiedname>nw::graph::make_neighbor_range</qualifiedname>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/neighbor_range.hpp" line="117" column="30" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/neighbor_range.hpp" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="neighbor__range_8hpp_1adb884da6b1261f9947f35fe530dff447" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1neighbor__range" kindref="compound">neighbor_range</ref>&lt; Graph, Is... &gt;</type>
        <definition>static neighbor_range&lt; Graph, Is... &gt; nw::graph::make_neighbor_range</definition>
        <argsstring>(Graph &amp;g)</argsstring>
        <name>make_neighbor_range</name>
        <qualifiedname>nw::graph::make_neighbor_range</qualifiedname>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/neighbor_range.hpp" line="122" column="30" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/neighbor_range.hpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="plain__range_8hpp_1a6a9b7ef1354fc746c9f9ece7708d6ee5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1plain__range" kindref="compound">plain_range</ref>&lt; Graph, Is... &gt;</type>
        <definition>static plain_range&lt; Graph, Is... &gt; nw::graph::make_plain_range</definition>
        <argsstring>(Graph &amp;g, std::size_t offset)</argsstring>
        <name>make_plain_range</name>
        <qualifiedname>nw::graph::make_plain_range</qualifiedname>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/plain_range.hpp" line="126" column="27" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/plain_range.hpp" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="plain__range_8hpp_1a07625d3d75a1246a5f63e9b5b1a66114" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1plain__range" kindref="compound">plain_range</ref>&lt; Graph, Is... &gt;</type>
        <definition>static plain_range&lt; Graph, Is... &gt; nw::graph::make_plain_range</definition>
        <argsstring>(Graph &amp;g)</argsstring>
        <name>make_plain_range</name>
        <qualifiedname>nw::graph::make_plain_range</qualifiedname>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/plain_range.hpp" line="131" column="27" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/plain_range.hpp" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="splittable__range__adapter_8hpp_1a9525fcc9212ee8523a9ec1a6f98b3e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Range</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nw::graph::splittable_range_adapter</definition>
        <argsstring>(Range &amp;&amp;range) -&gt; splittable_range_adapter&lt; decltype(range.begin())&gt;</argsstring>
        <name>splittable_range_adapter</name>
        <qualifiedname>nw::graph::splittable_range_adapter</qualifiedname>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/splittable_range_adapter.hpp" line="74" column="1" declfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/splittable_range_adapter.hpp" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="splittable__range__adapter_8hpp_1a2fcea49d7dc03e977607e237a65ee05d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Range</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nw::graph::splittable_range_adapter</definition>
        <argsstring>(Range &amp;&amp;range, std::size_t) -&gt; splittable_range_adapter&lt; decltype(range.begin())&gt;</argsstring>
        <name>splittable_range_adapter</name>
        <qualifiedname>nw::graph::splittable_range_adapter</qualifiedname>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/splittable_range_adapter.hpp" line="77" column="1" declfile="/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/splittable_range_adapter.hpp" declline="77" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="adjacency_8hpp_1a6a7a80dd7aea910ad6a0353d07afb194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_adjacency</definition>
        <argsstring>(edge_list_t &amp;el)</argsstring>
        <name>make_adjacency</name>
        <qualifiedname>nw::graph::make_adjacency</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="131" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="adjacency_8hpp_1adc301aae06611f1e780ce0bdd98fcf18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_c</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>u_integral</declname>
            <defname>u_integral</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>std::execution::parallel_unsequenced_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_adjacency</definition>
        <argsstring>(edge_list_t &amp;el, u_integral n, directedness edge_directedness=directedness::directed, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>make_adjacency</name>
        <qualifiedname>nw::graph::make_adjacency</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>u_integral</type>
          <declname>n</declname>
        </param>
        <param>
          <type>directedness</type>
          <declname>edge_directedness</declname>
          <defval>directedness::directed</defval>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="137" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="adjacency_8hpp_1ab8aeec1bfda1c9803cacc8e780d0e0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_biadjacency</definition>
        <argsstring>(edge_list_t &amp;el)</argsstring>
        <name>make_biadjacency</name>
        <qualifiedname>nw::graph::make_biadjacency</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="208" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="adjacency_8hpp_1a5ab961ac9932c8cc3996e346b162d72e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_c</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>u_integral</declname>
            <defname>u_integral</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>std::execution::parallel_unsequenced_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_biadjacency</definition>
        <argsstring>(edge_list_t &amp;el, u_integral n0, u_integral n1, directedness edge_directedness=directedness::directed, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>make_biadjacency</name>
        <qualifiedname>nw::graph::make_biadjacency</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>u_integral</type>
          <declname>n0</declname>
        </param>
        <param>
          <type>u_integral</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>directedness</type>
          <declname>edge_directedness</declname>
          <defval>directedness::directed</defval>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="214" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="214" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="adjacency_8hpp_1a765aa22c4d8b1265042d5e23361a3188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>index_type</declname>
            <defname>index_type</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>vertex_id_type</declname>
            <defname>vertex_id_type</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const num_vertices_tag, const index_adjacency&lt; idx, index_type, vertex_id_type, Attributes... &gt; &amp;g)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>num_vertices_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>&lt; idx, index_type, vertex_id_type, Attributes... &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="227" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="adjacency_8hpp_1ac3b97cce4da8097222b0d9a1fb390c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>index_type</declname>
            <defname>index_type</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>vertex_id_type</declname>
            <defname>vertex_id_type</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>lookup_type</declname>
            <defname>lookup_type</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const degree_tag, const index_adjacency&lt; idx, index_type, vertex_id_type, Attributes... &gt; &amp;g, lookup_type i)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>degree_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>&lt; idx, index_type, vertex_id_type, Attributes... &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>lookup_type</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="232" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="adjacency_8hpp_1a6a45aeab8b6d4a042aba38d0d1a8f83d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>index_type</declname>
            <defname>index_type</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>vertex_id_type</declname>
            <defname>vertex_id_type</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const degree_tag, const index_adjacency&lt; idx, index_type, vertex_id_type, Attributes... &gt; &amp;g, const typename index_adjacency&lt; idx, index_type, vertex_id_type, Attributes... &gt;::sub_view &amp;v)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>degree_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>&lt; idx, index_type, vertex_id_type, Attributes... &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const typename <ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">index_adjacency</ref>&lt; idx, index_type, vertex_id_type, Attributes... &gt;::sub_view &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="237" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="adjacency_8hpp_1a082f7ed423ecf2274eeb27cecc9262aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>index_type</declname>
            <defname>index_type</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>vertex_id_type</declname>
            <defname>vertex_id_type</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const num_vertices_tag, const index_biadjacency&lt; idx, index_type, vertex_id_type, Attributes... &gt; &amp;g, int jdx=0)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>num_vertices_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>&lt; idx, index_type, vertex_id_type, Attributes... &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jdx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="243" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="adjacency_8hpp_1ab346a5e7188ed541c00ad19c09203394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>index_type</declname>
            <defname>index_type</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>vertex_id_type</declname>
            <defname>vertex_id_type</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>lookup_type</declname>
            <defname>lookup_type</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const degree_tag, const index_biadjacency&lt; idx, index_type, vertex_id_type, Attributes... &gt; &amp;g, lookup_type i)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>degree_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>&lt; idx, index_type, vertex_id_type, Attributes... &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>lookup_type</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="248" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="adjacency_8hpp_1a1b7ff14cffdf453554fbfe97201790fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>index_type</declname>
            <defname>index_type</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>vertex_id_type</declname>
            <defname>vertex_id_type</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const degree_tag, const index_biadjacency&lt; idx, index_type, vertex_id_type, Attributes... &gt; &amp;g, const typename index_biadjacency&lt; idx, index_type, vertex_id_type, Attributes... &gt;::sub_view &amp;v)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>degree_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>&lt; idx, index_type, vertex_id_type, Attributes... &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const typename <ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">index_biadjacency</ref>&lt; idx, index_type, vertex_id_type, Attributes... &gt;::sub_view &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="253" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="adjacency_8hpp_1a5f4dffb884e964193d002f3f68ea3813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const degree_tag, const splittable_range_adapter&lt; Iterator &gt; &amp;n)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>degree_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classnw_1_1graph_1_1splittable__range__adapter" kindref="compound">splittable_range_adapter</ref>&lt; Iterator &gt; &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" line="259" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp" bodystart="259" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2betweenness__centrality_8hpp_1a6484a139a508aa031a0ba004cebf3746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class score_t</type>
          </param>
          <param>
            <type>class accum_t</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nw::graph::BCVerifier</definition>
        <argsstring>(const Graph &amp;g, std::vector&lt; typename graph_traits&lt; Graph &gt;::vertex_id_type &gt; &amp;trial_sources, std::vector&lt; score_t &gt; &amp;scores_to_test)</argsstring>
        <name>BCVerifier</name>
        <qualifiedname>nw::graph::BCVerifier</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; typename <ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt; Graph &gt;::vertex_id_type &gt; &amp;</type>
          <declname>trial_sources</declname>
        </param>
        <param>
          <type>std::vector&lt; score_t &gt; &amp;</type>
          <declname>scores_to_test</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/betweenness_centrality.hpp" line="56" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/betweenness_centrality.hpp" bodystart="56" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2betweenness__centrality_8hpp_1ad8c9f8c3b6a366c67cd42a68dcc052de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename score_t</type>
            <defval>float</defval>
          </param>
          <param>
            <type>typename accum_t</type>
            <defval>size_t</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; score_t &gt;</type>
        <definition>std::vector&lt; score_t &gt; nw::graph::betweenness_brandes</definition>
        <argsstring>(const Graph &amp;G, bool normalize=true)</argsstring>
        <name>betweenness_brandes</name>
        <qualifiedname>nw::graph::betweenness_brandes</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>G</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/betweenness_centrality.hpp" line="127" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/betweenness_centrality.hpp" bodystart="127" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2betweenness__centrality_8hpp_1a820cc1b4eb6370b2c70a87c7303ebe1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class score_t</type>
          </param>
          <param>
            <type>class accum_t</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class OuterExecutionPolicy</type>
            <defval>std::execution::parallel_unsequenced_policy</defval>
          </param>
          <param>
            <type>class InnerExecutionPolicy</type>
            <defval>std::execution::parallel_unsequenced_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bc2_v5</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;sources, int threads, OuterExecutionPolicy &amp;&amp;outer_policy={}, InnerExecutionPolicy &amp;&amp;inner_policy={}, bool normalize=true)</argsstring>
        <name>bc2_v5</name>
        <qualifiedname>nw::graph::bc2_v5</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threads</declname>
        </param>
        <param>
          <type>OuterExecutionPolicy &amp;&amp;</type>
          <declname>outer_policy</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>InnerExecutionPolicy &amp;&amp;</type>
          <declname>inner_policy</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/betweenness_centrality.hpp" line="186" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/betweenness_centrality.hpp" bodystart="186" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2bfs_8hpp_1a6664953d0f9f4fbb42c960e3611e5b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>GraphT</declname>
            <defname>GraphT</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nw::graph::BFSVerifier</definition>
        <argsstring>(const Graph &amp;g, GraphT &amp;g_t, vertex_id_t&lt; Graph &gt; source, std::vector&lt; vertex_id_t&lt; Graph &gt; &gt; &amp;parent)</argsstring>
        <name>BFSVerifier</name>
        <qualifiedname>nw::graph::BFSVerifier</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>GraphT &amp;</type>
          <declname>g_t</declname>
        </param>
        <param>
          <type>vertex_id_t&lt; Graph &gt;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>std::vector&lt; vertex_id_t&lt; Graph &gt; &gt; &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/bfs.hpp" line="43" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/bfs.hpp" bodystart="43" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2bfs_8hpp_1aa6bf3758d8503e6e98efaa2f9f335223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bfs_v0</definition>
        <argsstring>(const Graph &amp;graph, vertex_id_t&lt; Graph &gt; root)</argsstring>
        <name>bfs_v0</name>
        <qualifiedname>nw::graph::bfs_v0</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>vertex_id_t&lt; Graph &gt;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Breadth-First Search. </para>
        </briefdescription>
        <detaileddescription>
<para>Perform breadth-first search of a graph.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph to be searched. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting vertex. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The parent list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/bfs.hpp" line="107" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/bfs.hpp" bodystart="107" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2bfs_8hpp_1a1c7b079bac5bfaf054717bb756b14878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>OutGraph</declname>
            <defname>OutGraph</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>InGraph</declname>
            <defname>InGraph</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bfs_v11</definition>
        <argsstring>(const OutGraph &amp;out_graph, const InGraph &amp;in_graph, vertex_id_t&lt; OutGraph &gt; root, int num_bins=32, int alpha=15, int beta=18)</argsstring>
        <name>bfs_v11</name>
        <qualifiedname>nw::graph::bfs_v11</qualifiedname>
        <param>
          <type>const OutGraph &amp;</type>
          <declname>out_graph</declname>
        </param>
        <param>
          <type>const InGraph &amp;</type>
          <declname>in_graph</declname>
        </param>
        <param>
          <type>vertex_id_t&lt; OutGraph &gt;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_bins</declname>
          <defval>32</defval>
        </param>
        <param>
          <type>int</type>
          <declname>alpha</declname>
          <defval>15</defval>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
          <defval>18</defval>
        </param>
        <briefdescription>
<para>Parallel Breadth-First Search. </para>
        </briefdescription>
        <detaileddescription>
<para>Perform parallel breadth-first search of a graph, using the graph and its transpose</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph to be searched, representing out edges </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The transpose of the graph to be searched, representing in edges </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting vertex. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The parent list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/bfs.hpp" line="150" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/bfs.hpp" bodystart="150" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="boykov__kolmogorov_8hpp_1a9997aaf3e985d145fdf83370d4073098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; double, std::vector&lt; tree_mem &gt; &gt;</type>
        <definition>std::tuple&lt; double, std::vector&lt; tree_mem &gt; &gt; nw::graph::bk_maxflow</definition>
        <argsstring>(const Graph &amp;A, std::vector&lt; double &gt; &amp;cap)</argsstring>
        <name>bk_maxflow</name>
        <qualifiedname>nw::graph::bk_maxflow</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>cap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/boykov_kolmogorov.hpp" line="33" column="12" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/boykov_kolmogorov.hpp" bodystart="33" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2connected__components_8hpp_1a0f336eb899df5739f3eb8b05ab0fcc31" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class Transpose</type>
          </param>
          <param>
            <type>class Vector</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool nw::graph::CCVerifier</definition>
        <argsstring>(const Graph &amp;graph, Transpose &amp;&amp;xpose, Vector &amp;&amp;comp)</argsstring>
        <name>CCVerifier</name>
        <qualifiedname>nw::graph::CCVerifier</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>Transpose &amp;&amp;</type>
          <declname>xpose</declname>
        </param>
        <param>
          <type>Vector &amp;&amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/connected_components.hpp" line="41" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/connected_components.hpp" bodystart="41" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2connected__components_8hpp_1afe62d1a8f2496098887c318eaf549505" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void nw::graph::link</definition>
        <argsstring>(T u, T v, Vector &amp;comp)</argsstring>
        <name>link</name>
        <qualifiedname>nw::graph::link</qualifiedname>
        <param>
          <type>T</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Vector &amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/connected_components.hpp" line="95" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/connected_components.hpp" bodystart="95" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2connected__components_8hpp_1a22ec75ad908b35f65f8f761e975edec5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Execution</type>
          </param>
          <param>
            <type>typename Vector</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void nw::graph::compress</definition>
        <argsstring>(Execution exec, Vector &amp;comp)</argsstring>
        <name>compress</name>
        <qualifiedname>nw::graph::compress</qualifiedname>
        <param>
          <type>Execution</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>Vector &amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/connected_components.hpp" line="110" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/connected_components.hpp" bodystart="110" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2connected__components_8hpp_1ad60768f8447dc893d1c3c376bbe49067" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T nw::graph::sample_frequent_element</definition>
        <argsstring>(const Vector &amp;comp, size_t num_samples=1024)</argsstring>
        <name>sample_frequent_element</name>
        <qualifiedname>nw::graph::sample_frequent_element</qualifiedname>
        <param>
          <type>const Vector &amp;</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_samples</declname>
          <defval>1024</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/connected_components.hpp" line="121" column="10" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/connected_components.hpp" bodystart="121" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2connected__components_8hpp_1aa6e27615ce07e57c49af287cd45dc455" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Execution</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph1</declname>
            <defname>Graph1</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph2</declname>
            <defname>Graph2</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto nw::graph::afforest</definition>
        <argsstring>(Execution &amp;exec, Graph1 &amp;graph, Graph2 &amp;t_graph, const size_t neighbor_rounds=2)</argsstring>
        <name>afforest</name>
        <qualifiedname>nw::graph::afforest</qualifiedname>
        <param>
          <type>Execution &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>Graph1 &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>Graph2 &amp;</type>
          <declname>t_graph</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>neighbor_rounds</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/connected_components.hpp" line="138" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/connected_components.hpp" bodystart="138" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="dag__based__mis_8hpp_1a51b58ec671bd1ea87f27169ba383bfc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::dag_based_mis</definition>
        <argsstring>(Graph &amp;A, std::vector&lt; bool &gt; &amp;mis)</argsstring>
        <name>dag_based_mis</name>
        <qualifiedname>nw::graph::dag_based_mis</qualifiedname>
        <param>
          <type>Graph &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>mis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/dag_based_mis.hpp" line="29" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/dag_based_mis.hpp" bodystart="29" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2delta__stepping_8hpp_1a562489fda8079f84197f2d163133d1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class distance_t</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class Id</type>
          </param>
          <param>
            <type>class Weight</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::delta_stepping_m1</definition>
        <argsstring>(const Graph &amp;graph, Id source, distance_t, Weight weight=[](auto &amp;e) -&gt; auto &amp;{ return std::get&lt; 1 &gt;(e);})</argsstring>
        <name>delta_stepping_m1</name>
        <qualifiedname>nw::graph::delta_stepping_m1</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>Id</type>
          <declname>source</declname>
        </param>
        <param>
          <type>distance_t</type>
        </param>
        <param>
          <type>Weight</type>
          <declname>weight</declname>
          <defval>[](auto &amp;e) -&gt; auto &amp;{ return std::get&lt; 1 &gt;(e);}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/delta_stepping.hpp" line="53" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/delta_stepping.hpp" bodystart="53" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2delta__stepping_8hpp_1adb3ec05f858846a3c275eb77ee3f3fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class distance_t</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class Id</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Weight</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::delta_stepping_v0</definition>
        <argsstring>(const Graph &amp;graph, Id source, T delta, Weight weight=[](auto &amp;e) -&gt; auto &amp;{ return std::get&lt; 1 &gt;(e);})</argsstring>
        <name>delta_stepping_v0</name>
        <qualifiedname>nw::graph::delta_stepping_v0</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>Id</type>
          <declname>source</declname>
        </param>
        <param>
          <type>T</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>Weight</type>
          <declname>weight</declname>
          <defval>[](auto &amp;e) -&gt; auto &amp;{ return std::get&lt; 1 &gt;(e);}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/delta_stepping.hpp" line="94" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/delta_stepping.hpp" bodystart="94" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2delta__stepping_8hpp_1a508db3f0c127e8871fb13b4d7e8021fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class distance_t</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class Id</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::delta_stepping_v12</definition>
        <argsstring>(const Graph &amp;graph, Id source, T delta)</argsstring>
        <name>delta_stepping_v12</name>
        <qualifiedname>nw::graph::delta_stepping_v12</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>Id</type>
          <declname>source</declname>
        </param>
        <param>
          <type>T</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/delta_stepping.hpp" line="143" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/delta_stepping.hpp" bodystart="143" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="dijkstra_8hpp_1a882eedcc1a24006f74139afbf6ded412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DistanceT</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>GraphT</declname>
            <defname>GraphT</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; DistanceT &gt;</type>
        <definition>std::vector&lt; DistanceT &gt; nw::graph::dijkstra</definition>
        <argsstring>(const GraphT &amp;graph, vertex_id_t&lt; GraphT &gt; source)</argsstring>
        <name>dijkstra</name>
        <qualifiedname>nw::graph::dijkstra</qualifiedname>
        <param>
          <type>const GraphT &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>vertex_id_t&lt; GraphT &gt;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/dijkstra.hpp" line="30" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/dijkstra.hpp" bodystart="30" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="dijkstra_8hpp_1a0481ad10d9aab0ca7a567b0e20187524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DistanceT</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>std::invocable&lt; inner_value_t&lt; Graph &gt; &gt;</type>
            <declname>Weight</declname>
            <defname>Weight</defname>
            <defval>std::function&lt;std::tuple_element_t&lt;              1, inner_value_t&lt;Graph&gt;&gt;(const inner_value_t&lt;Graph&gt;&amp;)&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::dijkstra_v0</definition>
        <argsstring>(const Graph &amp;graph, vertex_id_t&lt; Graph &gt; source, Weight weight=[](auto &amp;e) { return std::get&lt; 1 &gt;(e);})</argsstring>
        <name>dijkstra_v0</name>
        <qualifiedname>nw::graph::dijkstra_v0</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>vertex_id_t&lt; Graph &gt;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>Weight</type>
          <declname>weight</declname>
          <defval>[](auto &amp;e) { return std::get&lt; 1 &gt;(e);}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/dijkstra.hpp" line="57" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/dijkstra.hpp" bodystart="57" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2jaccard_8hpp_1ad3fe097810cd53ad5a2be94500dffd44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>GraphT</declname>
            <defname>GraphT</defname>
          </param>
          <param>
            <type>typename Weight</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t nw::graph::jaccard_similarity_v0</definition>
        <argsstring>(GraphT &amp;G, Weight weight)</argsstring>
        <name>jaccard_similarity_v0</name>
        <qualifiedname>nw::graph::jaccard_similarity_v0</qualifiedname>
        <param>
          <type>GraphT &amp;</type>
          <declname>G</declname>
        </param>
        <param>
          <type>Weight</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/jaccard.hpp" line="34" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/jaccard.hpp" bodystart="34" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="jones__plassmann__coloring_8hpp_1aa085130a1692de5606b6feaa2d6b25bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::jones_plassmann_coloring</definition>
        <argsstring>(Graph A, std::vector&lt; size_t &gt; &amp;colors)</argsstring>
        <name>jones_plassmann_coloring</name>
        <qualifiedname>nw::graph::jones_plassmann_coloring</qualifiedname>
        <param>
          <type>Graph</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>colors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/jones_plassmann_coloring.hpp" line="28" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/jones_plassmann_coloring.hpp" bodystart="28" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="jones__plassmann__coloring_8hpp_1a01daea273d15a0dc0652320bc8f74381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::jones_plassmann_coloring2</definition>
        <argsstring>(Graph A, std::vector&lt; size_t &gt; &amp;colors)</argsstring>
        <name>jones_plassmann_coloring2</name>
        <qualifiedname>nw::graph::jones_plassmann_coloring2</qualifiedname>
        <param>
          <type>Graph</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>colors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/jones_plassmann_coloring.hpp" line="77" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/jones_plassmann_coloring.hpp" bodystart="77" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="k__core_8hpp_1a533d3f50f715f0a269d65fa0536a2f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Neighbors</type>
        <definition>Neighbors nw::graph::make_my_pair</definition>
        <argsstring>(default_vertex_id_type x, default_vertex_id_type y)</argsstring>
        <name>make_my_pair</name>
        <qualifiedname>nw::graph::make_my_pair</qualifiedname>
        <param>
          <type>default_vertex_id_type</type>
          <declname>x</declname>
        </param>
        <param>
          <type>default_vertex_id_type</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/k_core.hpp" line="40" column="11" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/k_core.hpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="k__core_8hpp_1a2acf2e7ad11a7c186ed0bc725afb168a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Unordered_map, size_t &gt;</type>
        <definition>std::tuple&lt; Unordered_map, size_t &gt; nw::graph::k_core</definition>
        <argsstring>(const Graph &amp;A, int k)</argsstring>
        <name>k_core</name>
        <qualifiedname>nw::graph::k_core</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/k_core.hpp" line="47" column="12" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/k_core.hpp" bodystart="47" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="kruskal_8hpp_1ab6383c1ed77e977f5b44c3bb92f68ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EdgeListT</type>
          </param>
        </templateparamlist>
        <type>EdgeListT</type>
        <definition>EdgeListT nw::graph::kruskal</definition>
        <argsstring>(EdgeListT &amp;E)</argsstring>
        <name>kruskal</name>
        <qualifiedname>nw::graph::kruskal</qualifiedname>
        <param>
          <type>EdgeListT &amp;</type>
          <declname>E</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/kruskal.hpp" line="25" column="11" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/kruskal.hpp" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="kruskal_8hpp_1ac73825f3545df3a6f3a0e3e61bedd4cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EdgeListT</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>EdgeListT</type>
        <definition>EdgeListT nw::graph::kruskal</definition>
        <argsstring>(EdgeListT &amp;E, Compare comp)</argsstring>
        <name>kruskal</name>
        <qualifiedname>nw::graph::kruskal</qualifiedname>
        <param>
          <type>EdgeListT &amp;</type>
          <declname>E</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/kruskal.hpp" line="30" column="11" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/kruskal.hpp" bodystart="30" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="max__flow_8hpp_1aa0bde218584130e9f028d55acbe0cd2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
          <param>
            <type>typename Edge</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::backedge_property</definition>
        <argsstring>(Edge edge)</argsstring>
        <name>backedge_property</name>
        <qualifiedname>nw::graph::backedge_property</qualifiedname>
        <param>
          <type>Edge</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/max_flow.hpp" line="30" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/max_flow.hpp" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="max__flow_8hpp_1a3553cb5a6a816ea591d695ef0f96094d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Dict</type>
            <defval>default_dict</defval>
          </param>
          <param>
            <type>typename flowtype</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>flowtype</type>
        <definition>flowtype nw::graph::max_flow</definition>
        <argsstring>(const Graph &amp;A, vertex_id_type source, vertex_id_type sink, size_t max_iters=DEFAULT_MAX)</argsstring>
        <name>max_flow</name>
        <qualifiedname>nw::graph::max_flow</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>vertex_id_type</type>
          <declname>source</declname>
        </param>
        <param>
          <type>vertex_id_type</type>
          <declname>sink</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iters</declname>
          <defval>DEFAULT_MAX</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/max_flow.hpp" line="35" column="10" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/max_flow.hpp" bodystart="35" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="mis_8hpp_1a457a48ef2d47ae56d87c35595c7778e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::mis_algorithm</definition>
        <argsstring>(const Graph &amp;A, std::vector&lt; size_t &gt; &amp;mis)</argsstring>
        <name>mis_algorithm</name>
        <qualifiedname>nw::graph::mis_algorithm</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>mis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/mis.hpp" line="23" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/mis.hpp" bodystart="23" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2page__rank_8hpp_1af53843c737b57974b72db281efb9c17a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_v11</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, Real damping_factor, Real threshold, size_t max_iters, size_t num_threads)</argsstring>
        <name>page_rank_v11</name>
        <qualifiedname>nw::graph::page_rank_v11</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>damping_factor</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iters</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_threads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/page_rank.hpp" line="67" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/page_rank.hpp" bodystart="67" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="sp_matsp_mat_8hpp_1a6c4605c61931ec52400bcbb9c308b574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarT</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>LGraphT</declname>
            <defname>LGraphT</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>RGraphT</declname>
            <defname>RGraphT</defname>
          </param>
          <param>
            <type>typename MapOpT</type>
            <defval>std::multiplies&lt;ScalarT&gt;</defval>
          </param>
          <param>
            <type>typename ReduceOpT</type>
            <defval>std::plus&lt;ScalarT&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">edge_list</ref>&lt; directedness::directed, ScalarT &gt;</type>
        <definition>edge_list&lt; directedness::directed, ScalarT &gt; nw::graph::spMatspMat</definition>
        <argsstring>(const LGraphT &amp;A, const RGraphT &amp;B)</argsstring>
        <name>spMatspMat</name>
        <qualifiedname>nw::graph::spMatspMat</qualifiedname>
        <param>
          <type>const LGraphT &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const RGraphT &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>cannot currently pass &quot;const &amp;&quot; for A or B </para>
<para>Need to discuss interface options </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/spMatspMat.hpp" line="37" column="11" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/spMatspMat.hpp" bodystart="37" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="sp_matsp_mat_8hpp_1a739b8bba710dae07ebefdd013e6c5dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class Output</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
          <param>
            <type>class Map</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::set_ewise_intersection</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, Output &amp;container, Compare comp, Map map)</argsstring>
        <name>set_ewise_intersection</name>
        <qualifiedname>nw::graph::set_ewise_intersection</qualifiedname>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>last2</declname>
        </param>
        <param>
          <type>Output &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>Map</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/spMatspMat.hpp" line="81" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/spMatspMat.hpp" bodystart="81" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="sp_matsp_mat_8hpp_1a5f20811151b72ce419fb91d99a355d74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarT</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>LGraphT</declname>
            <defname>LGraphT</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>RGraphT</declname>
            <defname>RGraphT</defname>
          </param>
          <param>
            <type>typename MapOpT</type>
            <defval>std::multiplies&lt;ScalarT&gt;</defval>
          </param>
          <param>
            <type>typename ReduceOpT</type>
            <defval>std::plus&lt;ScalarT&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">edge_list</ref>&lt; directedness::directed, ScalarT &gt;</type>
        <definition>edge_list&lt; directedness::directed, ScalarT &gt; nw::graph::spMatspMatT</definition>
        <argsstring>(LGraphT &amp;A, RGraphT &amp;BT)</argsstring>
        <name>spMatspMatT</name>
        <qualifiedname>nw::graph::spMatspMatT</qualifiedname>
        <param>
          <type>LGraphT &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>RGraphT &amp;</type>
          <declname>BT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>cannot currently pass &quot;const &amp;&quot; for A or BT </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/spMatspMat.hpp" line="100" column="11" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/spMatspMat.hpp" bodystart="100" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2triangle__count_8hpp_1aef3b2ff8de556279d2407e08e7a4a99c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>GraphT</declname>
            <defname>GraphT</defname>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t nw::graph::triangle_count_v0</definition>
        <argsstring>(const GraphT &amp;A)</argsstring>
        <name>triangle_count_v0</name>
        <qualifiedname>nw::graph::triangle_count_v0</qualifiedname>
        <param>
          <type>const GraphT &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/triangle_count.hpp" line="35" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/triangle_count.hpp" bodystart="35" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2triangle__count_8hpp_1a5e13d2b5fb9d7b8c289345d809bcca91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Op</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::triangle_count_async</definition>
        <argsstring>(std::size_t threads, Op &amp;&amp;op)</argsstring>
        <name>triangle_count_async</name>
        <qualifiedname>nw::graph::triangle_count_async</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>threads</declname>
        </param>
        <param>
          <type>Op &amp;&amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parallel triangle counting using <computeroutput>std::async</computeroutput>.</para>
<para>This version of triangle counting uses <computeroutput>threads</computeroutput> <computeroutput>std::async</computeroutput> launches to evaluate the passed <computeroutput>op</computeroutput> in parallel. The <computeroutput>op</computeroutput> will be provided the thread id, but should capture any other information required to perform the decomposed work.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Op</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the decomposed work.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The decomposed work for each <computeroutput>std::async</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The += reduced total of counted triangles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/triangle_count.hpp" line="61" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/triangle_count.hpp" bodystart="61" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2triangle__count_8hpp_1ad0c0392b4c4ade90e243bbf34e6b0666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::triangle_count_v4</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last, std::size_t threads=1)</argsstring>
        <name>triangle_count_v4</name>
        <qualifiedname>nw::graph::triangle_count_v4</qualifiedname>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Two-dimensional triangle counting.</para>
<para>This version of triangle counting is explicitly two-dimensional and is optimized (and only correct for) an upper-triangular graph. It uses explicit async threads to perform the parallelization.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RandomAccessIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A random access BGL17 iterator type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the outer range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the outer range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threads</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of threads to use in the parallelization.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of triangles in the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/triangle_count.hpp" line="90" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/triangle_count.hpp" bodystart="90" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_2triangle__count_8hpp_1abee80720e5deac171ebeddf5cd0f8c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::triangle_count_v4a</definition>
        <argsstring>(const Graph &amp;G, std::size_t threads=1)</argsstring>
        <name>triangle_count_v4a</name>
        <qualifiedname>nw::graph::triangle_count_v4a</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>G</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/triangle_count.hpp" line="104" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/triangle_count.hpp" bodystart="104" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1ab567c4856e595e8a52f335c8d37d6f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::sort_by</definition>
        <argsstring>(edge_list_t &amp;el, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>sort_by</name>
        <qualifiedname>nw::graph::sort_by</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="48" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a14ce42d28f38e47945375c0c2226502c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::stable_sort_by</definition>
        <argsstring>(edge_list_t &amp;el, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>stable_sort_by</name>
        <qualifiedname>nw::graph::stable_sort_by</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="54" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a59ad489e1b2ea234a395b1db1b200607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::lexical_sort_by</definition>
        <argsstring>(edge_list_t &amp;el, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>lexical_sort_by</name>
        <qualifiedname>nw::graph::lexical_sort_by</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="59" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="59" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a3dcd992efef4754c59d4e57845f4af14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::lexical_stable_sort_by</definition>
        <argsstring>(edge_list_t &amp;el, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>lexical_stable_sort_by</name>
        <qualifiedname>nw::graph::lexical_stable_sort_by</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="74" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="74" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1ac23a5a3438b1a9af3c547ca584a2c64a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adjacency_t</declname>
            <defname>adjacency_t</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::push_back_fill_helper</definition>
        <argsstring>(adjacency_t &amp;cs, std::tuple&lt; Ts... &gt; const &amp;theTuple)</argsstring>
        <name>push_back_fill_helper</name>
        <qualifiedname>nw::graph::push_back_fill_helper</qualifiedname>
        <param>
          <type>adjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>std::tuple&lt; Ts... &gt; const &amp;</type>
          <declname>theTuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="85" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a12563324dd31be7c179e9e6573826f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_c</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adjacency_t</declname>
            <defname>adjacency_t</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::push_back_fill</definition>
        <argsstring>(edge_list_t &amp;el, adjacency_t &amp;cs)</argsstring>
        <name>push_back_fill</name>
        <qualifiedname>nw::graph::push_back_fill</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>adjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="91" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="91" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1aada93e7f42bd7903e1678b6c030cff78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_graph</type>
            <declname>EdgeList</declname>
            <defname>EdgeList</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Adjacency</declname>
            <defname>Adjacency</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::push_back_fill</definition>
        <argsstring>(const EdgeList &amp;edge_list, Adjacency &amp;adj, bool directed, size_t idx)</argsstring>
        <name>push_back_fill</name>
        <qualifiedname>nw::graph::push_back_fill</qualifiedname>
        <param>
          <type>const EdgeList &amp;</type>
          <declname>edge_list</declname>
        </param>
        <param>
          <type>Adjacency &amp;</type>
          <declname>adj</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>directed</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill a plain or non-plain graph from edge list </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="103" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="103" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a4cf35e4e64cc67aaf19110dd19e38f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adj_list_t</declname>
            <defname>adj_list_t</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::fill_adj_list</definition>
        <argsstring>(edge_list_t &amp;el, adj_list_t &amp;al)</argsstring>
        <name>fill_adj_list</name>
        <qualifiedname>nw::graph::fill_adj_list</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>adj_list_t &amp;</type>
          <declname>al</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="138" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="138" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a4ba1f1a6c89f5d39e2201a8ef9f72029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Vector1</type>
          </param>
          <param>
            <type>class Vector2</type>
          </param>
          <param>
            <type>class Perm</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::permute</definition>
        <argsstring>(const Vector1 &amp;vec1, Vector2 &amp;vec2, const Perm &amp;perm)</argsstring>
        <name>permute</name>
        <qualifiedname>nw::graph::permute</qualifiedname>
        <param>
          <type>const Vector1 &amp;</type>
          <declname>vec1</declname>
        </param>
        <param>
          <type>Vector2 &amp;</type>
          <declname>vec2</declname>
        </param>
        <param>
          <type>const Perm &amp;</type>
          <declname>perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="160" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="160" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1abbab867f491acf7f37ecf45f64751f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adjacency_t</declname>
            <defname>adjacency_t</defname>
          </param>
          <param>
            <type>class Perm</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::permute_helper</definition>
        <argsstring>(edge_list_t &amp;el, adjacency_t &amp;cs, std::index_sequence&lt; Is... &gt; is, const Perm &amp;perm)</argsstring>
        <name>permute_helper</name>
        <qualifiedname>nw::graph::permute_helper</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>adjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const Perm &amp;</type>
          <declname>perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="169" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a909db0257e564bc0a9a11ad6ab9b52b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adjacency_t</declname>
            <defname>adjacency_t</defname>
          </param>
          <param>
            <type>class Perm</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::permute_helper_all</definition>
        <argsstring>(edge_list_t &amp;el, adjacency_t &amp;cs, std::index_sequence&lt; Is... &gt; is, const Perm &amp;perm)</argsstring>
        <name>permute_helper_all</name>
        <qualifiedname>nw::graph::permute_helper_all</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>adjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const Perm &amp;</type>
          <declname>perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="174" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1ae4298b03686a717af20f587c1ab93660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adjacency_t</declname>
            <defname>adjacency_t</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Perm</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::permute_helper</definition>
        <argsstring>(edge_list_t &amp;el, adjacency_t &amp;cs, std::index_sequence&lt; Is... &gt; is, T &amp;Tmp, Perm &amp;perm)</argsstring>
        <name>permute_helper</name>
        <qualifiedname>nw::graph::permute_helper</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>adjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>Tmp</declname>
        </param>
        <param>
          <type>Perm &amp;</type>
          <declname>perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="181" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="181" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a013b771c93a87e67f30dc347249860c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adjacency_t</declname>
            <defname>adjacency_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::fill_helper</definition>
        <argsstring>(edge_list_t &amp;el, adjacency_t &amp;cs, std::index_sequence&lt; Is... &gt; is, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>fill_helper</name>
        <qualifiedname>nw::graph::fill_helper</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>adjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="187" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a4c52a2572d251cb96c86565816ca6644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adjacency_t</declname>
            <defname>adjacency_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::copy_helper</definition>
        <argsstring>(edge_list_t &amp;el, adjacency_t &amp;cs, std::index_sequence&lt; Is... &gt; is, size_t offset, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>copy_helper</name>
        <qualifiedname>nw::graph::copy_helper</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>adjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="193" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a1836d9c555a57ec17e1c344ddb27e0de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adjacency_t</declname>
            <defname>adjacency_t</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::fill_helper_tmp</definition>
        <argsstring>(edge_list_t &amp;el, adjacency_t &amp;cs, std::index_sequence&lt; Is... &gt; is, T &amp;Tmp, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>fill_helper_tmp</name>
        <qualifiedname>nw::graph::fill_helper_tmp</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>adjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>Tmp</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="199" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1af861c27794569ca0bdce2fc731fb62bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adjacency_t</declname>
            <defname>adjacency_t</defname>
          </param>
          <param>
            <type>class Int</type>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::fill_directed</definition>
        <argsstring>(edge_list_t &amp;el, Int N, adjacency_t &amp;cs, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>fill_directed</name>
        <qualifiedname>nw::graph::fill_directed</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>Int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>adjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>This function fills an adjacency list with an edge list. The graph can eithr be a unipartite or bipartite graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>end point to fill in the edge list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_list_t</parametername>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the edge list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adjacency_t</parametername>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the adjacency list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Int</parametername>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>type of number of vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ExecutionPolicy</parametername>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the execution policy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>el</parametername>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>edge list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>of vertices at [idx] partition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cs</parametername>
<parametername>adjacency</parametername>
</parameternamelist>
<parameterdescription>
<para>list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>policy</parametername>
<parametername>execution</parametername>
</parameternamelist>
<parameterdescription>
<para>policy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="219" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="219" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a603a403cd80d64ddbe4e5d4a4b6dc1f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class Int</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adjacency_t</declname>
            <defname>adjacency_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::fill_undirected</definition>
        <argsstring>(edge_list_t &amp;el, Int N, adjacency_t &amp;cs, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>fill_undirected</name>
        <qualifiedname>nw::graph::fill_undirected</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>Int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>adjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="278" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="278" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a1ce4ca8848b499df86f193c49c756563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adjacency_t</declname>
            <defname>adjacency_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::fill</definition>
        <argsstring>(edge_list_t &amp;el, adjacency_t &amp;cs, bool sort_adjacency=false, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>fill</name>
        <qualifiedname>nw::graph::fill</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>adjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_adjacency</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="353" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="353" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1ac90eb545447966fe21d1e43fcdce26a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>adjacency_t</declname>
            <defname>adjacency_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::fill</definition>
        <argsstring>(edge_list_t &amp;el, adjacency_t &amp;cs, directedness dir, bool sort_adjacency=false, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>fill</name>
        <qualifiedname>nw::graph::fill</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>adjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>directedness</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_adjacency</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="367" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="367" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a0621116bbbeb6177f080d18eebd4299b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>bi_edge_list_t</declname>
            <defname>bi_edge_list_t</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>biadjacency_t</declname>
            <defname>biadjacency_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::fill_biadjacency</definition>
        <argsstring>(bi_edge_list_t &amp;el, biadjacency_t &amp;cs, bool sort_adjacency=false, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>fill_biadjacency</name>
        <qualifiedname>nw::graph::fill_biadjacency</qualifiedname>
        <param>
          <type>bi_edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>biadjacency_t &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort_adjacency</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="381" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="381" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a1cf201bc67ea098d68a8642fd48b5a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::swap_to_triangular</definition>
        <argsstring>(edge_list_t &amp;el, succession cessor)</argsstring>
        <name>swap_to_triangular</name>
        <qualifiedname>nw::graph::swap_to_triangular</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>succession</type>
          <declname>cessor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="395" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="395" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1af859c42ccf1a9dacb69be300fba02a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::swap_to_triangular</definition>
        <argsstring>(edge_list_t &amp;el, const std::string &amp;cessor=&quot;predecessor&quot;)</argsstring>
        <name>swap_to_triangular</name>
        <qualifiedname>nw::graph::swap_to_triangular</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>cessor</declname>
          <defval>&quot;predecessor&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="406" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="406" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a37d1da2eb3fac8538927ebe6b641eadc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>succession</type>
            <declname>cessor</declname>
            <defname>cessor</defname>
            <defval>succession::predecessor</defval>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::swap_to_triangular</definition>
        <argsstring>(edge_list_t &amp;el, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>swap_to_triangular</name>
        <qualifiedname>nw::graph::swap_to_triangular</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="417" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="417" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1af19089ca73097b4cbd0d45b176804d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::uniq</definition>
        <argsstring>(edge_list_t &amp;el, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>uniq</name>
        <qualifiedname>nw::graph::uniq</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="437" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="437" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1ad50c5e97656bea52b15fc0e00e22549d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::remove_self_loops</definition>
        <argsstring>(edge_list_t &amp;el)</argsstring>
        <name>remove_self_loops</name>
        <qualifiedname>nw::graph::remove_self_loops</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="447" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="447" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a3d23edf363e9b107ba8c516a36dc652f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>degree_enumerable_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::degrees</definition>
        <argsstring>(const Graph &amp;graph, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>degrees</name>
        <qualifiedname>nw::graph::degrees</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="456" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="456" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1ac39ec8272cca97cd6280c4fc5eb599f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>d_idx</declname>
            <defname>d_idx</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::degrees</definition>
        <argsstring>(edge_list_t &amp;el, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>degrees</name>
        <qualifiedname>nw::graph::degrees</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
    <requiresclause>(is_unipartite&lt;typename edge_list_t::unipartite_graph_base&gt;::value) (!degree_enumerable_graph&lt;edge_list_t&gt;)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="470" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="470" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1aba158d9d9ba2ace3b5ed97d37b7407d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>d_idx</declname>
            <defname>d_idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::degrees</definition>
        <argsstring>(edge_list_t &amp;el, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>degrees</name>
        <qualifiedname>nw::graph::degrees</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
    <requiresclause>(false == is_unipartite&lt;typename edge_list_t::bipartite_graph_base&gt;::value) (!degree_enumerable_graph&lt;edge_list_t&gt;)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="506" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="506" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a65cf147f4bd8dedb45c87eb8628cd2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::perm_by_degree</definition>
        <argsstring>(edge_list_t &amp;el, std::string direction=&quot;ascending&quot;)</argsstring>
        <name>perm_by_degree</name>
        <qualifiedname>nw::graph::perm_by_degree</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>direction</declname>
          <defval>&quot;ascending&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="525" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="525" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a80cbd52f25f797df9f79b76dbd6263a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class Vector</type>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::perm_by_degree</definition>
        <argsstring>(edge_list_t &amp;el, const Vector &amp;degree, std::string direction=&quot;ascending&quot;, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>perm_by_degree</name>
        <qualifiedname>nw::graph::perm_by_degree</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>direction</declname>
          <defval>&quot;ascending&quot;</defval>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="531" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="531" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a650f0e654ba757ad49d4563aba1254bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class Vector</type>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::relabel</definition>
        <argsstring>(edge_list_t &amp;el, const Vector &amp;perm, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>relabel</name>
        <qualifiedname>nw::graph::relabel</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>perm</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
    <requiresclause>(true == is_unipartite&lt;typename edge_list_t::unipartite_graph_base&gt;::value)    </requiresclause>
        <briefdescription>
<para>This function relabels edge list of unipartite graph. It will relabel both endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>edge_list_t</parametername>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>list type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
<parametername>permutation</parametername>
</parameternamelist>
<parameterdescription>
<para>array type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ExecutionPolicy</parametername>
<parametername>execution</parametername>
</parameternamelist>
<parameterdescription>
<para>polity type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_list_t</parametername>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
<parametername>permutation</parametername>
</parameternamelist>
<parameterdescription>
<para>array of the IDs of vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ExecutionPolicy</parametername>
<parametername>excution</parametername>
</parameternamelist>
<parameterdescription>
<para>policy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new IDs of the vertices after permutation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="567" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="567" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a9101375e29f734cadb9ac2d6b081d80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class Vector</type>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>default_execution_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::relabel</definition>
        <argsstring>(edge_list_t &amp;el, const Vector &amp;perm, ExecutionPolicy &amp;&amp;policy={})</argsstring>
        <name>relabel</name>
        <qualifiedname>nw::graph::relabel</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>perm</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
    <requiresclause>(false == is_unipartite&lt;typename edge_list_t::bipartite_graph_base&gt;::value)    </requiresclause>
        <briefdescription>
<para>This function relabels edge list of bipartite graph. It only relabels one endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>end point to relabel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_list_t</parametername>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>list type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
<parametername>permutation</parametername>
</parameternamelist>
<parameterdescription>
<para>array type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ExecutionPolicy</parametername>
<parametername>execution</parametername>
</parameternamelist>
<parameterdescription>
<para>polity type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>el</parametername>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perm</parametername>
<parametername>permutation</parametername>
</parameternamelist>
<parameterdescription>
<para>array of the IDs of vertices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>policy</parametername>
<parametername>excution</parametername>
</parameternamelist>
<parameterdescription>
<para>policy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new IDs of the vertices after permutation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="597" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="597" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a20e2614475ba9410fad2497885cfd3c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class Vector</type>
            <defval>std::vector&lt;int&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::relabel_by_degree</definition>
        <argsstring>(edge_list_t &amp;el, std::string direction=&quot;ascending&quot;, const Vector &amp;degree=std::vector&lt; int &gt;(0))</argsstring>
        <name>relabel_by_degree</name>
        <qualifiedname>nw::graph::relabel_by_degree</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>direction</declname>
          <defval>&quot;ascending&quot;</defval>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>degree</declname>
          <defval>std::vector&lt; int &gt;(0)</defval>
        </param>
    <requiresclause>(is_unipartite&lt;typename edge_list_t::unipartite_graph_base&gt;::value)    </requiresclause>
        <briefdescription>
<para>This relabel function for edge list handles unipartite graph. It will relabel both endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>edge_list_t</parametername>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>list type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
<parametername>degree</parametername>
</parameternamelist>
<parameterdescription>
<para>array type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>el</parametername>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>the degrees of vertices in which direction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>degree</parametername>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>degree array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="623" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="623" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a80500ac8ce1051dc24b5cbd454d50399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
          <param>
            <type>class Vector</type>
            <defval>std::vector&lt;int&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::relabel_by_degree</definition>
        <argsstring>(edge_list_t &amp;el, std::string direction=&quot;ascending&quot;, const Vector &amp;degree=std::vector&lt; int &gt;(0))</argsstring>
        <name>relabel_by_degree</name>
        <qualifiedname>nw::graph::relabel_by_degree</qualifiedname>
        <param>
          <type>edge_list_t &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>direction</declname>
          <defval>&quot;ascending&quot;</defval>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>degree</declname>
          <defval>std::vector&lt; int &gt;(0)</defval>
        </param>
    <requiresclause>(is_unipartite&lt;typename edge_list_t::unipartite_graph_base&gt;::value)    </requiresclause>
        <briefdescription>
<para>This function relabels edge list of either unipartite graph or bipartite graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>end point to relabel. Unipartite graph will ignore idx. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge_list_t</parametername>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>list type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
<parametername>degree</parametername>
</parameternamelist>
<parameterdescription>
<para>array type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>el</parametername>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>the degrees of vertices in which direction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>degree</parametername>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>degree array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new IDs of the vertices after permutation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="644" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="644" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a88777b2bb36a489934fd07cc39032957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_index_map</definition>
        <argsstring>(const R &amp;range)</argsstring>
        <name>make_index_map</name>
        <qualifiedname>nw::graph::make_index_map</qualifiedname>
        <param>
          <type>const R &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a map from data to the index value of each element in its container </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="662" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="662" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1ad2bb6d2f052e312a8394fc3942e749c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>class Edge</type>
            <defval>decltype(std::tuple_cat(std::tuple&lt;size_t, size_t&gt;()))</defval>
          </param>
          <param>
            <type>class EdgeList</type>
            <defval>std::vector&lt;Edge&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_plain_edges</definition>
        <argsstring>(M &amp;map, const E &amp;edges)</argsstring>
        <name>make_plain_edges</name>
        <qualifiedname>nw::graph::make_plain_edges</qualifiedname>
        <param>
          <type>M &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>const E &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make an edge list without properties from original data, e.g., vector&lt;tuple&lt;size_t, size_t&gt;&gt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="678" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="678" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1ae0a416365021632aed153784972bc055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>class Edge</type>
            <defval>decltype(std::tuple_cat(std::tuple&lt;size_t, size_t&gt;(), props(E()[0])))</defval>
          </param>
          <param>
            <type>class EdgeList</type>
            <defval>std::vector&lt;Edge&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_property_edges</definition>
        <argsstring>(M &amp;map, const E &amp;edges)</argsstring>
        <name>make_property_edges</name>
        <qualifiedname>nw::graph::make_property_edges</qualifiedname>
        <param>
          <type>M &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>const E &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make an edge list with properties copied from original data, e.g., vector&lt;tuple&lt;size_t, size_t, props...&gt;&gt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="694" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="694" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a02b3816ba50f3f9005d200500cc244f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
            <defval>std::vector&lt;std::tuple&lt;size_t, size_t, size_t&gt;&gt;</defval>
          </param>
          <param>
            <type>class M</type>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_index_edges</definition>
        <argsstring>(M &amp;map, const E &amp;edges)</argsstring>
        <name>make_index_edges</name>
        <qualifiedname>nw::graph::make_index_edges</qualifiedname>
        <param>
          <type>M &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>const E &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make an edge list indexing back to the original data, e.g., vector&lt;tuple&lt;size_t, size_t, size_t&gt;&gt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="708" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="708" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a63e3930625bb02adb87dc2da3ef58045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
            <defval>std::vector&lt;std::vector&lt;size_t&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_plain_graph</definition>
        <argsstring>(const V &amp;vertices, const E &amp;edges, bool directed=true, size_t idx=0)</argsstring>
        <name>make_plain_graph</name>
        <qualifiedname>nw::graph::make_plain_graph</qualifiedname>
        <param>
          <type>const V &amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>const E &amp;</type>
          <declname>edges</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>directed</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a plain graph from data, e.g., vector&lt;vector&lt;index&gt;&gt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="727" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="727" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1aa789f458adceaf778190e2ad40557f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
            <defval>std::vector&lt;std::vector&lt;std::tuple&lt;size_t, size_t&gt;&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_index_graph</definition>
        <argsstring>(const V &amp;vertices, const E &amp;edges, bool directed=true, size_t idx=0)</argsstring>
        <name>make_index_graph</name>
        <qualifiedname>nw::graph::make_index_graph</qualifiedname>
        <param>
          <type>const V &amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>const E &amp;</type>
          <declname>edges</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>directed</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make an index graph from data, e.g., vector&lt;vector&lt;tuple&lt;index, index&gt;&gt;&gt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="742" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="742" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1af09c2a71870a57cdb4f32c64afec7b79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
          <param>
            <type>std::ranges::forward_range</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
            <defval>std::vector&lt;std::vector&lt;decltype(std::tuple_cat(std::make_tuple(size_t{}), props(*(begin(E{})))))&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_property_graph</definition>
        <argsstring>(const V &amp;vertices, const E &amp;edges, bool directed=true, size_t idx=0)</argsstring>
        <name>make_property_graph</name>
        <qualifiedname>nw::graph::make_property_graph</qualifiedname>
        <param>
          <type>const V &amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>const E &amp;</type>
          <declname>edges</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>directed</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a property graph from data, e.g., vector&lt;vector&lt;tuple&lt;index, properties...&gt;&gt;&gt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="758" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="758" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1ace153b5fbb79b38e627dbfc5a01fa631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
            <defval>std::vector&lt;std::tuple&lt;size_t, size_t&gt;&gt;</defval>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::data_to_graph_edge_list</definition>
        <argsstring>(const V &amp;left_vertices, const V &amp;right_vertices, const E &amp;edges)</argsstring>
        <name>data_to_graph_edge_list</name>
        <qualifiedname>nw::graph::data_to_graph_edge_list</qualifiedname>
        <param>
          <type>const V &amp;</type>
          <declname>left_vertices</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>right_vertices</declname>
        </param>
        <param>
          <type>const E &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Functions for building bipartite graphs </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="774" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="774" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a8fedfd2d2ab3750a61cee8c50e1c7463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>V1</declname>
            <defname>V1</defname>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>V2</declname>
            <defname>V2</defname>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
            <defval>std::vector&lt;std::vector&lt;decltype(std::tuple_cat(std::make_tuple(size_t{}), props(*(begin(E{})))))&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_plain_bipartite_graph</definition>
        <argsstring>(const V1 &amp;left_vertices, const V2 &amp;right_vertices, const E &amp;edges, size_t idx=0)</argsstring>
        <name>make_plain_bipartite_graph</name>
        <qualifiedname>nw::graph::make_plain_bipartite_graph</qualifiedname>
        <param>
          <type>const V1 &amp;</type>
          <declname>left_vertices</declname>
        </param>
        <param>
          <type>const V2 &amp;</type>
          <declname>right_vertices</declname>
        </param>
        <param>
          <type>const E &amp;</type>
          <declname>edges</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="794" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="794" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a9a98d78e89c8a08d83f149ee307cdf29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>V1</declname>
            <defname>V1</defname>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>V2</declname>
            <defname>V2</defname>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>class Graph</type>
            <defval>std::vector&lt;std::vector&lt;size_t&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_plain_bipartite_graphs</definition>
        <argsstring>(const V1 &amp;left_vertices, const V2 &amp;right_vertices, const E &amp;edges)</argsstring>
        <name>make_plain_bipartite_graphs</name>
        <qualifiedname>nw::graph::make_plain_bipartite_graphs</qualifiedname>
        <param>
          <type>const V1 &amp;</type>
          <declname>left_vertices</declname>
        </param>
        <param>
          <type>const V2 &amp;</type>
          <declname>right_vertices</declname>
        </param>
        <param>
          <type>const E &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="807" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="807" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1a30457aaef104750d9487c21892286e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>idx</declname>
            <defname>idx</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>class Graph</type>
            <defval>std::vector&lt;std::vector&lt;size_t&gt;&gt;</defval>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_bipartite_graph</definition>
        <argsstring>(const V &amp;left_vertices, const V &amp;right_vertices, const E &amp;edges)</argsstring>
        <name>make_bipartite_graph</name>
        <qualifiedname>nw::graph::make_bipartite_graph</qualifiedname>
        <param>
          <type>const V &amp;</type>
          <declname>left_vertices</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>right_vertices</declname>
        </param>
        <param>
          <type>const E &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="822" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="822" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1abcc7f70b6dfbaa5b72b25a0eaa89a6c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
          <param>
            <type>std::ranges::random_access_range</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
            <defval>std::vector&lt;std::vector&lt;decltype(std::tuple_cat(std::make_tuple(size_t{}), props(*(begin(E{})))))&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::make_bipartite_graphs</definition>
        <argsstring>(const V &amp;left_vertices, const V &amp;right_vertices, const E &amp;edges)</argsstring>
        <name>make_bipartite_graphs</name>
        <qualifiedname>nw::graph::make_bipartite_graphs</qualifiedname>
        <param>
          <type>const V &amp;</type>
          <declname>left_vertices</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>right_vertices</declname>
        </param>
        <param>
          <type>const E &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="835" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="835" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="build_8hpp_1ace5341abcc1afa1e75265b4b4e051e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph1</type>
          </param>
          <param>
            <type>class Graph2</type>
          </param>
          <param>
            <type>class IndexGraph</type>
            <defval>std::vector&lt;std::vector&lt;std::tuple&lt;size_t, size_t&gt;&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::join</definition>
        <argsstring>(const Graph1 &amp;G, const Graph2 &amp;H)</argsstring>
        <name>join</name>
        <qualifiedname>nw::graph::join</qualifiedname>
        <param>
          <type>const Graph1 &amp;</type>
          <declname>G</declname>
        </param>
        <param>
          <type>const Graph2 &amp;</type>
          <declname>H</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" line="849" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp" bodystart="849" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="compressed_8hpp_1a414dea08c6c1d351b10eced3405139e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nw::graph::debug_compressed</definition>
        <argsstring>(bool flag=true)</argsstring>
        <name>debug_compressed</name>
        <qualifiedname>nw::graph::debug_compressed</qualifiedname>
        <param>
          <type>bool</type>
          <declname>flag</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/containers/compressed.hpp" line="53" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/containers/compressed.hpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="compressed_8hpp_1a6cd44a6d05458ba53515a7b8f7f5871a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nw::graph::time_compressed</definition>
        <argsstring>(bool flag=true)</argsstring>
        <name>time_compressed</name>
        <qualifiedname>nw::graph::time_compressed</qualifiedname>
        <param>
          <type>bool</type>
          <declname>flag</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/containers/compressed.hpp" line="55" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/containers/compressed.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="compressed_8hpp_1a4e1eeef87e016372a50c120571ff3401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename index_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::operator+</definition>
        <argsstring>(typename std::iter_difference_t&lt; typename indexed_struct_of_arrays&lt; index_t, Attributes... &gt;::outer_iterator &gt; n, const typename indexed_struct_of_arrays&lt; index_t, Attributes... &gt;::outer_iterator i)</argsstring>
        <name>operator+</name>
        <qualifiedname>nw::graph::operator+</qualifiedname>
        <param>
          <type>typename std::iter_difference_t&lt; typename <ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">indexed_struct_of_arrays</ref>&lt; index_t, Attributes... &gt;::outer_iterator &gt;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const typename <ref refid="classnw_1_1graph_1_1indexed__struct__of__arrays" kindref="compound">indexed_struct_of_arrays</ref>&lt; index_t, Attributes... &gt;::outer_iterator</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/containers/compressed.hpp" line="549" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/containers/compressed.hpp" bodystart="549" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="compressed_8hpp_1a3e08385a0fd2d5ec0e81aac8ad2f1514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::signed_integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type>I</type>
        <definition>I nw::graph::operator+</definition>
        <argsstring>(T n, const I i)</argsstring>
        <name>operator+</name>
        <qualifiedname>nw::graph::operator+</qualifiedname>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const I</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/containers/compressed.hpp" line="555" column="3" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/containers/compressed.hpp" bodystart="555" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="zip_8hpp_1ae0b5aa931e05b427d2f9aff09fd1cc46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::random_access_range...</type>
            <declname>Ranges</declname>
            <defname>Ranges</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structnw_1_1graph_1_1zipped" kindref="compound">zipped</ref>&lt; Ranges... &gt;</type>
        <definition>zipped&lt; Ranges... &gt; nw::graph::make_zipped</definition>
        <argsstring>(Ranges &amp;... rs)</argsstring>
        <name>make_zipped</name>
        <qualifiedname>nw::graph::make_zipped</qualifiedname>
        <param>
          <type>Ranges &amp;...</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/containers/zip.hpp" line="273" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/containers/zip.hpp" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="zip_8hpp_1a67ce2aebc5cddab74a699a3a4f90d4d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ranges::random_access_range...</type>
            <declname>Ranges</declname>
            <defname>Ranges</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structnw_1_1graph_1_1zipped" kindref="compound">zipped</ref>&lt; Ranges... &gt;</type>
        <definition>zipped&lt; Ranges... &gt; nw::graph::make_zipped</definition>
        <argsstring>(Ranges &amp;&amp;... rs)</argsstring>
        <name>make_zipped</name>
        <qualifiedname>nw::graph::make_zipped</qualifiedname>
        <param>
          <type>Ranges &amp;&amp;...</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/containers/zip.hpp" line="278" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/containers/zip.hpp" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="edge__list_8hpp_1a09d9c10751c43a8689d2721ad24831d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nw::graph::debug_edge_list</definition>
        <argsstring>(bool flag=true)</argsstring>
        <name>debug_edge_list</name>
        <qualifiedname>nw::graph::debug_edge_list</qualifiedname>
        <param>
          <type>bool</type>
          <declname>flag</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" line="51" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="edge__list_8hpp_1a43e8a137fef4a61877247f8b43e95481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nw::graph::time_edge_list</definition>
        <argsstring>(bool flag=true)</argsstring>
        <name>time_edge_list</name>
        <qualifiedname>nw::graph::time_edge_list</qualifiedname>
        <param>
          <type>bool</type>
          <declname>flag</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" line="52" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="edge__list_8hpp_1ab969fa47cba7c93bf8e4bba1e5358c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>vertex_id</declname>
            <defname>vertex_id</defname>
          </param>
          <param>
            <type>typename graph_base_t</type>
          </param>
          <param>
            <type>directedness</type>
            <declname>direct</declname>
            <defname>direct</defname>
            <defval>directedness::undirected</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const num_edges_tag, const index_edge_list&lt; vertex_id, graph_base_t, direct, Attributes... &gt; &amp;b)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>num_edges_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">index_edge_list</ref>&lt; vertex_id, graph_base_t, direct, Attributes... &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" line="231" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="edge__list_8hpp_1a79d7bcd419febe1f2dfd7b2d8e3a43ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>vertex_id</declname>
            <defname>vertex_id</defname>
          </param>
          <param>
            <type>typename graph_base_t</type>
          </param>
          <param>
            <type>directedness</type>
            <declname>direct</declname>
            <defname>direct</defname>
            <defval>directedness::undirected</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const num_vertices_tag, const index_edge_list&lt; vertex_id, graph_base_t, direct, Attributes... &gt; &amp;b, int idx=0)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>num_vertices_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">index_edge_list</ref>&lt; vertex_id, graph_base_t, direct, Attributes... &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" line="236" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="edge__list_8hpp_1a34a38adf503d7e4607aae8e79612213e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>vertex_id</declname>
            <defname>vertex_id</defname>
          </param>
          <param>
            <type>typename graph_base_t</type>
          </param>
          <param>
            <type>directedness</type>
            <declname>direct</declname>
            <defname>direct</defname>
            <defval>directedness::undirected</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const source_tag, const index_edge_list&lt; vertex_id, graph_base_t, direct, Attributes... &gt; &amp;, const std::tuple&lt; vertex_id, vertex_id, Attributes... &gt; &amp;e)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>source_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">index_edge_list</ref>&lt; vertex_id, graph_base_t, direct, Attributes... &gt; &amp;</type>
        </param>
        <param>
          <type>const std::tuple&lt; vertex_id, vertex_id, Attributes... &gt; &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" line="244" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="edge__list_8hpp_1adb83bac021ddcbfa460149dd36cec4fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>vertex_id</declname>
            <defname>vertex_id</defname>
          </param>
          <param>
            <type>typename graph_base_t</type>
          </param>
          <param>
            <type>directedness</type>
            <declname>direct</declname>
            <defname>direct</defname>
            <defval>directedness::undirected</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const target_tag, const index_edge_list&lt; vertex_id, graph_base_t, direct, Attributes... &gt; &amp;, const std::tuple&lt; vertex_id, vertex_id, Attributes... &gt; &amp;e)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>target_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">index_edge_list</ref>&lt; vertex_id, graph_base_t, direct, Attributes... &gt; &amp;</type>
        </param>
        <param>
          <type>const std::tuple&lt; vertex_id, vertex_id, Attributes... &gt; &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" line="249" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2betweenness__centrality_8hpp_1a401cd8f1e3aea5a7d7b0a7d8aa7c08a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename score_t</type>
            <defval>float</defval>
          </param>
          <param>
            <type>typename accum_t</type>
            <defval>size_t</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; score_t &gt;</type>
        <definition>std::vector&lt; score_t &gt; nw::graph::approx_betweenness_brandes</definition>
        <argsstring>(const Graph &amp;A, std::vector&lt; typename Graph::vertex_id_type &gt; &amp;sources)</argsstring>
        <name>approx_betweenness_brandes</name>
        <qualifiedname>nw::graph::approx_betweenness_brandes</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>sources</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" line="67" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" bodystart="67" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2betweenness__centrality_8hpp_1afd4f887bc37635e388f78006ba2b7849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename score_t</type>
            <defval>float</defval>
          </param>
          <param>
            <type>typename accum_t</type>
            <defval>size_t</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; score_t &gt;</type>
        <definition>std::vector&lt; score_t &gt; nw::graph::approx_betweenness_worklist_serial</definition>
        <argsstring>(const Graph &amp;A, std::vector&lt; typename Graph::vertex_id_type &gt; &amp;sources)</argsstring>
        <name>approx_betweenness_worklist_serial</name>
        <qualifiedname>nw::graph::approx_betweenness_worklist_serial</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>sources</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" line="124" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" bodystart="124" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2betweenness__centrality_8hpp_1a73a13d43c0b165fc316766ccf5ab7b90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename score_t</type>
            <defval>float</defval>
          </param>
          <param>
            <type>typename accum_t</type>
            <defval>size_t</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; score_t &gt;</type>
        <definition>std::vector&lt; score_t &gt; nw::graph::approx_betweenness_worklist</definition>
        <argsstring>(const Graph &amp;A, std::vector&lt; typename Graph::vertex_id_type &gt; &amp;sources, size_t num_threads, size_t DELTA)</argsstring>
        <name>approx_betweenness_worklist</name>
        <qualifiedname>nw::graph::approx_betweenness_worklist</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_threads</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>DELTA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" line="291" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" bodystart="291" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2betweenness__centrality_8hpp_1afead8b8f28d96dc705792e91e0fd578e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename score_t</type>
            <defval>float</defval>
          </param>
          <param>
            <type>typename accum_t</type>
            <defval>size_t</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; score_t &gt;</type>
        <definition>std::vector&lt; score_t &gt; nw::graph::approx_betweenness_worklist_noabstraction</definition>
        <argsstring>(const Graph &amp;A, std::vector&lt; typename Graph::vertex_id_type &gt; &amp;sources, size_t num_threads, size_t par_thresh, size_t DELTA=1)</argsstring>
        <name>approx_betweenness_worklist_noabstraction</name>
        <qualifiedname>nw::graph::approx_betweenness_worklist_noabstraction</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_threads</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>par_thresh</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>DELTA</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" line="617" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" bodystart="617" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2betweenness__centrality_8hpp_1a32b1bc6ffd7968a8de5b0f2e47106bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename score_t</type>
            <defval>float</defval>
          </param>
          <param>
            <type>typename accum_t</type>
            <defval>size_t</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bc2_v0</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; sources, bool normalize=true)</argsstring>
        <name>bc2_v0</name>
        <qualifiedname>nw::graph::bc2_v0</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" line="1229" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" bodystart="1229" bodyend="1292"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2betweenness__centrality_8hpp_1a50c6b267f43afc7f8538279c4dbb6106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename score_t</type>
            <defval>float</defval>
          </param>
          <param>
            <type>typename accum_t</type>
            <defval>size_t</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bc2_v1</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; sources, bool normalize=true)</argsstring>
        <name>bc2_v1</name>
        <qualifiedname>nw::graph::bc2_v1</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" line="1295" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" bodystart="1295" bodyend="1360"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2betweenness__centrality_8hpp_1a1cc07d27d6fe47e957b7e2ac59a658c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename score_t</type>
            <defval>float</defval>
          </param>
          <param>
            <type>typename accum_t</type>
            <defval>size_t</defval>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
            <defval>std::execution::parallel_unsequenced_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bc2_v2</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;sources, ExecutionPolicy &amp;&amp;policy={}, bool normalize=true)</argsstring>
        <name>bc2_v2</name>
        <qualifiedname>nw::graph::bc2_v2</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>policy</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" line="1364" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" bodystart="1364" bodyend="1435"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2betweenness__centrality_8hpp_1aced43614f55796f0e2125ef6d33a48f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename score_t</type>
            <defval>float</defval>
          </param>
          <param>
            <type>typename accum_t</type>
            <defval>size_t</defval>
          </param>
          <param>
            <type>class OuterExecutionPolicy</type>
            <defval>std::execution::parallel_unsequenced_policy</defval>
          </param>
          <param>
            <type>class InnerExecutionPolicy</type>
            <defval>std::execution::parallel_unsequenced_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bc2_v3</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;sources, OuterExecutionPolicy &amp;&amp;outer_policy={}, InnerExecutionPolicy &amp;&amp;inner_policy={}, bool normalize=true)</argsstring>
        <name>bc2_v3</name>
        <qualifiedname>nw::graph::bc2_v3</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>OuterExecutionPolicy &amp;&amp;</type>
          <declname>outer_policy</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>InnerExecutionPolicy &amp;&amp;</type>
          <declname>inner_policy</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" line="1440" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" bodystart="1440" bodyend="1537"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2betweenness__centrality_8hpp_1a105e5c182a02fc505dccf1242dd8f754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class score_t</type>
          </param>
          <param>
            <type>class accum_t</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class OuterExecutionPolicy</type>
            <defval>std::execution::parallel_unsequenced_policy</defval>
          </param>
          <param>
            <type>class InnerExecutionPolicy</type>
            <defval>std::execution::parallel_unsequenced_policy</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bc2_v4</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;sources, int threads, OuterExecutionPolicy &amp;&amp;outer_policy={}, InnerExecutionPolicy &amp;&amp;inner_policy={}, bool normalize=true)</argsstring>
        <name>bc2_v4</name>
        <qualifiedname>nw::graph::bc2_v4</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threads</declname>
        </param>
        <param>
          <type>OuterExecutionPolicy &amp;&amp;</type>
          <declname>outer_policy</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>InnerExecutionPolicy &amp;&amp;</type>
          <declname>inner_policy</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" line="1541" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/betweenness_centrality.hpp" bodystart="1541" bodyend="1630"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1ab4bbeb5f80134135096f214eabf8c678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bfs_v4</definition>
        <argsstring>(const Graph &amp;graph, typename graph_traits&lt; Graph &gt;::vertex_id_type root)</argsstring>
        <name>bfs_v4</name>
        <qualifiedname>nw::graph::bfs_v4</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>typename <ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt; Graph &gt;::vertex_id_type</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="36" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="36" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1a60116d33801a4bcdfe5612ccb9e63cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bfs_v6</definition>
        <argsstring>(const Graph &amp;graph, typename graph_traits&lt; Graph &gt;::vertex_id_type root)</argsstring>
        <name>bfs_v6</name>
        <qualifiedname>nw::graph::bfs_v6</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>typename <ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt; Graph &gt;::vertex_id_type</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="69" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="69" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1a490ec29e2bb3613cb260061e9d47f404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bfs_v7</definition>
        <argsstring>(const Graph &amp;graph, typename graph_traits&lt; Graph &gt;::vertex_id_type root)</argsstring>
        <name>bfs_v7</name>
        <qualifiedname>nw::graph::bfs_v7</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>typename <ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt; Graph &gt;::vertex_id_type</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="100" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="100" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1a7b0c795348d8f5389521060b603927ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bfs_v8</definition>
        <argsstring>(const Graph &amp;graph, typename graph_traits&lt; Graph &gt;::vertex_id_type root)</argsstring>
        <name>bfs_v8</name>
        <qualifiedname>nw::graph::bfs_v8</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>typename <ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt; Graph &gt;::vertex_id_type</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="145" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="145" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1a3fc2a8827851373b6590364ca512c238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bfs_v9</definition>
        <argsstring>(const Graph &amp;graph, typename graph_traits&lt; Graph &gt;::vertex_id_type root)</argsstring>
        <name>bfs_v9</name>
        <qualifiedname>nw::graph::bfs_v9</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>typename <ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt; Graph &gt;::vertex_id_type</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="182" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="182" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1a7a4049a73724267f3f32fc456c94e0bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bfs_top_down</definition>
        <argsstring>(const Graph &amp;graph, typename graph_traits&lt; Graph &gt;::vertex_id_type root)</argsstring>
        <name>bfs_top_down</name>
        <qualifiedname>nw::graph::bfs_top_down</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>typename <ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt; Graph &gt;::vertex_id_type</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="234" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="234" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1af26c1b1c46e255dfde8c177468060f20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bfs_top_down_bitmap</definition>
        <argsstring>(const Graph &amp;graph, typename graph_traits&lt; Graph &gt;::vertex_id_type root)</argsstring>
        <name>bfs_top_down_bitmap</name>
        <qualifiedname>nw::graph::bfs_top_down_bitmap</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>typename <ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt; Graph &gt;::vertex_id_type</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="281" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="281" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1a5ed7bfb1c7b2b282d587f0acbf3275cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Transpose</declname>
            <defname>Transpose</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bfs_bottom_up</definition>
        <argsstring>(const Graph &amp;g, const Transpose &amp;gx, vertex_id_t&lt; Graph &gt; root)</argsstring>
        <name>bfs_bottom_up</name>
        <qualifiedname>nw::graph::bfs_bottom_up</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const Transpose &amp;</type>
          <declname>gx</declname>
        </param>
        <param>
          <type>vertex_id_t&lt; Graph &gt;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="330" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="330" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1abef64eb2e4cbfd5511c1e21bfc47148f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t nw::graph::BU_step</definition>
        <argsstring>(const Graph &amp;g, std::vector&lt; vertex_id_t&lt; Graph &gt; &gt; &amp;parents, nw::graph::AtomicBitVector&lt;&gt; &amp;front, nw::graph::AtomicBitVector&lt;&gt; &amp;next)</argsstring>
        <name>BU_step</name>
        <qualifiedname>nw::graph::BU_step</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; vertex_id_t&lt; Graph &gt; &gt; &amp;</type>
          <declname>parents</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1_atomic_bit_vector" kindref="compound">nw::graph::AtomicBitVector</ref>&lt;&gt; &amp;</type>
          <declname>front</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1_atomic_bit_vector" kindref="compound">nw::graph::AtomicBitVector</ref>&lt;&gt; &amp;</type>
          <declname>next</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="371" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="371" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1a642459fc07317cb4cefaa3c44baea345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Vector</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t nw::graph::TD_step</definition>
        <argsstring>(const Graph &amp;g, std::vector&lt; vertex_id_t&lt; Graph &gt; &gt; &amp;parents, Vector &amp;cur, std::vector&lt; Vector &gt; &amp;next)</argsstring>
        <name>TD_step</name>
        <qualifiedname>nw::graph::TD_step</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; vertex_id_t&lt; Graph &gt; &gt; &amp;</type>
          <declname>parents</declname>
        </param>
        <param>
          <type>Vector &amp;</type>
          <declname>cur</declname>
        </param>
        <param>
          <type>std::vector&lt; Vector &gt; &amp;</type>
          <declname>next</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="398" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="398" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1ad6f2f67ff3c1ee75d0110f1dcf01ca70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::queue_to_bitmap</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;queue, nw::graph::AtomicBitVector&lt;&gt; &amp;bitmap)</argsstring>
        <name>queue_to_bitmap</name>
        <qualifiedname>nw::graph::queue_to_bitmap</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1_atomic_bit_vector" kindref="compound">nw::graph::AtomicBitVector</ref>&lt;&gt; &amp;</type>
          <declname>bitmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="425" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="425" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1ad2ad1b83470232f5d98f9e2ff793e845" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::bitmap_to_queue</definition>
        <argsstring>(nw::graph::AtomicBitVector&lt;&gt; &amp;bitmap, std::vector&lt; Vector &gt; &amp;lqueue)</argsstring>
        <name>bitmap_to_queue</name>
        <qualifiedname>nw::graph::bitmap_to_queue</qualifiedname>
        <param>
          <type><ref refid="classnw_1_1graph_1_1_atomic_bit_vector" kindref="compound">nw::graph::AtomicBitVector</ref>&lt;&gt; &amp;</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type>std::vector&lt; Vector &gt; &amp;</type>
          <declname>lqueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="431" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="431" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1ac4338839a26d3905c9be85a25456eac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::flush</definition>
        <argsstring>(std::vector&lt; Vector &gt; &amp;lqueue, Vector &amp;queue)</argsstring>
        <name>flush</name>
        <qualifiedname>nw::graph::flush</qualifiedname>
        <param>
          <type>std::vector&lt; Vector &gt; &amp;</type>
          <declname>lqueue</declname>
        </param>
        <param>
          <type>Vector &amp;</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="444" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="444" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1aba23a06582d4570da687bd384d466254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>OutGraph</declname>
            <defname>OutGraph</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>InGraph</declname>
            <defname>InGraph</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bfs_v1</definition>
        <argsstring>(const OutGraph &amp;out_graph, const InGraph &amp;in_graph, vertex_id_t&lt; OutGraph &gt; root, int num_bins=32, int alpha=15, int beta=18)</argsstring>
        <name>bfs_v1</name>
        <qualifiedname>nw::graph::bfs_v1</qualifiedname>
        <param>
          <type>const OutGraph &amp;</type>
          <declname>out_graph</declname>
        </param>
        <param>
          <type>const InGraph &amp;</type>
          <declname>in_graph</declname>
        </param>
        <param>
          <type>vertex_id_t&lt; OutGraph &gt;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_bins</declname>
          <defval>32</defval>
        </param>
        <param>
          <type>int</type>
          <declname>alpha</declname>
          <defval>15</defval>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
          <defval>18</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="465" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="465" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2bfs_8hpp_1a9913e4deaf4301e9e5818f5c62b0ed12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>OutGraph</declname>
            <defname>OutGraph</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>InGraph</declname>
            <defname>InGraph</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::bfs_v2</definition>
        <argsstring>(const OutGraph &amp;out_graph, const InGraph &amp;in_graph, vertex_id_t&lt; OutGraph &gt; root, int num_bins=32, int alpha=15, int beta=18)</argsstring>
        <name>bfs_v2</name>
        <qualifiedname>nw::graph::bfs_v2</qualifiedname>
        <param>
          <type>const OutGraph &amp;</type>
          <declname>out_graph</declname>
        </param>
        <param>
          <type>const InGraph &amp;</type>
          <declname>in_graph</declname>
        </param>
        <param>
          <type>vertex_id_t&lt; OutGraph &gt;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_bins</declname>
          <defval>32</defval>
        </param>
        <param>
          <type>int</type>
          <declname>alpha</declname>
          <defval>15</defval>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
          <defval>18</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" line="560" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/bfs.hpp" bodystart="560" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1acd5cbbc20db68775742ec3568a8c8a32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nw::graph::writeMin</definition>
        <argsstring>(T &amp;old, T &amp;next)</argsstring>
        <name>writeMin</name>
        <qualifiedname>nw::graph::writeMin</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>old</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>next</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="39" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="39" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1a20b0880fc6e5e9d835505c0e55b0cd9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nw::graph::compare_and_swap</definition>
        <argsstring>(T &amp;x, T old_val, T new_val)</argsstring>
        <name>compare_and_swap</name>
        <qualifiedname>nw::graph::compare_and_swap</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>old_val</declname>
        </param>
        <param>
          <type>T</type>
          <declname>new_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="49" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1add099aee59753cab8c23b981bf557d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::compute_connected_components</definition>
        <argsstring>(Graph &amp;A, std::vector&lt; T &gt; &amp;component_ids)</argsstring>
        <name>compute_connected_components</name>
        <qualifiedname>nw::graph::compute_connected_components</qualifiedname>
        <param>
          <type>Graph &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>component_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="70" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="70" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1a307267b21862af65b7f8227dda3072bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::hook</definition>
        <argsstring>(T u, T v, std::vector&lt; T &gt; &amp;comp)</argsstring>
        <name>hook</name>
        <qualifiedname>nw::graph::hook</qualifiedname>
        <param>
          <type>T</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="91" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="91" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1a7509f6d8bba9209581f91e2df643e632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::compress</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;comp)</argsstring>
        <name>compress</name>
        <qualifiedname>nw::graph::compress</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="106" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="106" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1a7f391a079b4a0b2fdd784a345dccc9e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T nw::graph::findDominantComponentID</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;comp, size_t nsamples=1024)</argsstring>
        <name>findDominantComponentID</name>
        <qualifiedname>nw::graph::findDominantComponentID</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nsamples</declname>
          <defval>1024</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="114" column="3" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="114" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1a87e17e3699764dde9585cae13f317001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::push</definition>
        <argsstring>(const Graph &amp;g, const T u, std::vector&lt; T &gt; &amp;comp)</argsstring>
        <name>push</name>
        <qualifiedname>nw::graph::push</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>u</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="137" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="137" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1a38f94ea6775a6d01b0d191b07986ee81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::link</definition>
        <argsstring>(const Graph &amp;g, const T u, std::vector&lt; T &gt; &amp;comp, const size_t neighbor_bound)</argsstring>
        <name>link</name>
        <qualifiedname>nw::graph::link</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>u</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>neighbor_bound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="146" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="146" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1a998dbfce61c4f000f11e97b9e5a4e0cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nw::graph::pull</definition>
        <argsstring>(const Graph &amp;g, const T u, std::vector&lt; T &gt; &amp;comp)</argsstring>
        <name>pull</name>
        <qualifiedname>nw::graph::pull</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>u</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="156" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="156" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1a06c82690aa396398c5c1ba0dd7273462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>vertex_id_t&lt;Graph&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; nw::graph::compute_connected_components_v1</definition>
        <argsstring>(const Graph &amp;g)</argsstring>
        <name>compute_connected_components_v1</name>
        <qualifiedname>nw::graph::compute_connected_components_v1</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="183" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="183" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1af3643752f9adba291cc3ba185eab185d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>vertex_id_t&lt;Graph&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; nw::graph::compute_connected_components_v2</definition>
        <argsstring>(const Graph &amp;g)</argsstring>
        <name>compute_connected_components_v2</name>
        <qualifiedname>nw::graph::compute_connected_components_v2</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="271" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="271" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1a68093acdaa79fd0892b6a9af9d12483e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>vertex_id_t&lt;Graph&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; nw::graph::ccv1</definition>
        <argsstring>(const Graph &amp;g)</argsstring>
        <name>ccv1</name>
        <qualifiedname>nw::graph::ccv1</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="294" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="294" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1a0447d925c5aeb2a414ab252ed84af0ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Execution</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>vertex_id_t&lt;Graph&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; nw::graph::lpcc</definition>
        <argsstring>(Execution &amp;exec, Graph &amp;g, int num_bins=32)</argsstring>
        <name>lpcc</name>
        <qualifiedname>nw::graph::lpcc</qualifiedname>
        <param>
          <type>Execution &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_bins</declname>
          <defval>32</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="304" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="304" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1af407259990a756dfa8077403dfbaed58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Execution</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>vertex_id_t&lt;Graph&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; nw::graph::lpcc_cyclic</definition>
        <argsstring>(Execution &amp;exec, Graph &amp;g, int num_bins=32)</argsstring>
        <name>lpcc_cyclic</name>
        <qualifiedname>nw::graph::lpcc_cyclic</qualifiedname>
        <param>
          <type>Execution &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_bins</declname>
          <defval>32</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="367" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="367" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1ae607593866f939dcd73f8ad78a418a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph2</declname>
            <defname>Graph2</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>vertex_id_t&lt;Graph&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; nw::graph::Afforest</definition>
        <argsstring>(const Graph &amp;g, Graph2 &amp;t_graph, size_t neighbor_bound=2)</argsstring>
        <name>Afforest</name>
        <qualifiedname>nw::graph::Afforest</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Graph2 &amp;</type>
          <declname>t_graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>neighbor_bound</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="428" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="428" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1a7ce225b21da8e653483d33f9b981b594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>vertex_id_t&lt;Graph&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; nw::graph::ccv5</definition>
        <argsstring>(const Graph &amp;g)</argsstring>
        <name>ccv5</name>
        <qualifiedname>nw::graph::ccv5</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="454" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="454" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1ae9edf3380dd26b7a4dbdb4a2f729ce96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>vertex_id_t&lt;Graph&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::sv_v6</definition>
        <argsstring>(const Graph &amp;g)</argsstring>
        <name>sv_v6</name>
        <qualifiedname>nw::graph::sv_v6</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="470" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="470" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1aa10a479909adb625893a52103570704e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>vertex_id_t&lt;Graph&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::sv_v8</definition>
        <argsstring>(Graph &amp;g)</argsstring>
        <name>sv_v8</name>
        <qualifiedname>nw::graph::sv_v8</qualifiedname>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="513" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="513" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2connected__components_8hpp_1ae9726ddb1d9f3146fc2759871b8c3ce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>vertex_id_t&lt;Graph&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::sv_v9</definition>
        <argsstring>(Graph &amp;g)</argsstring>
        <name>sv_v9</name>
        <qualifiedname>nw::graph::sv_v9</qualifiedname>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" line="559" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp" bodystart="559" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2delta__stepping_8hpp_1a660bbbd8c8e06dd613241789bb7b72fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class distance_t</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class Id</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::delta_stepping_v6</definition>
        <argsstring>(const Graph &amp;graph, Id source, T delta)</argsstring>
        <name>delta_stepping_v6</name>
        <qualifiedname>nw::graph::delta_stepping_v6</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>Id</type>
          <declname>source</declname>
        </param>
        <param>
          <type>T</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/delta_stepping.hpp" line="42" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/delta_stepping.hpp" bodystart="42" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2delta__stepping_8hpp_1a706735eb30124bc93e741fdb6dc07e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class distance_t</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class Id</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Weight</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::delta_stepping_v8</definition>
        <argsstring>(const Graph &amp;graph, Id source, T delta, Weight weight=[](auto &amp;e) -&gt; auto &amp;{ return std::get&lt; 1 &gt;(e);})</argsstring>
        <name>delta_stepping_v8</name>
        <qualifiedname>nw::graph::delta_stepping_v8</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>Id</type>
          <declname>source</declname>
        </param>
        <param>
          <type>T</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>Weight</type>
          <declname>weight</declname>
          <defval>[](auto &amp;e) -&gt; auto &amp;{ return std::get&lt; 1 &gt;(e);}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/delta_stepping.hpp" line="85" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/delta_stepping.hpp" bodystart="85" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2delta__stepping_8hpp_1a0e7efb91b8cc5e970d41fb1b308defa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class distance_t</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class Id</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Weight</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::delta_stepping_v9</definition>
        <argsstring>(const Graph &amp;graph, Id source, T delta, Weight weight=[](auto &amp;e) -&gt; auto &amp;{ return std::get&lt; 1 &gt;(e);})</argsstring>
        <name>delta_stepping_v9</name>
        <qualifiedname>nw::graph::delta_stepping_v9</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>Id</type>
          <declname>source</declname>
        </param>
        <param>
          <type>T</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>Weight</type>
          <declname>weight</declname>
          <defval>[](auto &amp;e) -&gt; auto &amp;{ return std::get&lt; 1 &gt;(e);}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/delta_stepping.hpp" line="146" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/delta_stepping.hpp" bodystart="146" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2delta__stepping_8hpp_1aa7d73186aa2f89b254c15f5d73b68087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class distance_t</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class Id</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Weight</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::delta_stepping_v10</definition>
        <argsstring>(const Graph &amp;graph, Id source, T delta, Weight weight=[](auto &amp;e) -&gt; auto &amp;{ return std::get&lt; 1 &gt;(e);})</argsstring>
        <name>delta_stepping_v10</name>
        <qualifiedname>nw::graph::delta_stepping_v10</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>Id</type>
          <declname>source</declname>
        </param>
        <param>
          <type>T</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>Weight</type>
          <declname>weight</declname>
          <defval>[](auto &amp;e) -&gt; auto &amp;{ return std::get&lt; 1 &gt;(e);}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/delta_stepping.hpp" line="205" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/delta_stepping.hpp" bodystart="205" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2delta__stepping_8hpp_1a12b36034cf3aff34ba28a8ea8e21c73f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class distance_t</type>
          </param>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class Id</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Weight</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::delta_stepping_v11</definition>
        <argsstring>(const Graph &amp;graph, Id source, T delta, Weight weight=[](auto &amp;e) -&gt; auto &amp;{ return std::get&lt; 1 &gt;(e);})</argsstring>
        <name>delta_stepping_v11</name>
        <qualifiedname>nw::graph::delta_stepping_v11</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>Id</type>
          <declname>source</declname>
        </param>
        <param>
          <type>T</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>Weight</type>
          <declname>weight</declname>
          <defval>[](auto &amp;e) -&gt; auto &amp;{ return std::get&lt; 1 &gt;(e);}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/delta_stepping.hpp" line="267" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/delta_stepping.hpp" bodystart="267" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2jaccard_8hpp_1a673f20c6802e7c0e40031f37ce4416e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GraphT</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t nw::graph::jaccard_similarity_v1</definition>
        <argsstring>(const GraphT &amp;A)</argsstring>
        <name>jaccard_similarity_v1</name>
        <qualifiedname>nw::graph::jaccard_similarity_v1</qualifiedname>
        <param>
          <type>const GraphT &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/jaccard.hpp" line="33" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/jaccard.hpp" bodystart="33" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1a94a2f82ce90358231c3956d8870e4c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_vc</definition>
        <argsstring>(const Graph &amp;graph, std::vector&lt; Real &gt; &amp;page_rank, const Real damping_factor=0.85, const Real threshold=1.e-4, const size_t max_iters=std::numeric_limits&lt; unsigned int &gt;::max())</argsstring>
        <name>page_rank_vc</name>
        <qualifiedname>nw::graph::page_rank_vc</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>damping_factor</declname>
          <defval>0.85</defval>
        </param>
        <param>
          <type>const Real</type>
          <declname>threshold</declname>
          <defval>1.e-4</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_iters</declname>
          <defval>std::numeric_limits&lt; unsigned int &gt;::max()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="91" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="91" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1ae61dbdaddaf0344bb3ec55a406912c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_v1</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, const Real damping_factor=0.85, const Real threshold=1.e-4, const size_t max_iters=std::numeric_limits&lt; unsigned int &gt;::max())</argsstring>
        <name>page_rank_v1</name>
        <qualifiedname>nw::graph::page_rank_v1</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>damping_factor</declname>
          <defval>0.85</defval>
        </param>
        <param>
          <type>const Real</type>
          <declname>threshold</declname>
          <defval>1.e-4</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_iters</declname>
          <defval>std::numeric_limits&lt; unsigned int &gt;::max()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="135" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="135" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1ad16759484e48728cef4a25d7ff41d620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_v2</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, const Real damping_factor=0.85, const Real threshold=1.e-4, const size_t max_iters=std::numeric_limits&lt; unsigned int &gt;::max())</argsstring>
        <name>page_rank_v2</name>
        <qualifiedname>nw::graph::page_rank_v2</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>damping_factor</declname>
          <defval>0.85</defval>
        </param>
        <param>
          <type>const Real</type>
          <declname>threshold</declname>
          <defval>1.e-4</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_iters</declname>
          <defval>std::numeric_limits&lt; unsigned int &gt;::max()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="174" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="174" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1a8c54b34dbbf69149260cfa62d0edccd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_v4</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, const Real damping_factor=0.85, const Real threshold=1.e-4, const size_t max_iters=std::numeric_limits&lt; unsigned int &gt;::max(), size_t num_threads=1)</argsstring>
        <name>page_rank_v4</name>
        <qualifiedname>nw::graph::page_rank_v4</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>damping_factor</declname>
          <defval>0.85</defval>
        </param>
        <param>
          <type>const Real</type>
          <declname>threshold</declname>
          <defval>1.e-4</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_iters</declname>
          <defval>std::numeric_limits&lt; unsigned int &gt;::max()</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="207" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="207" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1ada25dffaa51ac9dc36b881560a1b5a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_v6</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, const Real damping_factor=0.85, const Real threshold=1.e-4, const size_t max_iters=std::numeric_limits&lt; unsigned int &gt;::max(), size_t num_threads=1)</argsstring>
        <name>page_rank_v6</name>
        <qualifiedname>nw::graph::page_rank_v6</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>damping_factor</declname>
          <defval>0.85</defval>
        </param>
        <param>
          <type>const Real</type>
          <declname>threshold</declname>
          <defval>1.e-4</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_iters</declname>
          <defval>std::numeric_limits&lt; unsigned int &gt;::max()</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="261" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="261" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1af8a0fe2a4f6e4610e341a1703a3a5164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_v7</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, const Real damping_factor=0.85, const Real threshold=1.e-4, const size_t max_iters=std::numeric_limits&lt; unsigned int &gt;::max(), size_t num_threads=1)</argsstring>
        <name>page_rank_v7</name>
        <qualifiedname>nw::graph::page_rank_v7</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>damping_factor</declname>
          <defval>0.85</defval>
        </param>
        <param>
          <type>const Real</type>
          <declname>threshold</declname>
          <defval>1.e-4</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_iters</declname>
          <defval>std::numeric_limits&lt; unsigned int &gt;::max()</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="319" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="319" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1a4f30374ed9f27d3461f04ddcde9aad8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_v8</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, const Real damping_factor=0.85, const Real threshold=1.e-4, const size_t max_iters=std::numeric_limits&lt; unsigned int &gt;::max(), size_t num_threads=1)</argsstring>
        <name>page_rank_v8</name>
        <qualifiedname>nw::graph::page_rank_v8</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>damping_factor</declname>
          <defval>0.85</defval>
        </param>
        <param>
          <type>const Real</type>
          <declname>threshold</declname>
          <defval>1.e-4</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_iters</declname>
          <defval>std::numeric_limits&lt; unsigned int &gt;::max()</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="368" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="368" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1aa845f57c135e2af0acfba9623d936200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_v9</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, Real damping_factor, Real threshold, size_t max_iters, size_t num_threads)</argsstring>
        <name>page_rank_v9</name>
        <qualifiedname>nw::graph::page_rank_v9</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>damping_factor</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iters</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_threads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="406" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="406" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1a961aee9bb4cc3b2c4ce9020342134a53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_v10</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, Real damping_factor, Real threshold, size_t max_iters, size_t num_threads)</argsstring>
        <name>page_rank_v10</name>
        <qualifiedname>nw::graph::page_rank_v10</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>damping_factor</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iters</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_threads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="448" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="448" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1a629f0e1ed958445671c51e2058724ba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_v12</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, Real damping_factor, Real threshold, size_t max_iters, size_t num_threads)</argsstring>
        <name>page_rank_v12</name>
        <qualifiedname>nw::graph::page_rank_v12</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>damping_factor</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iters</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_threads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="505" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="505" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1a5e56edc79cb9122f5a54ff141727101d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_v3</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, Real damping_factor, Real threshold, size_t max_iters)</argsstring>
        <name>page_rank_v3</name>
        <qualifiedname>nw::graph::page_rank_v3</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>damping_factor</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="564" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="564" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1a948ad28d235f68bb4b1fe11d11f5c1c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::page_rank_v13</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, Real damping_factor, Real threshold, size_t max_iters, size_t num_threads)</argsstring>
        <name>page_rank_v13</name>
        <qualifiedname>nw::graph::page_rank_v13</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>damping_factor</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iters</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_threads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="628" column="7" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="628" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2page__rank_8hpp_1ae32019ac555f44f1e2b128263cca6aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>typename Real</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::page_rank_v14</definition>
        <argsstring>(const Graph &amp;graph, const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;degrees, std::vector&lt; Real &gt; &amp;page_rank, Real damping_factor, Real threshold, size_t max_iters)</argsstring>
        <name>page_rank_v14</name>
        <qualifiedname>nw::graph::page_rank_v14</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename Graph::vertex_id_type &gt; &amp;</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; Real &gt; &amp;</type>
          <declname>page_rank</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>damping_factor</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" line="698" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp" bodystart="698" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1ae54a7637431c17e4a1cea0ffce46a8c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _InputIterator1</type>
          </param>
          <param>
            <type>typename _InputIterator2</type>
          </param>
          <param>
            <type>typename _OutputIterator</type>
          </param>
        </templateparamlist>
        <type>_OutputIterator</type>
        <definition>_OutputIterator nw::graph::lower_bound_set_intersection</definition>
        <argsstring>(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)</argsstring>
        <name>lower_bound_set_intersection</name>
        <qualifiedname>nw::graph::lower_bound_set_intersection</qualifiedname>
        <param>
          <type>_InputIterator1</type>
          <declname>__first1</declname>
        </param>
        <param>
          <type>_InputIterator1</type>
          <declname>__last1</declname>
        </param>
        <param>
          <type>_InputIterator2</type>
          <declname>__first2</declname>
        </param>
        <param>
          <type>_InputIterator2</type>
          <declname>__last2</declname>
        </param>
        <param>
          <type>_OutputIterator</type>
          <declname>__result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="35" column="17" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="35" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1a6b33351373d470069cd87b5c19a4d6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>GraphT</declname>
            <defname>GraphT</defname>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t nw::graph::triangle_count_vc</definition>
        <argsstring>(const GraphT &amp;A)</argsstring>
        <name>triangle_count_vc</name>
        <qualifiedname>nw::graph::triangle_count_vc</qualifiedname>
        <param>
          <type>const GraphT &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="54" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="54" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1a1b176d9f650c2b637d12cb404298730a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>GraphT</declname>
            <defname>GraphT</defname>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t nw::graph::triangle_count_v1</definition>
        <argsstring>(const GraphT &amp;A)</argsstring>
        <name>triangle_count_v1</name>
        <qualifiedname>nw::graph::triangle_count_v1</qualifiedname>
        <param>
          <type>const GraphT &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="79" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="79" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1a726a2a9237667889c8b46b0a0c3afeec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>GraphT</declname>
            <defname>GraphT</defname>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t nw::graph::triangle_count_v15</definition>
        <argsstring>(const GraphT &amp;A)</argsstring>
        <name>triangle_count_v15</name>
        <qualifiedname>nw::graph::triangle_count_v15</qualifiedname>
        <param>
          <type>const GraphT &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="94" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="94" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1affada3fdb183887963aa8c10b69e8b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>GraphT</declname>
            <defname>GraphT</defname>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t nw::graph::triangle_count_v2</definition>
        <argsstring>(const GraphT &amp;A)</argsstring>
        <name>triangle_count_v2</name>
        <qualifiedname>nw::graph::triangle_count_v2</qualifiedname>
        <param>
          <type>const GraphT &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="109" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="109" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1a541bf391ddbb546b038b6682b22af4b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Graph</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t nw::graph::triangle_count_v3</definition>
        <argsstring>(const Graph &amp;A)</argsstring>
        <name>triangle_count_v3</name>
        <qualifiedname>nw::graph::triangle_count_v3</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="126" column="8" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="126" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1ab4effa36db7d6614bc81bfc5a78bfbc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::triangle_count_v5</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last, std::size_t threads=1)</argsstring>
        <name>triangle_count_v5</name>
        <qualifiedname>nw::graph::triangle_count_v5</qualifiedname>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Two-dimensional triangle counting.</para>
<para>This version of triangle counting is explicitly two-dimensional and is optimized (and only correct for) an upper-triangular graph. It uses a blocked work distribution and uses explicit async threads for parallelization.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RandomAccessIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A random access iterator type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the outer range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the outer range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threads</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of threads to use in the parallelization.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of triangles in the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="150" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="150" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1ad502aa17bf3792f5e80f3465e3647bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::triangle_count_v6</definition>
        <argsstring>(RandomAccessIterator first, RandomAccessIterator last, std::size_t threads=1)</argsstring>
        <name>triangle_count_v6</name>
        <qualifiedname>nw::graph::triangle_count_v6</qualifiedname>
        <param>
          <type>RandomAccessIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Two-dimensional triangle counting.</para>
<para>This version of triangle counting is explicitly two-dimensional. It works on graphs that are either upper or lower triangular. It uses explicit async threads to perform the parallelization.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RandomAccessIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A random access BGL17 iterator type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the outer range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the outer range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threads</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of threads to use in the parallelization.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of triangles in the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="177" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="177" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1a3e59d344e779c8ad141e3264867ed46b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class OuterExecutionPolicy</type>
            <defval>std::execution::parallel_unsequenced_policy</defval>
          </param>
          <param>
            <type>class InnerExecutionPolicy</type>
            <defval>std::execution::sequenced_policy</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::triangle_count_v7</definition>
        <argsstring>(const Graph &amp;A, OuterExecutionPolicy &amp;&amp;outer={}, InnerExecutionPolicy inner={})</argsstring>
        <name>triangle_count_v7</name>
        <qualifiedname>nw::graph::triangle_count_v7</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>OuterExecutionPolicy &amp;&amp;</type>
          <declname>outer</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>InnerExecutionPolicy</type>
          <declname>inner</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Two-dimensional triangle counting.</para>
<para>This version of triangle counting is explicitly two-dimensional. It works on graphs that are upper triangular, and uses a <computeroutput>std::for_each</computeroutput> for the outer loop decomposition.</para>
<para>This version takes an outer and inner execution policy. The outer policy is used to parallelize the <computeroutput>std::for_each</computeroutput> while the inner policy is used to parallelize the <computeroutput>std::set_intersection</computeroutput>. By default the <computeroutput>std::for_each</computeroutput> is parallel while the <computeroutput>std::set_intersection</computeroutput> is sequential.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph type (random-access range of ranges). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OuterExecutionPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel execution policy for the <computeroutput>std::for_each</computeroutput> [default: <computeroutput>parallel_unsequenced_policy</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InnerExecutionPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel execution policy for the <computeroutput>std::set_intersection</computeroutput> [default: <computeroutput>sequenced_policy</computeroutput>].</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph *(must be upper triangular)*. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outer</parametername>
</parameternamelist>
<parameterdescription>
<para>The outer execution policy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inner</parametername>
</parameternamelist>
<parameterdescription>
<para>The inner execution policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of triangles in the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="213" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="213" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1a8e6b416bb482d2cf6317327f04ca568a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class OuterExecutionPolicy</type>
            <defval>std::execution::parallel_unsequenced_policy</defval>
          </param>
          <param>
            <type>class InnerExecutionPolicy</type>
            <defval>std::execution::parallel_policy</defval>
          </param>
          <param>
            <type>class SetExecutionPolicy</type>
            <defval>std::execution::sequenced_policy</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::triangle_count_v10</definition>
        <argsstring>(const Graph &amp;A, OuterExecutionPolicy &amp;&amp;outer={}, InnerExecutionPolicy &amp;&amp;inner={}, SetExecutionPolicy &amp;&amp;set={})</argsstring>
        <name>triangle_count_v10</name>
        <qualifiedname>nw::graph::triangle_count_v10</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>OuterExecutionPolicy &amp;&amp;</type>
          <declname>outer</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>InnerExecutionPolicy &amp;&amp;</type>
          <declname>inner</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>SetExecutionPolicy &amp;&amp;</type>
          <declname>set</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Two-dimensional triangle counting.</para>
<para>This version of triangle counting is explicitly two dimensional, uses basic <computeroutput>std::for_each</computeroutput> loop parallelism for the two loops, and supports a parallel inner set intersection. It works on either upper or lower triangular graphs.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph type (random-access range of ranges). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OuterExecutionPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel execution policy for the outer <computeroutput>std::for_each</computeroutput> [default: <computeroutput>parallel_unsequenced_policy</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InnerExecutionPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel execution policy for the inner <computeroutput>std::for_each</computeroutput> [default: <computeroutput>parallel_policy</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SetExecutionPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel execution policy for the <computeroutput>std::set_intersection</computeroutput> [default: <computeroutput>sequenced_policy</computeroutput>].</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph *(must be upper triangular)*. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outer</parametername>
</parameternamelist>
<parameterdescription>
<para>The outer execution policy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inner</parametername>
</parameternamelist>
<parameterdescription>
<para>The inner execution policy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The set intersection execution policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of triangles in the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="248" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="248" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1a059d5de75600592a80223050fc1ac149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class SetExecutionPolicy</type>
            <defval>std::execution::sequenced_policy</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::triangle_count_v12</definition>
        <argsstring>(const Graph &amp;graph, int stride, SetExecutionPolicy &amp;&amp;set={})</argsstring>
        <name>triangle_count_v12</name>
        <qualifiedname>nw::graph::triangle_count_v12</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>SetExecutionPolicy &amp;&amp;</type>
          <declname>set</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Two-dimensional triangle counting.</para>
<para>This version of triangle counting is explicitly two dimensional, is optimized (and only correct for) an upper-triangular graph, and uses the cyclic range adapter and a <computeroutput>parallel for</computeroutput> to process the outer dimension.</para>
<para>@precondition The graph must be upper-triangular for this to work properly.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph type (a random-access range of ranges). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SetExecutionPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel execution policy for the <computeroutput>std::set_intersection</computeroutput> [default: <computeroutput>sequenced_policy</computeroutput>].</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph *(must be upper-triangular)*. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum stride for the cyclic outer loop. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The execution policy for the set intersection.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of triangles in the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="278" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="278" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1a9a17e4c700de5108ca58574dc9560fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class SetExecutionPolicy</type>
            <defval>std::execution::sequenced_policy</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::triangle_count_v13</definition>
        <argsstring>(const Graph &amp;graph, int stride, SetExecutionPolicy &amp;&amp;set={})</argsstring>
        <name>triangle_count_v13</name>
        <qualifiedname>nw::graph::triangle_count_v13</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>SetExecutionPolicy &amp;&amp;</type>
          <declname>set</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Two-dimensional triangle counting.</para>
<para>This version of triangle counting is explicitly two dimensional and uses the cyclic range adapter and a <computeroutput>parallel for</computeroutput> to process the outer dimension.</para>
<para><simplesect kind="note"><para>This implementation is safe for both upper and lower triangular matrices, but should be more efficient for lower triangular matrices as the inner intersections will be smaller.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph type (a random-access range of ranges). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SetExecutionPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel execution policy for the <computeroutput>std::set_intersection</computeroutput> [default: <computeroutput>sequenced_policy</computeroutput>].</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum stride for the cyclic outer loop. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The execution policy for the set intersection.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of triangles in the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="311" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="311" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1abba4231f9ea3be6c7609c37c54f9686d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
          <param>
            <type>class SetExecutionPolicy</type>
            <defval>std::execution::sequenced_policy</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::triangle_count_v14</definition>
        <argsstring>(const Graph &amp;graph, SetExecutionPolicy &amp;&amp;set={})</argsstring>
        <name>triangle_count_v14</name>
        <qualifiedname>nw::graph::triangle_count_v14</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>SetExecutionPolicy &amp;&amp;</type>
          <declname>set</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>One-dimensional triangle counting.</para>
<para>This version of triangle counting uses a one dimensional parallel-for loop over the edge range. This is identical to the the GAP verification code, but in parallel.</para>
<para><simplesect kind="note"><para>This version produces the correct result for both upper and lower triangular matrices, but should be somewhat more efficient for lower triangular orders as the set intersections should be more efficient.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph type (a random-access range of ranges). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SetExecutionPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel execution policy for the <computeroutput>std::set_intersection</computeroutput> [default: <computeroutput>sequenced_policy</computeroutput>].</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The execution policy for the set intersection.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of triangles in the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="345" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1a07096af7dfe6b680cc741f1c599a2e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::triangle_count_edgesplit_upper</definition>
        <argsstring>(const Graph &amp;graph, std::size_t threads=1)</argsstring>
        <name>triangle_count_edgesplit_upper</name>
        <qualifiedname>nw::graph::triangle_count_edgesplit_upper</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Two-dimensional triangle counting.</para>
<para>This version of triangle counting is explicitly two-dimensional and is optimized (and only correct for) an upper-triangular graph. It uses explicit async threads to perform the parallelization.</para>
<para>This parallelization uses a blocked decomposition combined with a uniform edgesplit policy, where each block is assigned about the same number of edges.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph type (a random-access range of ranges);</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threads</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of threads to use in the parallelization.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of triangles in the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="411" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="411" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="experimental_2algorithms_2triangle__count_8hpp_1a66d2127d75c316644729135e32882ea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>adjacency_list_graph</type>
            <declname>Graph</declname>
            <defname>Graph</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::triangle_count_edgesplit</definition>
        <argsstring>(const Graph &amp;graph, std::size_t threads=1)</argsstring>
        <name>triangle_count_edgesplit</name>
        <qualifiedname>nw::graph::triangle_count_edgesplit</qualifiedname>
        <param>
          <type>const Graph &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" line="426" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp" bodystart="426" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="graph__concepts_8hpp_1aed80825060c859f5b33c22b3d16fcee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nw::graph::DECL_TAG_INVOKE</definition>
        <argsstring>(num_vertices)</argsstring>
        <name>DECL_TAG_INVOKE</name>
        <qualifiedname>nw::graph::DECL_TAG_INVOKE</qualifiedname>
        <param>
          <type>num_vertices</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forward-declare our CPO tags </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="29" column="1" declfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__concepts_8hpp_1a5fa81ae322acdbdc86c6487cd2c1d34f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nw::graph::DECL_TAG_INVOKE</definition>
        <argsstring>(num_edges)</argsstring>
        <name>DECL_TAG_INVOKE</name>
        <qualifiedname>nw::graph::DECL_TAG_INVOKE</qualifiedname>
        <param>
          <type>num_edges</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="30" column="1" declfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" declline="30" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__concepts_8hpp_1a8a5c0fcf9e9dea5327101c0f19084114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nw::graph::DECL_TAG_INVOKE</definition>
        <argsstring>(degree)</argsstring>
        <name>DECL_TAG_INVOKE</name>
        <qualifiedname>nw::graph::DECL_TAG_INVOKE</qualifiedname>
        <param>
          <type>degree</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="31" column="1" declfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" declline="31" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__concepts_8hpp_1a81445035e7a2792a74aad0364149064b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nw::graph::DECL_TAG_INVOKE</definition>
        <argsstring>(source)</argsstring>
        <name>DECL_TAG_INVOKE</name>
        <qualifiedname>nw::graph::DECL_TAG_INVOKE</qualifiedname>
        <param>
          <type>source</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="32" column="1" declfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__concepts_8hpp_1aa618a115e1934ae5346a47e09173c5d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nw::graph::DECL_TAG_INVOKE</definition>
        <argsstring>(target)</argsstring>
        <name>DECL_TAG_INVOKE</name>
        <qualifiedname>nw::graph::DECL_TAG_INVOKE</qualifiedname>
        <param>
          <type>target</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="33" column="1" declfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" declline="33" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="graph__concepts_8hpp_1aa3940a134507f8eb097bec103f4d4964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::nth_cdr</definition>
        <argsstring>(std::tuple&lt; Ts... &gt; t)</argsstring>
        <name>nth_cdr</name>
        <qualifiedname>nw::graph::nth_cdr</qualifiedname>
        <param>
          <type>std::tuple&lt; Ts... &gt;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="66" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="graph__concepts_8hpp_1a1aa3de3ee23d400c5adfbf0b69052e4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::props</definition>
        <argsstring>(std::tuple&lt; Ts... &gt; t)</argsstring>
        <name>props</name>
        <qualifiedname>nw::graph::props</qualifiedname>
        <param>
          <type>std::tuple&lt; Ts... &gt;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="72" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="graph__concepts_8hpp_1a9ab1c5a8dff6e008439cd8c76974f426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>idx_adjacency_list</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const target_tag, const T &amp;graph, const U &amp;e)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>target_tag</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="174" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="graph__concepts_8hpp_1acccaa3b00991e891bb8a97290f2ad91f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>idx_adjacency_list</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const num_vertices_tag, const T &amp;graph)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>num_vertices_tag</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" line="185" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp" bodystart="185" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a3c78e18fdbb523c2c79a62499a4885d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nw::graph::mm_fill</definition>
        <argsstring>(std::istream &amp;inputStream, bi_edge_list&lt; directedness::directed &gt; &amp;A, size_t nNonzeros, bool file_symmetry, bool pattern)</argsstring>
        <name>mm_fill</name>
        <qualifiedname>nw::graph::mm_fill</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>inputStream</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">bi_edge_list</ref>&lt; directedness::directed &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nNonzeros</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>file_symmetry</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="38" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="38" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a130dee76d26610395c0c550fd83e8c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::mm_fill</definition>
        <argsstring>(std::istream &amp;inputStream, bi_edge_list&lt; directedness::directed, T &gt; &amp;A, size_t nNonzeros, bool file_symmetry, bool pattern)</argsstring>
        <name>mm_fill</name>
        <qualifiedname>nw::graph::mm_fill</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>inputStream</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">bi_edge_list</ref>&lt; directedness::directed, T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nNonzeros</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>file_symmetry</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="58" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="58" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1ad10342a5a549db4bb0ae620a454ea046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nw::graph::mm_fill</definition>
        <argsstring>(std::istream &amp;inputStream, edge_list&lt; directedness::directed &gt; &amp;A, size_t nNonzeros, bool file_symmetry, bool pattern)</argsstring>
        <name>mm_fill</name>
        <qualifiedname>nw::graph::mm_fill</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>inputStream</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">edge_list</ref>&lt; directedness::directed &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nNonzeros</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>file_symmetry</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="83" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="83" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1af04b8a10889664ae5200d276b4c91a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::mm_fill</definition>
        <argsstring>(std::istream &amp;inputStream, edge_list&lt; directedness::directed, T &gt; &amp;A, size_t nNonzeros, bool file_symmetry, bool pattern)</argsstring>
        <name>mm_fill</name>
        <qualifiedname>nw::graph::mm_fill</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>inputStream</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">edge_list</ref>&lt; directedness::directed, T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nNonzeros</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>file_symmetry</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="103" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="103" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a95fa0e90babe27b1c8c5b19dcaf27ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nw::graph::mm_fill</definition>
        <argsstring>(std::istream &amp;inputStream, edge_list&lt; directedness::undirected &gt; &amp;A, size_t nNonzeros, bool file_symmetry, bool pattern)</argsstring>
        <name>mm_fill</name>
        <qualifiedname>nw::graph::mm_fill</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>inputStream</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">edge_list</ref>&lt; directedness::undirected &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nNonzeros</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>file_symmetry</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="128" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="128" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a3e7cf95e1b063f4326cb6bbde4fda213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::mm_fill</definition>
        <argsstring>(std::istream &amp;inputStream, edge_list&lt; directedness::undirected, T &gt; &amp;A, size_t nNonzeros, bool file_symmetry, bool pattern)</argsstring>
        <name>mm_fill</name>
        <qualifiedname>nw::graph::mm_fill</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>inputStream</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">edge_list</ref>&lt; directedness::undirected, T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nNonzeros</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>file_symmetry</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="149" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="149" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a4d0eacada6c23f13a35d3b72fb486431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>directedness</type>
            <declname>sym</declname>
            <defname>sym</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">edge_list</ref>&lt; sym, Attributes... &gt;</type>
        <definition>edge_list&lt; sym, Attributes... &gt; nw::graph::read_mm</definition>
        <argsstring>(std::istream &amp;inputStream)</argsstring>
        <name>read_mm</name>
        <qualifiedname>nw::graph::read_mm</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>inputStream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="169" column="11" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="169" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1ac550eb3179581bfb74714a16ec7546b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>directedness</type>
            <declname>sym</declname>
            <defname>sym</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">edge_list</ref>&lt; sym, Attributes... &gt;</type>
        <definition>edge_list&lt; sym, Attributes... &gt; nw::graph::read_mm</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>read_mm</name>
        <qualifiedname>nw::graph::read_mm</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="208" column="11" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="208" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a648e9f9d3a57d62e5d91fe834ca58e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>directedness</type>
            <declname>sym</declname>
            <defname>sym</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
          <param>
            <type>edge_list_graph</type>
            <declname>edge_list_t</declname>
            <defname>edge_list_t</defname>
          </param>
        </templateparamlist>
        <type>edge_list_t</type>
        <definition>edge_list_t nw::graph::read_mm</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>read_mm</name>
        <qualifiedname>nw::graph::read_mm</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="217" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="217" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a32111131ade401f49242cfb8fe805860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::read_mm_vector</definition>
        <argsstring>(std::istream &amp;inputStream)</argsstring>
        <name>read_mm_vector</name>
        <qualifiedname>nw::graph::read_mm_vector</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>inputStream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="275" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="275" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a43cfea7c007178c44c06ce6e262020ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::read_mm_vector</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>read_mm_vector</name>
        <qualifiedname>nw::graph::read_mm_vector</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="329" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="329" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1ae53a907027cb7ae6f01ac9962c5eee91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nw::graph::is_mm</definition>
        <argsstring>(const std::string filename)</argsstring>
        <name>is_mm</name>
        <qualifiedname>nw::graph::is_mm</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="337" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="337" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a5c8486714228d558393311405bafd6b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>directedness</type>
        <definition>directedness nw::graph::get_mm_symmetry</definition>
        <argsstring>(const std::string filename)</argsstring>
        <name>get_mm_symmetry</name>
        <qualifiedname>nw::graph::get_mm_symmetry</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="351" column="14" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="351" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a9dad98405a4a2a4f759ca58da5662a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>w_idx</declname>
            <defname>w_idx</defname>
          </param>
          <param>
            <type>directedness</type>
            <declname>sym</declname>
            <defname>sym</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::aos_stream</definition>
        <argsstring>(std::ofstream &amp;outputStream, edge_list&lt; sym, Attributes... &gt; A, const std::string &amp;file_symmetry, std::string &amp;w_type)</argsstring>
        <name>aos_stream</name>
        <qualifiedname>nw::graph::aos_stream</qualifiedname>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>outputStream</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">edge_list</ref>&lt; sym, Attributes... &gt;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_symmetry</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>w_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="375" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="375" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a3e0e78de287f47116db74a55437052d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>w_idx</declname>
            <defname>w_idx</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>typename idxtype</type>
            <defval>void</defval>
          </param>
          <param>
            <type>directedness</type>
            <declname>sym</declname>
            <defname>sym</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::write_mm</definition>
        <argsstring>(const std::string &amp;filename, edge_list&lt; sym, Attributes... &gt; &amp;A, const std::string &amp;file_symmetry=&quot;general&quot;)</argsstring>
        <name>write_mm</name>
        <qualifiedname>nw::graph::write_mm</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__edge__list" kindref="compound">edge_list</ref>&lt; sym, Attributes... &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_symmetry</declname>
          <defval>&quot;general&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="402" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="402" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a84678a3cd457b5d30be34420e50ff606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>w_idx</declname>
            <defname>w_idx</defname>
          </param>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::adjacency_stream</definition>
        <argsstring>(std::ofstream &amp;outputStream, adjacency&lt; idx, Attributes... &gt; &amp;A, const std::string &amp;file_symmetry, std::string &amp;w_type)</argsstring>
        <name>adjacency_stream</name>
        <qualifiedname>nw::graph::adjacency_stream</qualifiedname>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>outputStream</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">adjacency</ref>&lt; idx, Attributes... &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_symmetry</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>w_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="418" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="418" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1ade3e155afaee5a20fc95a0ba69b532e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>w_idx</declname>
            <defname>w_idx</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>typename idxtype</type>
            <defval>void</defval>
          </param>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::write_mm</definition>
        <argsstring>(const std::string &amp;filename, adjacency&lt; idx, Attributes... &gt; &amp;A, const std::string &amp;file_symmetry=&quot;general&quot;)</argsstring>
        <name>write_mm</name>
        <qualifiedname>nw::graph::write_mm</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__adjacency" kindref="compound">adjacency</ref>&lt; idx, Attributes... &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_symmetry</declname>
          <defval>&quot;general&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="434" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="434" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1adf117ee6668e1ca7b27318461828b60e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>w_idx</declname>
            <defname>w_idx</defname>
          </param>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::adjacency_stream</definition>
        <argsstring>(std::ofstream &amp;outputStream, biadjacency&lt; idx, Attributes... &gt; &amp;A, const std::string &amp;file_symmetry, std::string &amp;w_type)</argsstring>
        <name>adjacency_stream</name>
        <qualifiedname>nw::graph::adjacency_stream</qualifiedname>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>outputStream</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">biadjacency</ref>&lt; idx, Attributes... &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_symmetry</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>w_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="450" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="450" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8hpp_1a228ec3b62c474785548837dbf0e6d4d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>w_idx</declname>
            <defname>w_idx</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>typename idxtype</type>
            <defval>void</defval>
          </param>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::write_mm</definition>
        <argsstring>(const std::string &amp;filename, biadjacency&lt; idx, Attributes... &gt; &amp;A, const std::string &amp;file_symmetry=&quot;general&quot;)</argsstring>
        <name>write_mm</name>
        <qualifiedname>nw::graph::write_mm</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__biadjacency" kindref="compound">biadjacency</ref>&lt; idx, Attributes... &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_symmetry</declname>
          <defval>&quot;general&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" line="466" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp" bodystart="466" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8hpp_1a97edd2dc69a833462d08c7ff0232700d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::memory_order</type>
            <declname>order</declname>
            <defname>order</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto nw::graph::load</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>load</name>
        <qualifiedname>nw::graph::load</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The loaded value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" line="24" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" bodystart="24" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8hpp_1a208cf515e1644244d6373c81ed7c23dc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::memory_order</type>
            <declname>order</declname>
            <defname>order</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void nw::graph::store</definition>
        <argsstring>(T &amp;&amp;t, U &amp;&amp;u)</argsstring>
        <name>store</name>
        <qualifiedname>nw::graph::store</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Atomic store operation.</para>
<para>This wraps the store member functions for atomics, and simulates atomic_ref for non-atomic integral types using gcc&apos;s atomic builtins.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory order for the operation [default: release] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the variable to store to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the value to store.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable to store to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" line="44" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" bodystart="44" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8hpp_1a51c1b44a10103c47086332e9b13d8476" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::memory_order</type>
            <declname>success</declname>
            <defname>success</defname>
            <defval>std::memory_order_acq_rel</defval>
          </param>
          <param>
            <type>std::memory_order</type>
            <declname>failure</declname>
            <defname>failure</defname>
            <defval>std::memory_order_acquire</defval>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool nw::graph::cas</definition>
        <argsstring>(T &amp;&amp;t, U &amp;&amp;u, V &amp;&amp;v)</argsstring>
        <name>cas</name>
        <qualifiedname>nw::graph::cas</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>V &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAS an atomic.</para>
<para>This makes it easy to use acquire-release semantics in a compare_exchange operation. It wraps the compare exchange operation for atomics, and simulates atomic_ref for non-atomic integral types using gcc&apos;s atomic builtins.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>success</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory order for successful operations [default: acquire/release] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>failure</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory order for the read operation on failure [default: acquire] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the variable to operate on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the expected value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the value to store.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable to store to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[in/out]</parametername>
</parameternamelist>
<parameterdescription>
<para>u The expected value (updated on failure). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If the compare and exchange succeeded false Otherwise (<computeroutput>u</computeroutput> is updated) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" line="73" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8hpp_1ab72f1718c76dc8616b5441b739b8766b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto nw::graph::acquire</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>acquire</name>
        <qualifiedname>nw::graph::acquire</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load the value using acquire semantics.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the variable to load from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable to load from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The loaded value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" line="89" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8hpp_1a4d7cbd67be82ac4543b71788db265a90" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto nw::graph::relaxed</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>relaxed</name>
        <qualifiedname>nw::graph::relaxed</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" line="94" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8hpp_1a959f8382589254a24bab59903d8ac236" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void nw::graph::release</definition>
        <argsstring>(T &amp;&amp;t, U &amp;&amp;u)</argsstring>
        <name>release</name>
        <qualifiedname>nw::graph::release</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store the value using release semantics.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the variable to store to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the value to store.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable to store to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" line="106" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8hpp_1a3f8202a5661316a11245a79c083ead8a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void nw::graph::relaxed</definition>
        <argsstring>(T &amp;&amp;t, U &amp;&amp;u)</argsstring>
        <name>relaxed</name>
        <qualifiedname>nw::graph::relaxed</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" line="111" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8hpp_1a3c48b0bfdedd93ec53f7a86fe67d777f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::memory_order</type>
            <declname>order</declname>
            <defname>order</defname>
            <defval>std::memory_order_acq_rel</defval>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto nw::graph::fetch_add</definition>
        <argsstring>(T &amp;&amp;t, U &amp;&amp;u)</argsstring>
        <name>fetch_add</name>
        <qualifiedname>nw::graph::fetch_add</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Atomic fetch-and-add.</para>
<para>This provides a uniform atomic fetch-and-add API interface that works for both atomic integer and floating point integral types, and simulates atomic_ref for non-atomic integral types.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory order for the operation [default: acquire/release] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the value to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the variable prior to the add operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>fallback to compiler atomics here... C++20 has atomic_ref.</para>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" line="130" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" bodystart="130" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="atomic_8hpp_1a66d67398688868e5896c1dc3858dcc6d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::memory_order</type>
            <declname>order</declname>
            <defname>order</defname>
            <defval>std::memory_order_acq_rel</defval>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto nw::graph::fetch_or</definition>
        <argsstring>(T &amp;&amp;t, U &amp;&amp;u)</argsstring>
        <name>fetch_or</name>
        <qualifiedname>nw::graph::fetch_or</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" line="154" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/atomic.hpp" bodystart="154" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="demangle_8hpp_1a14db0f0c5564de9159f59e2f34da3342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string nw::graph::demangle</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>demangle</name>
        <qualifiedname>nw::graph::demangle</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/demangle.hpp" line="21" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/demangle.hpp" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="disjoint__set_8hpp_1a3fefca73795ffac8867a3f8016b76ddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vertex_id_type</type>
        <definition>vertex_id_type nw::graph::disjoint_find</definition>
        <argsstring>(std::vector&lt; std::pair&lt; vertex_id_type, size_t &gt; &gt; &amp;subsets, vertex_id_type vtx)</argsstring>
        <name>disjoint_find</name>
        <qualifiedname>nw::graph::disjoint_find</qualifiedname>
        <param>
          <type>std::vector&lt; std::pair&lt; vertex_id_type, size_t &gt; &gt; &amp;</type>
          <declname>subsets</declname>
        </param>
        <param>
          <type>vertex_id_type</type>
          <declname>vtx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/disjoint_set.hpp" line="37" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/disjoint_set.hpp" bodystart="37" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="disjoint__set_8hpp_1ad2c9a4519f7506231db05f701e2e022a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nw::graph::disjoint_union</definition>
        <argsstring>(std::vector&lt; std::pair&lt; vertex_id_type, size_t &gt; &gt; &amp;subsets, vertex_id_type u, vertex_id_type v)</argsstring>
        <name>disjoint_union</name>
        <qualifiedname>nw::graph::disjoint_union</qualifiedname>
        <param>
          <type>std::vector&lt; std::pair&lt; vertex_id_type, size_t &gt; &gt; &amp;</type>
          <declname>subsets</declname>
        </param>
        <param>
          <type>vertex_id_type</type>
          <declname>u</declname>
        </param>
        <param>
          <type>vertex_id_type</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/disjoint_set.hpp" line="50" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/disjoint_set.hpp" bodystart="50" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="disjoint__set_8hpp_1a88c17763c8d4f041c835d4fc8916c6b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nw::graph::disjoint_union_find</definition>
        <argsstring>(std::vector&lt; std::pair&lt; vertex_id_type, size_t &gt; &gt; &amp;subsets, vertex_id_type u, vertex_id_type v)</argsstring>
        <name>disjoint_union_find</name>
        <qualifiedname>nw::graph::disjoint_union_find</qualifiedname>
        <param>
          <type>std::vector&lt; std::pair&lt; vertex_id_type, size_t &gt; &gt; &amp;</type>
          <declname>subsets</declname>
        </param>
        <param>
          <type>vertex_id_type</type>
          <declname>u</declname>
        </param>
        <param>
          <type>vertex_id_type</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/disjoint_set.hpp" line="66" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/disjoint_set.hpp" bodystart="66" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="intersection__size_8hpp_1a00d5bda79e27a385795d2deb9c5c0156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>class D</type>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::intersection_size</definition>
        <argsstring>(A i, B &amp;&amp;ie, C j, D &amp;&amp;je, ExecutionPolicy &amp;&amp;ep)</argsstring>
        <name>intersection_size</name>
        <qualifiedname>nw::graph::intersection_size</qualifiedname>
        <param>
          <type>A</type>
          <declname>i</declname>
        </param>
        <param>
          <type>B &amp;&amp;</type>
          <declname>ie</declname>
        </param>
        <param>
          <type>C</type>
          <declname>j</declname>
        </param>
        <param>
          <type>D &amp;&amp;</type>
          <declname>je</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Basic helper used for all of the inner set intersections.</para>
<para>This wraps <computeroutput>std::set_intersection</computeroutput> to produce the size of the set rather than the set itself, and also handles the fact that our iterator value types are tuples where we only care about the first element for ordering.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the first iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the second iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the third iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the fourth iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ExecutionPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the parallel execution policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the first range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ie</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the first range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the second range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>je</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the second range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel execution policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the intersected set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/intersection_size.hpp" line="47" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/intersection_size.hpp" bodystart="47" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="intersection__size_8hpp_1a947ff7906b1c5cd4b63aca130795718e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class R</type>
          </param>
          <param>
            <type>class S</type>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_execution_policy_v&lt; std::decay_t&lt; ExecutionPolicy &gt; &gt;, void ** &gt;</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::intersection_size</definition>
        <argsstring>(R &amp;&amp;i, S &amp;&amp;j, ExecutionPolicy &amp;&amp;ep)</argsstring>
        <name>intersection_size</name>
        <qualifiedname>nw::graph::intersection_size</qualifiedname>
        <param>
          <type>R &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>S &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience overload for <computeroutput>intersection_size</computeroutput>.</para>
<para>This overload takes two ranges and an execution policy, and forwards to the base <computeroutput>intersection_size</computeroutput> implementation.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the first range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the second range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ExecutionPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the parallel execution policy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_0</parametername>
</parameternamelist>
<parameterdescription>
<para>SFINAE to disambiguate from other 3 argument versions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The first range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The second range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel execution policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the intersected set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/intersection_size.hpp" line="96" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/intersection_size.hpp" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="intersection__size_8hpp_1ad842f9919baf84e4b187a587f3dde271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
          <param>
            <type>class Range</type>
          </param>
          <param>
            <type>class ExecutionPolicy</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_execution_policy_v&lt; std::decay_t&lt; ExecutionPolicy &gt; &gt;, void ** &gt;</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::intersection_size</definition>
        <argsstring>(A &amp;&amp;i, B &amp;&amp;ie, Range &amp;&amp;j, ExecutionPolicy &amp;&amp;ep)</argsstring>
        <name>intersection_size</name>
        <qualifiedname>nw::graph::intersection_size</qualifiedname>
        <param>
          <type>A &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>B &amp;&amp;</type>
          <declname>ie</declname>
        </param>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ExecutionPolicy &amp;&amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience overload for <computeroutput>intersection_size</computeroutput>.</para>
<para>This overload takes two iterators defining the first range, and a second range, and forwards to the base <computeroutput>intersection_size</computeroutput> implementation.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the first iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the second iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Range</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the second range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ExecutionPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the parallel execution policy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_0</parametername>
</parameternamelist>
<parameterdescription>
<para>SFINAE to disambiguate from other 4 argument versions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the first range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ie</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the first range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The second range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel execution policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the intersected set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/intersection_size.hpp" line="119" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/intersection_size.hpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="intersection__size_8hpp_1a3a26032fa1d2d600c56a2d651761ecb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>class D</type>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_execution_policy_v&lt; std::decay_t&lt; D &gt; &gt;, void ** &gt;</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::intersection_size</definition>
        <argsstring>(A &amp;&amp;i, B &amp;&amp;ie, C &amp;&amp;j, D &amp;&amp;je)</argsstring>
        <name>intersection_size</name>
        <qualifiedname>nw::graph::intersection_size</qualifiedname>
        <param>
          <type>A &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>B &amp;&amp;</type>
          <declname>ie</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>D &amp;&amp;</type>
          <declname>je</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience overload for <computeroutput>intersection_size</computeroutput>.</para>
<para>This overload takes two ranges as begin/end iterator pairs, and forwards to the base <computeroutput>intersection_size</computeroutput> with a sequential execution policy.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the first iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the second iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the third iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the fourth iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_0</parametername>
</parameternamelist>
<parameterdescription>
<para>SFINAE to disambiguate from other 4 argument versions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the first range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ie</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the first range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the second range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>je</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the second range.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the intersected set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/intersection_size.hpp" line="141" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/intersection_size.hpp" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="intersection__size_8hpp_1af889283b5068327bdf6f4d5d739df0bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class R</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::intersection_size</definition>
        <argsstring>(R &amp;&amp;i, S &amp;&amp;j)</argsstring>
        <name>intersection_size</name>
        <qualifiedname>nw::graph::intersection_size</qualifiedname>
        <param>
          <type>R &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>S &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience overload for <computeroutput>intersection_size</computeroutput>.</para>
<para>This overload takes two ranges and and forwards to the base <computeroutput>intersection_size</computeroutput> implementation with a sequential execution policy.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the first range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the second range.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The first range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The second range.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the intersected set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/intersection_size.hpp" line="158" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/intersection_size.hpp" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="intersection__size_8hpp_1aaed03066ef57eb9dd8bfa6e86bfcdfe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
          <param>
            <type>class Range</type>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_execution_policy_v&lt; std::decay_t&lt; Range &gt; &gt;, void ** &gt;</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nw::graph::intersection_size</definition>
        <argsstring>(A &amp;&amp;i, B &amp;&amp;ie, Range &amp;&amp;j)</argsstring>
        <name>intersection_size</name>
        <qualifiedname>nw::graph::intersection_size</qualifiedname>
        <param>
          <type>A &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>B &amp;&amp;</type>
          <declname>ie</declname>
        </param>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience overload for <computeroutput>intersection_size</computeroutput>.</para>
<para>This overload takes two iterators defining the first range, and a second range, and forwards to the base <computeroutput>intersection_size</computeroutput> implementation with a sequential execution policy.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the first iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the second iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Range</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the second range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_0</parametername>
</parameternamelist>
<parameterdescription>
<para>SFINAE to disambiguate from other 3 argument versions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the first range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ie</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the first range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The second range.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the intersected set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/intersection_size.hpp" line="179" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/intersection_size.hpp" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="make__priority__queue_8hpp_1ae560ce3dcb2ef9c506b2bb01f3823f75" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto nw::graph::make_priority_queue</definition>
        <argsstring>(Compare &amp;&amp;compare)</argsstring>
        <name>make_priority_queue</name>
        <qualifiedname>nw::graph::make_priority_queue</qualifiedname>
        <param>
          <type>Compare &amp;&amp;</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <computeroutput>std::priority_queue</computeroutput> instantiated with the proper types. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/make_priority_queue.hpp" line="23" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/make_priority_queue.hpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="make__priority__queue_8hpp_1a391af469a7f70c11246e4178f5b6884d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto nw::graph::make_priority_queue</definition>
        <argsstring>(Compare &amp;&amp;compare)</argsstring>
        <name>make_priority_queue</name>
        <qualifiedname>nw::graph::make_priority_queue</qualifiedname>
        <param>
          <type>Compare &amp;&amp;</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a priority queue adapter for a <computeroutput>std::vector&lt;T&gt;</computeroutput>.</para>
<para>This convenience utility forwards the <computeroutput>compare</computeroutput> object to <computeroutput>nw::graph::make_priority_queue</computeroutput> while selecting a <computeroutput>std::vector&lt;T&gt;</computeroutput> as the container type.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the stored element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Compare</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the comparison object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>The comparison object to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>std::priority_queue</computeroutput> wrapping a <computeroutput>std::vector&lt;T&gt;</computeroutput> that uses the passed <computeroutput>compare</computeroutput> operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/make_priority_queue.hpp" line="42" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/make_priority_queue.hpp" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="parallel__for_8hpp_1ac8d361c2d6be92784107fc1198f9bcef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Op</type>
          </param>
          <param>
            <type>class It</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::parallel_for_inner</definition>
        <argsstring>(Op &amp;&amp;op, It &amp;&amp;i)</argsstring>
        <name>parallel_for_inner</name>
        <qualifiedname>nw::graph::parallel_for_inner</qualifiedname>
        <param>
          <type>Op &amp;&amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>It &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Op</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>It</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the iterator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operator to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The iterator to evaluate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>op(i) if <computeroutput>i</computeroutput> is an integral type op(unpack(i)...) if <computeroutput>i</computeroutput> is a tuple type parallel_for_inner(*i) otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/parallel_for.hpp" line="31" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/parallel_for.hpp" bodystart="31" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="parallel__for_8hpp_1aac8b388bc7f316ef3b8f116dabac8b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Range</type>
          </param>
          <param>
            <type>class Op</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::parallel_for_sequential</definition>
        <argsstring>(Range &amp;&amp;range, Op &amp;&amp;op)</argsstring>
        <name>parallel_for_sequential</name>
        <qualifiedname>nw::graph::parallel_for_sequential</qualifiedname>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Op &amp;&amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply an operator to a range sequentially.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Range</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Op</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operator to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/parallel_for.hpp" line="53" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/parallel_for.hpp" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="parallel__for_8hpp_1a638374032d7a75cc90ec41a1a7d74956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Range</type>
          </param>
          <param>
            <type>class Op</type>
          </param>
          <param>
            <type>class Reduce</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::parallel_for_sequential</definition>
        <argsstring>(Range &amp;&amp;range, Op &amp;&amp;op, Reduce &amp;&amp;reduce, T init)</argsstring>
        <name>parallel_for_sequential</name>
        <qualifiedname>nw::graph::parallel_for_sequential</qualifiedname>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Op &amp;&amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Reduce &amp;&amp;</type>
          <declname>reduce</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply an operator to a range sequentially, reducing the result.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Range</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Op</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Reduce</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the reduction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The reduced type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operator to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce</parametername>
</parameternamelist>
<parameterdescription>
<para>The reduction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial value for the reduction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of <computeroutput>reduce(op(i), ...)</computeroutput> for all <computeroutput>i</computeroutput> in <computeroutput>range</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/parallel_for.hpp" line="74" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/parallel_for.hpp" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="parallel__for_8hpp_1a54b7930b02f5d1182a4b77f092654cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Range</type>
          </param>
          <param>
            <type>class Op</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::parallel_for</definition>
        <argsstring>(Range &amp;&amp;range, Op &amp;&amp;op)</argsstring>
        <name>parallel_for</name>
        <qualifiedname>nw::graph::parallel_for</qualifiedname>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Op &amp;&amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BGL&apos;s parallel_for wrapper.</para>
<para>This performs a dynamic check on <computeroutput>range.is_divisible()</computeroutput> before calling into the parallel library, which we have found to be important for performance. If not <computeroutput>range.is_divisible()</computeroutput> then it will perform a synchronous for loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Range</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Op</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operator to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/parallel_for.hpp" line="94" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/parallel_for.hpp" bodystart="94" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="parallel__for_8hpp_1acf8de9eababdef9c1f4824bce0a6220f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Range</type>
          </param>
          <param>
            <type>class Op</type>
          </param>
          <param>
            <type>class Reduce</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::parallel_reduce</definition>
        <argsstring>(Range &amp;&amp;range, Op &amp;&amp;op, Reduce &amp;&amp;reduce, T init)</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>nw::graph::parallel_reduce</qualifiedname>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>Op &amp;&amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Reduce &amp;&amp;</type>
          <declname>reduce</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BGL&apos;s parallel_for wrapper that supports reductions.</para>
<para>This performs the designated reduction over the range. It will perform the reduction in parallel if <computeroutput>range.is_divisible()</computeroutput>, otherwise it will perform a synchronous sequential reduction.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Range</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Op</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Reduce</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the reduction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The reduced type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operator to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce</parametername>
</parameternamelist>
<parameterdescription>
<para>The reduction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial value for the reduction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of <computeroutput>reduce(op(i), ...)</computeroutput> for all <computeroutput>i</computeroutput> in <computeroutput>range</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/parallel_for.hpp" line="122" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/parallel_for.hpp" bodystart="122" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="provenance_8hpp_1ae2f9c3d89a0f718b79b7a72e8dfdcd5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string &amp; nw::graph::ltrim</definition>
        <argsstring>(std::string &amp;str, const std::string &amp;chars=&quot;\t\n\v\f\r &quot;)</argsstring>
        <name>ltrim</name>
        <qualifiedname>nw::graph::ltrim</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>chars</declname>
          <defval>&quot;\t\n\v\f\r &quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/provenance.hpp" line="23" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/provenance.hpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="provenance_8hpp_1aceeea651a22ccdbe98fc2952ea1ed149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string &amp; nw::graph::rtrim</definition>
        <argsstring>(std::string &amp;str, const std::string &amp;chars=&quot;\t\n\v\f\r &quot;)</argsstring>
        <name>rtrim</name>
        <qualifiedname>nw::graph::rtrim</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>chars</declname>
          <defval>&quot;\t\n\v\f\r &quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/provenance.hpp" line="28" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/provenance.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="provenance_8hpp_1a92bf849117b5a3915116eec0ed606eef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string &amp; nw::graph::trim</definition>
        <argsstring>(std::string &amp;str, const std::string &amp;chars=&quot;\t\n\v\f\r &quot;)</argsstring>
        <name>trim</name>
        <qualifiedname>nw::graph::trim</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>chars</declname>
          <defval>&quot;\t\n\v\f\r &quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/provenance.hpp" line="33" column="13" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/provenance.hpp" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1a1d620f80f5eace2900c4d83d21718f57" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
          <param>
            <type>class Tuple</type>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;is_tuple_v&lt;std::decay_t&lt;Tuple&gt;&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto nw::graph::select</definition>
        <argsstring>(Tuple &amp;&amp;t) -&gt; std::tuple&lt; std::tuple_element_t&lt; Is, std::decay_t&lt; Tuple &gt; &gt;... &gt;</argsstring>
        <name>select</name>
        <qualifiedname>nw::graph::select</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get and permute a subset of indices of a tuple (like get&lt;0, 2, ...&gt;(t))</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Is...</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices to select (can repeat). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>The tuple type from which to select. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_2</parametername>
</parameternamelist>
<parameterdescription>
<para>Concept constraint that Tuple is a tuple.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The tuple from which to select.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tuple composed of the proper elements from <computeroutput>t</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="113" column="16" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1a921d81b59b40d6329b32898a24f4986c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename vertex_id_type</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto nw::graph::null_vertex_v</definition>
        <argsstring>()</argsstring>
        <name>null_vertex_v</name>
        <qualifiedname>nw::graph::null_vertex_v</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="128" column="23" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1aa479ddfe80c98b98bacfeea43bcf0f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;nw::graph::is_tuple_v&lt;typename InputIterator::value_type&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::histogram</definition>
        <argsstring>(InputIterator first, InputIterator last, RandomAccessIterator o_first, RandomAccessIterator o_last, size_t idx=0)</argsstring>
        <name>histogram</name>
        <qualifiedname>nw::graph::histogram</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>o_first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>o_last</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="134" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1a6be514934905b246c04cd77b158da05a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename RandomAccessIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nw::graph::histogram</definition>
        <argsstring>(InputIterator first, InputIterator last, RandomAccessIterator o_first, RandomAccessIterator o_last)</argsstring>
        <name>histogram</name>
        <qualifiedname>nw::graph::histogram</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>o_first</declname>
        </param>
        <param>
          <type>RandomAccessIterator</type>
          <declname>o_last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="140" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1a6babd9725d664cf8e874ab289ef09b5d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr std::underlying_type&lt; T &gt;::type</type>
        <definition>constexpr std::underlying_type&lt; T &gt;::type nw::graph::idx</definition>
        <argsstring>(T value)</argsstring>
        <name>idx</name>
        <qualifiedname>nw::graph::idx</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="146" column="48" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1a0d371b8d843e39a030affc410e9abc19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OuterIter</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::get_source</definition>
        <argsstring>(OuterIter &amp;outer)</argsstring>
        <name>get_source</name>
        <qualifiedname>nw::graph::get_source</qualifiedname>
        <param>
          <type>OuterIter &amp;</type>
          <declname>outer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="151" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1aed9db4727268583745627d02a95eac42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InnerIter</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::get_target</definition>
        <argsstring>(InnerIter &amp;inner)</argsstring>
        <name>get_target</name>
        <qualifiedname>nw::graph::get_target</qualifiedname>
        <param>
          <type>InnerIter &amp;</type>
          <declname>inner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="156" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1a4c90a5d11e01d3475bdbbec8fd725786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
          <param>
            <type>typename Iterator</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::property</definition>
        <argsstring>(Iterator &amp;inner)</argsstring>
        <name>property</name>
        <qualifiedname>nw::graph::property</qualifiedname>
        <param>
          <type>Iterator &amp;</type>
          <declname>inner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="161" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1a2c81419881972f3760ef9775b2020272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
          <param>
            <type>typename Iterator</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::property_ptr</definition>
        <argsstring>(Iterator &amp;inner)</argsstring>
        <name>property_ptr</name>
        <qualifiedname>nw::graph::property_ptr</qualifiedname>
        <param>
          <type>Iterator &amp;</type>
          <declname>inner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="166" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1ae0411163b5fbc6c07ea564621777a958" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr int</type>
        <definition>static constexpr int nw::graph::log2</definition>
        <argsstring>(uint64_t val)</argsstring>
        <name>log2</name>
        <qualifiedname>nw::graph::log2</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The log_2 of an integer is the inverse of pow2... essentially the number of left shift bits we need to shift out of the value to get to 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="172" column="29" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1a0bbb2f4e7e0ccf17c0db8eb5e6854130" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr int</type>
        <definition>static constexpr int nw::graph::ceil_log2</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>ceil_log2</name>
        <qualifiedname>nw::graph::ceil_log2</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para><ulink url="http://stackoverflow.com/questions/3272424/compute-fast-log-base-2-ceiling">http://stackoverflow.com/questions/3272424/compute-fast-log-base-2-ceiling</ulink> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="178" column="29" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1a9ce843f367850422648d76a6c1301908" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr int</type>
        <definition>static constexpr int nw::graph::ceil_log2</definition>
        <argsstring>(int32_t val)</argsstring>
        <name>ceil_log2</name>
        <qualifiedname>nw::graph::ceil_log2</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="183" column="29" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1a3841c794b96b015409f053d053f23a5c" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr int</type>
        <definition>static constexpr int nw::graph::ceil_log2</definition>
        <argsstring>(uint64_t val)</argsstring>
        <name>ceil_log2</name>
        <qualifiedname>nw::graph::ceil_log2</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para><ulink url="http://stackoverflow.com/questions/3272424/compute-fast-log-base-2-ceiling">http://stackoverflow.com/questions/3272424/compute-fast-log-base-2-ceiling</ulink> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="189" column="29" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1a54430f286a4daf3e9c251ca29e074233" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
            <defval>uint64_t</defval>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>static constexpr T nw::graph::pow2</definition>
        <argsstring>(int exp)</argsstring>
        <name>pow2</name>
        <qualifiedname>nw::graph::pow2</qualifiedname>
        <param>
          <type>int</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
<para>Raise 2^exp, when exp is an integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="196" column="20" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="196" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="util_8hpp_1a4a5ffea001832c943bc7183076bbe46b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>constexpr std::pair&lt; T, T &gt;</type>
        <definition>static constexpr std::pair&lt; T, T &gt; nw::graph::block</definition>
        <argsstring>(T N, U n, V id)</argsstring>
        <name>block</name>
        <qualifiedname>nw::graph::block</qualifiedname>
        <param>
          <type>T</type>
          <declname>N</declname>
        </param>
        <param>
          <type>U</type>
          <declname>n</declname>
        </param>
        <param>
          <type>V</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a blocked range pair.</para>
<para>Given a number N, and a number of blocks n, and an id, create a block range for this id. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" line="207" column="28" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/util/util.hpp" bodystart="207" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="vofos_8hpp_1a1522ca7e37cf7bf723085e67127812d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>vertex_id</declname>
            <defname>vertex_id</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const num_vertices_tag, index_adj_flist&lt; idx, vertex_id, Attributes... &gt; &amp;b)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>num_vertices_tag</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__adj__flist" kindref="compound">index_adj_flist</ref>&lt; idx, vertex_id, Attributes... &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/vofos.hpp" line="111" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/vofos.hpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="volos_8hpp_1a5896a46e9c4f381dcce450968c3ccf16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>vertex_id</declname>
            <defname>vertex_id</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Attributes</declname>
            <defname>Attributes</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nw::graph::tag_invoke</definition>
        <argsstring>(const num_vertices_tag, index_adj_list&lt; idx, vertex_id, Attributes... &gt; &amp;b)</argsstring>
        <name>tag_invoke</name>
        <qualifiedname>nw::graph::tag_invoke</qualifiedname>
        <param>
          <type>const</type>
          <declname>num_vertices_tag</declname>
        </param>
        <param>
          <type><ref refid="classnw_1_1graph_1_1index__adj__list" kindref="compound">index_adj_list</ref>&lt; idx, vertex_id, Attributes... &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/lums/NWmath/NWgr/include/nwgraph/volos.hpp" line="111" column="6" bodyfile="/Users/lums/NWmath/NWgr/include/nwgraph/volos.hpp" bodystart="111" bodyend="113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/lums/NWmath/NWgr/include/nwgraph/access.hpp" line="21" column="1"/>
  </compounddef>
</doxygen>
