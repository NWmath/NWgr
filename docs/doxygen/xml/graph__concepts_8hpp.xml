<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="graph__concepts_8hpp" kind="file" language="C++">
    <compoundname>graph_concepts.hpp</compoundname>
    <includes local="no">array</includes>
    <includes local="no">concepts</includes>
    <includes local="no">iterator</includes>
    <includes local="no">ranges</includes>
    <includes local="no">tuple</includes>
    <includes refid="graph__traits_8hpp" local="yes">nwgraph/graph_traits.hpp</includes>
    <includes refid="tag__invoke_8hpp" local="yes">nwgraph/util/tag_invoke.hpp</includes>
    <includedby refid="edge__range_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/edge_range.hpp</includedby>
    <includedby refid="adjacency_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp</includedby>
    <includedby refid="algorithms_2betweenness__centrality_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/betweenness_centrality.hpp</includedby>
    <includedby refid="algorithms_2bfs_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/bfs.hpp</includedby>
    <includedby refid="algorithms_2delta__stepping_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/delta_stepping.hpp</includedby>
    <includedby refid="dijkstra_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/dijkstra.hpp</includedby>
    <includedby refid="algorithms_2jaccard_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/jaccard.hpp</includedby>
    <includedby refid="mis_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/mis.hpp</includedby>
    <includedby refid="algorithms_2page__rank_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/page_rank.hpp</includedby>
    <includedby refid="algorithms_2triangle__count_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/triangle_count.hpp</includedby>
    <includedby refid="build_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp</includedby>
    <includedby refid="edge__list_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp</includedby>
    <includedby refid="experimental_2algorithms_2page__rank_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp</includedby>
    <includedby refid="experimental_2algorithms_2triangle__count_8hpp" local="yes">/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp</label>
        <link refid="graph__concepts_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>nwgraph/graph_traits.hpp</label>
        <link refid="graph__traits_8hpp_source"/>
      </node>
      <node id="8">
        <label>nwgraph/util/tag_invoke.hpp</label>
        <link refid="tag__invoke_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>array</label>
      </node>
      <node id="3">
        <label>concepts</label>
      </node>
      <node id="4">
        <label>iterator</label>
      </node>
      <node id="5">
        <label>ranges</label>
      </node>
      <node id="6">
        <label>tuple</label>
      </node>
      <node id="9">
        <label>type_traits</label>
      </node>
      <node id="10">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/adaptors/edge_range.hpp</label>
        <link refid="edge__range_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/adjacency.hpp</label>
        <link refid="adjacency_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/betweenness_centrality.hpp</label>
        <link refid="algorithms_2betweenness__centrality_8hpp_source"/>
      </node>
      <node id="20">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/bfs.hpp</label>
        <link refid="algorithms_2bfs_8hpp"/>
      </node>
      <node id="3">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/connected_components.hpp</label>
        <link refid="algorithms_2connected__components_8hpp_source"/>
      </node>
      <node id="4">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/dag_based_mis.hpp</label>
        <link refid="dag__based__mis_8hpp_source"/>
      </node>
      <node id="21">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/delta_stepping.hpp</label>
        <link refid="algorithms_2delta__stepping_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/dijkstra.hpp</label>
        <link refid="dijkstra_8hpp_source"/>
      </node>
      <node id="5">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/jaccard.hpp</label>
        <link refid="algorithms_2jaccard_8hpp_source"/>
      </node>
      <node id="6">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/jones_plassmann_coloring.hpp</label>
        <link refid="jones__plassmann__coloring_8hpp_source"/>
      </node>
      <node id="7">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/k_core.hpp</label>
        <link refid="k__core_8hpp_source"/>
      </node>
      <node id="8">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/k_truss.hpp</label>
        <link refid="k__truss_8hpp_source"/>
      </node>
      <node id="24">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/mis.hpp</label>
        <link refid="mis_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/page_rank.hpp</label>
        <link refid="algorithms_2page__rank_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/spMatspMat.hpp</label>
        <link refid="sp_matsp_mat_8hpp_source"/>
      </node>
      <node id="11">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/algorithms/triangle_count.hpp</label>
        <link refid="algorithms_2triangle__count_8hpp_source"/>
      </node>
      <node id="25">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/build.hpp</label>
        <link refid="build_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/coo.hpp</label>
        <link refid="coo_8hpp_source"/>
      </node>
      <node id="16">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/csc.hpp</label>
        <link refid="csc_8hpp_source"/>
      </node>
      <node id="17">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/csr.hpp</label>
        <link refid="csr_8hpp_source"/>
      </node>
      <node id="28">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/edge_list.hpp</label>
        <link refid="edge__list_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/connected_components.hpp</label>
        <link refid="experimental_2algorithms_2connected__components_8hpp_source"/>
      </node>
      <node id="22">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/delta_stepping.hpp</label>
        <link refid="experimental_2algorithms_2delta__stepping_8hpp_source"/>
      </node>
      <node id="13">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/jaccard.hpp</label>
        <link refid="experimental_2algorithms_2jaccard_8hpp_source"/>
      </node>
      <node id="10">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/page_rank.hpp</label>
        <link refid="experimental_2algorithms_2page__rank_8hpp_source"/>
      </node>
      <node id="14">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/experimental/algorithms/triangle_count.hpp</label>
        <link refid="experimental_2algorithms_2triangle__count_8hpp_source"/>
      </node>
      <node id="31">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/generators/configuration_model.hpp</label>
        <link refid="configuration__model_8hpp_source"/>
      </node>
      <node id="1">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp</label>
        <link refid="graph__concepts_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/io/mmio.hpp</label>
        <link refid="mmio_8hpp_source"/>
      </node>
      <node id="26">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/vofos.hpp</label>
        <link refid="vofos_8hpp_source"/>
      </node>
      <node id="27">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/volos.hpp</label>
        <link refid="volos_8hpp_source"/>
      </node>
      <node id="32">
        <label>/Users/lums/NWmath/NWgr/include/nwgraph/vovos.hpp</label>
        <link refid="vovos_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structnw_1_1graph_1_1graph__traits_3_01_outer_3_01_inner_3_01std_1_1tuple_3_01_index_00_01_attributes_8_8_8_01_4_01_4_01_4_01_4" prot="public">nw::graph::graph_traits&lt; Outer&lt; Inner&lt; std::tuple&lt; Index, Attributes... &gt; &gt; &gt; &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1graph__traits_3_01_outer_3_01_inner_3_01_index_01_4_01_4_01_4" prot="public">nw::graph::graph_traits&lt; Outer&lt; Inner&lt; Index &gt; &gt; &gt;</innerclass>
    <innerclass refid="structnw_1_1graph_1_1graph__traits_3_01_g_01_4" prot="public">nw::graph::graph_traits&lt; G &gt;</innerclass>
    <innernamespace refid="namespacenw">nw</innernamespace>
    <innernamespace refid="namespacenw_1_1graph">nw::graph</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NW<sp/>Graph<sp/>(aka<sp/>GraphPack)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(c)<sp/>Pacific<sp/>Northwest<sp/>National<sp/>Laboratory<sp/>2018-2021<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(c)<sp/>University<sp/>of<sp/>Washington<sp/>2018-2021<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>terms<sp/>of<sp/>include<sp/>LICENSE<sp/>file<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Authors:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Andrew<sp/>Lumsdaine<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NW_GRAPH_GRAPH_CONCEPTS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NW_GRAPH_GRAPH_CONCEPTS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;concepts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ranges&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/graph_traits.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwgraph/util/tag_invoke.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nw::graph<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">DECL_TAG_INVOKE(num_vertices);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">DECL_TAG_INVOKE(num_edges);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">DECL_TAG_INVOKE(degree);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">DECL_TAG_INVOKE(source);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">DECL_TAG_INVOKE(target);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">graph<sp/>=<sp/>std::copyable&lt;G&gt;<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(G<sp/>g)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>vertex_id_t&lt;G&gt;;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>{<sp/>num_vertices(g)<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;std::ranges::range_difference_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>inner_range_t<sp/>=<sp/>std::ranges::range_value_t&lt;G&gt;;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator_t<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::ranges::begin(std::declval&lt;T&amp;&gt;()));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_iterator_t<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::ranges::cbegin(std::declval&lt;T&amp;&gt;()));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>inner_iterator_t<sp/>=<sp/>iterator_t&lt;inner_range_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>inner_const_iterator_t<sp/>=<sp/>const_iterator_t&lt;inner_range_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>inner_iterator_t<sp/>=<sp/>iterator_t&lt;inner_range_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>inner_const_iterator_t<sp/>=<sp/>const_iterator_t&lt;inner_range_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>inner_value_t<sp/>=<sp/>std::ranges::range_value_t&lt;inner_range_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nth_cdr(std::tuple&lt;Ts...&gt;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[&amp;]&lt;std::size_t...<sp/>Ns&gt;(std::index_sequence&lt;Ns...&gt;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tuple{std::get&lt;Ns<sp/>+<sp/>N&gt;(t)...};<sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>(std::make_index_sequence&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)<sp/>-<sp/>N&gt;());</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>props(std::tuple&lt;Ts...&gt;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nth_cdr&lt;2&gt;(t);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>attributes_t<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(nth_cdr&lt;1&gt;(inner_value_t&lt;G&gt;{}));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">adjacency_list_graph<sp/>=<sp/>graph&lt;G&gt;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/>std::ranges::random_access_range&lt;G&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/>std::ranges::forward_range&lt;inner_range_t&lt;G&gt;&gt;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/>std::convertible_to&lt;vertex_id_t&lt;G&gt;,std::ranges::range_difference_t&lt;G&gt;&gt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(G<sp/>g,<sp/>vertex_id_t&lt;G&gt;<sp/>u,<sp/>inner_value_t&lt;G&gt;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>{<sp/>g[u]<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;inner_range_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>{<sp/>target(g,<sp/>e)<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;vertex_id_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">degree_enumerable_graph<sp/>=<sp/>adjacency_list_graph&lt;G&gt;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>(G<sp/>g,<sp/>vertex_id_t&lt;G&gt;<sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>{<sp/>degree(g[u])<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;std::ranges::range_difference_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">edge_list_graph<sp/>=<sp/>graph&lt;G&gt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>(G<sp/>g,<sp/>std::ranges::range_value_t&lt;G&gt;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>{<sp/>source(g,<sp/>e)<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;vertex_id_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>{<sp/>target(g,<sp/>e)<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;vertex_id_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>default<sp/>traits<sp/>for<sp/>common<sp/>classes<sp/>of<sp/>graphs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Outer,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Inner,<sp/>std::integral<sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Attributes&gt;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::ranges::random_access_range&lt;Outer&lt;Inner&lt;std::tuple&lt;Index,<sp/>Attributes...&gt;&gt;&gt;&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ranges::forward_range&lt;Inner&lt;std::tuple&lt;Index,<sp/>Attributes...&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="109" refid="structnw_1_1graph_1_1graph__traits_3_01_outer_3_01_inner_3_01std_1_1tuple_3_01_index_00_01_attributes_8_8_8_01_4_01_4_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt;Outer&lt;Inner&lt;std::tuple&lt;Index,<sp/>Attributes...&gt;&gt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vertex_id_type<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Outer,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Inner,<sp/>std::integral<sp/>Index&gt;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::ranges::random_access_range&lt;Outer&lt;Inner&lt;Index&gt;&gt;&gt;<sp/>&amp;&amp;<sp/>std::ranges::forward_range&lt;Inner&lt;Index&gt;&gt;</highlight></codeline>
<codeline lineno="115" refid="structnw_1_1graph_1_1graph__traits_3_01_outer_3_01_inner_3_01_index_01_4_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt;Outer&lt;Inner&lt;Index&gt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vertex_id_type<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>concepts<sp/>are<sp/>to<sp/>capture<sp/>some<sp/>general<sp/>concrete<sp/>graphs<sp/>that<sp/>are<sp/>used:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>range<sp/>of<sp/>range<sp/>of<sp/>vertex<sp/>and<sp/>range<sp/>of<sp/>range<sp/>of<sp/>tuples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">vertex_list_c<sp/>=<sp/>std::ranges::forward_range&lt;R&gt;<sp/>&amp;&amp;<sp/>!std::is_compound_v&lt;std::ranges::range_value_t&lt;R&gt;&gt;;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">edge_list_c<sp/>=<sp/>std::ranges::forward_range&lt;R&gt;<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::ranges::range_value_t&lt;R&gt;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>std::get&lt;0&gt;(e);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">property_edge_list_c<sp/>=<sp/>std::ranges::forward_range&lt;R&gt;<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::ranges::range_value_t&lt;R&gt;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>std::get&lt;1&gt;(e);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>concept<sp/>is<sp/>for<sp/>CPO<sp/>definition.<sp/>It<sp/>is<sp/>not<sp/>a<sp/>graph<sp/>concept,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>comparing<sp/>with<sp/>adjacency_list_graph<sp/>concept.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">min_idx_adjacency_list<sp/>=<sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::ranges::random_access_range&lt;G&gt;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/>vertex_list_c&lt;inner_range_t&lt;G&gt;&gt;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/>std::is_convertible_v&lt;inner_value_t&lt;G&gt;,<sp/>std::ranges::range_difference_t&lt;G&gt;&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(G<sp/>g,<sp/>inner_value_t&lt;G&gt;<sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{<sp/>g[u]<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;inner_range_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>concept<sp/>is<sp/>for<sp/>CPO<sp/>definition.<sp/>It<sp/>is<sp/>not<sp/>a<sp/>graph<sp/>concept,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>comparing<sp/>with<sp/>adjacency_list_graph<sp/>concept.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">idx_adjacency_list<sp/>=<sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::ranges::random_access_range&lt;G&gt;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/>edge_list_c&lt;inner_range_t&lt;G&gt;&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/>std::is_convertible_v&lt;std::tuple_element_t&lt;0,<sp/>inner_value_t&lt;G&gt;&gt;,<sp/>std::ranges::range_difference_t&lt;G&gt;&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(G<sp/>g,<sp/>std::tuple_element_t&lt;0,<sp/>inner_value_t&lt;G&gt;&gt;<sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>{<sp/>g[u]<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;inner_range_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>the<sp/>above<sp/>concepts,<sp/>we<sp/>define<sp/>concept-based<sp/>overloads<sp/>for<sp/>vertex_id_type<sp/>and<sp/>some<sp/>CPOs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Graph<sp/>traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;min_</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x_adjacency_list<sp/>G&gt;</highlight></codeline>
<codeline lineno="163" refid="structnw_1_1graph_1_1graph__traits_3_01_g_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt;G&gt;<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vertex_id_type<sp/>=<sp/>inner_value_t&lt;G&gt;;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x_adjacency_list<sp/>G&gt;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnw_1_1graph_1_1graph__traits" kindref="compound">graph_traits</ref>&lt;G&gt;<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vertex_id_type<sp/>=<sp/>std::tuple_element_t&lt;0,<sp/>inner_value_t&lt;G&gt;&gt;;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">};</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>target<sp/>CPO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x_adjacency_list<sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_invoke(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>target_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(e);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;min_</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x_adjacency_list<sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_invoke(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>target_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>num_vertices<sp/>CPO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x_adjacency_list<sp/>T&gt;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_invoke(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>num_vertices_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>graph)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vertex_id_t&lt;T&gt;)<sp/>graph.size();</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;min_</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x_adjacency_list<sp/>T&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_invoke(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>num_vertices_tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>graph)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vertex_id_t&lt;T&gt;)<sp/>graph.size();</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nw::graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>NW_GRAPH_GRAPH_CONCEPTS_HPP</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/lums/NWmath/NWgr/include/nwgraph/graph_concepts.hpp"/>
  </compounddef>
</doxygen>
